
STM32L476G-Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080032b8  080032b8  000132b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080032bc  080032bc  000132bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000044  20000000  080032c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004244  20000044  08003304  00020044  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20004288  08003304  00024288  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018d72  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002c16  00000000  00000000  00038de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009ac9  00000000  00000000  0003b9fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c98  00000000  00000000  000454c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000011d0  00000000  00000000  00046160  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007047  00000000  00000000  00047330  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004f1d  00000000  00000000  0004e377  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00053294  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000243c  00000000  00000000  00053310  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000044 	.word	0x20000044
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003254 	.word	0x08003254

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000048 	.word	0x20000048
 80001c4:	08003254 	.word	0x08003254

080001c8 <cs43l22_SetFrequency>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
  return 0;
}
 80001c8:	2000      	movs	r0, #0
 80001ca:	4770      	bx	lr

080001cc <cs43l22_Reset>:
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t cs43l22_Reset(uint16_t DeviceAddr)
{
  return 0;
}
 80001cc:	2000      	movs	r0, #0
 80001ce:	4770      	bx	lr

080001d0 <cs43l22_SetVolume>:
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80001d0:	2964      	cmp	r1, #100	; 0x64
{
 80001d2:	b538      	push	{r3, r4, r5, lr}
 80001d4:	b2c5      	uxtb	r5, r0
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80001d6:	d80e      	bhi.n	80001f6 <cs43l22_SetVolume+0x26>
 80001d8:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80001dc:	2464      	movs	r4, #100	; 0x64
 80001de:	fb91 f4f4 	sdiv	r4, r1, r4
 80001e2:	b2e4      	uxtb	r4, r4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MASTER_A_VOL, convertedvol + 0x19); 
 80001e4:	3419      	adds	r4, #25
 80001e6:	b2e4      	uxtb	r4, r4
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
  uint32_t result = 0;
  
  AUDIO_IO_Write(Addr, Reg, Value);
 80001e8:	4622      	mov	r2, r4
 80001ea:	2120      	movs	r1, #32
 80001ec:	4628      	mov	r0, r5
 80001ee:	f000 faaf 	bl	8000750 <AUDIO_IO_Write>
 80001f2:	4622      	mov	r2, r4
 80001f4:	e007      	b.n	8000206 <cs43l22_SetVolume+0x36>
  if(Volume > 0xE6)
 80001f6:	29e6      	cmp	r1, #230	; 0xe6
 80001f8:	d90b      	bls.n	8000212 <cs43l22_SetVolume+0x42>
  AUDIO_IO_Write(Addr, Reg, Value);
 80001fa:	227d      	movs	r2, #125	; 0x7d
 80001fc:	2120      	movs	r1, #32
 80001fe:	4628      	mov	r0, r5
 8000200:	f000 faa6 	bl	8000750 <AUDIO_IO_Write>
 8000204:	227d      	movs	r2, #125	; 0x7d
 8000206:	4628      	mov	r0, r5
 8000208:	2121      	movs	r1, #33	; 0x21
 800020a:	f000 faa1 	bl	8000750 <AUDIO_IO_Write>
}
 800020e:	2000      	movs	r0, #0
 8000210:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8000212:	2464      	movs	r4, #100	; 0x64
 8000214:	e7e6      	b.n	80001e4 <cs43l22_SetVolume+0x14>
	...

08000218 <cs43l22_Init>:
{
 8000218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800021a:	4606      	mov	r6, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL1, 0x01);  
 800021c:	b2f4      	uxtb	r4, r6
{
 800021e:	460d      	mov	r5, r1
 8000220:	4617      	mov	r7, r2
  AUDIO_IO_Init();     
 8000222:	f000 f9e5 	bl	80005f0 <AUDIO_IO_Init>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000226:	2201      	movs	r2, #1
 8000228:	2102      	movs	r1, #2
 800022a:	4620      	mov	r0, r4
 800022c:	f000 fa90 	bl	8000750 <AUDIO_IO_Write>
  switch (OutputDevice)
 8000230:	1e6a      	subs	r2, r5, #1
 8000232:	4b2a      	ldr	r3, [pc, #168]	; (80002dc <cs43l22_Init+0xc4>)
 8000234:	2a03      	cmp	r2, #3
 8000236:	d84e      	bhi.n	80002d6 <cs43l22_Init+0xbe>
 8000238:	e8df f002 	tbb	[pc, r2]
 800023c:	4d4b4902 	.word	0x4d4b4902
    OutputDev = 0xFA;
 8000240:	22fa      	movs	r2, #250	; 0xfa
    OutputDev = 0x05;
 8000242:	701a      	strb	r2, [r3, #0]
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000244:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000246:	2104      	movs	r1, #4
 8000248:	4620      	mov	r0, r4
 800024a:	f000 fa81 	bl	8000750 <AUDIO_IO_Write>
 800024e:	2281      	movs	r2, #129	; 0x81
 8000250:	2105      	movs	r1, #5
 8000252:	4620      	mov	r0, r4
 8000254:	f000 fa7c 	bl	8000750 <AUDIO_IO_Write>
 8000258:	2204      	movs	r2, #4
 800025a:	2106      	movs	r1, #6
 800025c:	4620      	mov	r0, r4
 800025e:	f000 fa77 	bl	8000750 <AUDIO_IO_Write>
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 8000262:	4630      	mov	r0, r6
 8000264:	4639      	mov	r1, r7
 8000266:	f7ff ffb3 	bl	80001d0 <cs43l22_SetVolume>
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 800026a:	2d02      	cmp	r5, #2
  counter += cs43l22_SetVolume(DeviceAddr, Volume);
 800026c:	4606      	mov	r6, r0
  if(OutputDevice != OUTPUT_DEVICE_HEADPHONE)
 800026e:	d00e      	beq.n	800028e <cs43l22_Init+0x76>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000270:	2206      	movs	r2, #6
 8000272:	210f      	movs	r1, #15
 8000274:	4620      	mov	r0, r4
 8000276:	f000 fa6b 	bl	8000750 <AUDIO_IO_Write>
 800027a:	2200      	movs	r2, #0
 800027c:	2124      	movs	r1, #36	; 0x24
 800027e:	4620      	mov	r0, r4
 8000280:	f000 fa66 	bl	8000750 <AUDIO_IO_Write>
 8000284:	2200      	movs	r2, #0
 8000286:	2125      	movs	r1, #37	; 0x25
 8000288:	4620      	mov	r0, r4
 800028a:	f000 fa61 	bl	8000750 <AUDIO_IO_Write>
 800028e:	4620      	mov	r0, r4
 8000290:	2200      	movs	r2, #0
 8000292:	210a      	movs	r1, #10
 8000294:	f000 fa5c 	bl	8000750 <AUDIO_IO_Write>
 8000298:	4620      	mov	r0, r4
 800029a:	2204      	movs	r2, #4
 800029c:	210e      	movs	r1, #14
 800029e:	f000 fa57 	bl	8000750 <AUDIO_IO_Write>
 80002a2:	4620      	mov	r0, r4
 80002a4:	2200      	movs	r2, #0
 80002a6:	2127      	movs	r1, #39	; 0x27
 80002a8:	f000 fa52 	bl	8000750 <AUDIO_IO_Write>
 80002ac:	4620      	mov	r0, r4
 80002ae:	220f      	movs	r2, #15
 80002b0:	211f      	movs	r1, #31
 80002b2:	f000 fa4d 	bl	8000750 <AUDIO_IO_Write>
 80002b6:	4620      	mov	r0, r4
 80002b8:	220a      	movs	r2, #10
 80002ba:	211a      	movs	r1, #26
 80002bc:	f000 fa48 	bl	8000750 <AUDIO_IO_Write>
 80002c0:	4620      	mov	r0, r4
 80002c2:	220a      	movs	r2, #10
 80002c4:	211b      	movs	r1, #27
 80002c6:	f000 fa43 	bl	8000750 <AUDIO_IO_Write>
}
 80002ca:	4630      	mov	r0, r6
 80002cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OutputDev = 0xAF;
 80002ce:	22af      	movs	r2, #175	; 0xaf
 80002d0:	e7b7      	b.n	8000242 <cs43l22_Init+0x2a>
    OutputDev = 0xAA;
 80002d2:	22aa      	movs	r2, #170	; 0xaa
 80002d4:	e7b5      	b.n	8000242 <cs43l22_Init+0x2a>
    OutputDev = 0x05;
 80002d6:	2205      	movs	r2, #5
 80002d8:	e7b3      	b.n	8000242 <cs43l22_Init+0x2a>
 80002da:	bf00      	nop
 80002dc:	20000060 	.word	0x20000060

080002e0 <cs43l22_DeInit>:
  AUDIO_IO_DeInit();
 80002e0:	f000 b9b8 	b.w	8000654 <AUDIO_IO_DeInit>

080002e4 <cs43l22_ReadID>:
{
 80002e4:	b510      	push	{r4, lr}
 80002e6:	4604      	mov	r4, r0
  AUDIO_IO_Init(); 
 80002e8:	f000 f982 	bl	80005f0 <AUDIO_IO_Init>
  Value = AUDIO_IO_Read(DeviceAddr, CS43L22_CHIPID_ADDR);
 80002ec:	2101      	movs	r1, #1
 80002ee:	b2e0      	uxtb	r0, r4
 80002f0:	f000 fa4a 	bl	8000788 <AUDIO_IO_Read>
}
 80002f4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80002f8:	bd10      	pop	{r4, pc}

080002fa <cs43l22_SetMute.part.0>:
uint32_t cs43l22_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
 80002fa:	b510      	push	{r4, lr}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, 0xFF);
 80002fc:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80002fe:	4620      	mov	r0, r4
 8000300:	22ff      	movs	r2, #255	; 0xff
 8000302:	2104      	movs	r1, #4
 8000304:	f000 fa24 	bl	8000750 <AUDIO_IO_Write>
 8000308:	4620      	mov	r0, r4
 800030a:	2201      	movs	r2, #1
 800030c:	2122      	movs	r1, #34	; 0x22
 800030e:	f000 fa1f 	bl	8000750 <AUDIO_IO_Write>
 8000312:	4620      	mov	r0, r4
 8000314:	2201      	movs	r2, #1
 8000316:	2123      	movs	r1, #35	; 0x23
}
 8000318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  AUDIO_IO_Write(Addr, Reg, Value);
 800031c:	f000 ba18 	b.w	8000750 <AUDIO_IO_Write>

08000320 <cs43l22_SetMute>:
  if(Cmd == AUDIO_MUTE_ON)
 8000320:	2901      	cmp	r1, #1
{
 8000322:	b510      	push	{r4, lr}
  if(Cmd == AUDIO_MUTE_ON)
 8000324:	d103      	bne.n	800032e <cs43l22_SetMute+0xe>
 8000326:	f7ff ffe8 	bl	80002fa <cs43l22_SetMute.part.0>
}
 800032a:	2000      	movs	r0, #0
 800032c:	bd10      	pop	{r4, pc}
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_HEADPHONE_A_VOL, 0x00);
 800032e:	b2c4      	uxtb	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000330:	4620      	mov	r0, r4
 8000332:	2200      	movs	r2, #0
 8000334:	2122      	movs	r1, #34	; 0x22
 8000336:	f000 fa0b 	bl	8000750 <AUDIO_IO_Write>
 800033a:	4620      	mov	r0, r4
 800033c:	2200      	movs	r2, #0
 800033e:	2123      	movs	r1, #35	; 0x23
 8000340:	f000 fa06 	bl	8000750 <AUDIO_IO_Write>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000344:	4b03      	ldr	r3, [pc, #12]	; (8000354 <cs43l22_SetMute+0x34>)
  AUDIO_IO_Write(Addr, Reg, Value);
 8000346:	2104      	movs	r1, #4
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000348:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 800034a:	4620      	mov	r0, r4
 800034c:	f000 fa00 	bl	8000750 <AUDIO_IO_Write>
 8000350:	e7eb      	b.n	800032a <cs43l22_SetMute+0xa>
 8000352:	bf00      	nop
 8000354:	20000060 	.word	0x20000060

08000358 <cs43l22_Resume>:
{
 8000358:	b573      	push	{r0, r1, r4, r5, r6, lr}
  volatile uint32_t index = 0x00;
 800035a:	2500      	movs	r5, #0
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800035c:	4629      	mov	r1, r5
{
 800035e:	4604      	mov	r4, r0
  volatile uint32_t index = 0x00;
 8000360:	9501      	str	r5, [sp, #4]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000362:	f7ff ffdd 	bl	8000320 <cs43l22_SetMute>
  for(index = 0x00; index < 0xFF; index++);
 8000366:	9501      	str	r5, [sp, #4]
  counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000368:	4606      	mov	r6, r0
  for(index = 0x00; index < 0xFF; index++);
 800036a:	9b01      	ldr	r3, [sp, #4]
 800036c:	2bfe      	cmp	r3, #254	; 0xfe
 800036e:	d90e      	bls.n	800038e <cs43l22_Resume+0x36>
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_POWER_CTL2, OutputDev);
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <cs43l22_Resume+0x40>)
 8000372:	b2e4      	uxtb	r4, r4
 8000374:	781a      	ldrb	r2, [r3, #0]
  AUDIO_IO_Write(Addr, Reg, Value);
 8000376:	4620      	mov	r0, r4
 8000378:	2104      	movs	r1, #4
 800037a:	f000 f9e9 	bl	8000750 <AUDIO_IO_Write>
 800037e:	4620      	mov	r0, r4
 8000380:	229e      	movs	r2, #158	; 0x9e
 8000382:	2102      	movs	r1, #2
 8000384:	f000 f9e4 	bl	8000750 <AUDIO_IO_Write>
}
 8000388:	4630      	mov	r0, r6
 800038a:	b002      	add	sp, #8
 800038c:	bd70      	pop	{r4, r5, r6, pc}
  for(index = 0x00; index < 0xFF; index++);
 800038e:	9b01      	ldr	r3, [sp, #4]
 8000390:	3301      	adds	r3, #1
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	e7e9      	b.n	800036a <cs43l22_Resume+0x12>
 8000396:	bf00      	nop
 8000398:	20000060 	.word	0x20000060

0800039c <cs43l22_Pause>:
{  
 800039c:	b510      	push	{r4, lr}
 800039e:	4604      	mov	r4, r0
 80003a0:	f7ff ffab 	bl	80002fa <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 80003a4:	b2e0      	uxtb	r0, r4
 80003a6:	2201      	movs	r2, #1
 80003a8:	2102      	movs	r1, #2
 80003aa:	f000 f9d1 	bl	8000750 <AUDIO_IO_Write>
}
 80003ae:	2000      	movs	r0, #0
 80003b0:	bd10      	pop	{r4, pc}
	...

080003b4 <cs43l22_Stop>:
{
 80003b4:	b510      	push	{r4, lr}
 80003b6:	4604      	mov	r4, r0
  counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x04);
 80003b8:	b2e4      	uxtb	r4, r4
 80003ba:	f7ff ff9e 	bl	80002fa <cs43l22_SetMute.part.0>
  AUDIO_IO_Write(Addr, Reg, Value);
 80003be:	4620      	mov	r0, r4
 80003c0:	2204      	movs	r2, #4
 80003c2:	210e      	movs	r1, #14
 80003c4:	f000 f9c4 	bl	8000750 <AUDIO_IO_Write>
 80003c8:	4620      	mov	r0, r4
 80003ca:	229f      	movs	r2, #159	; 0x9f
 80003cc:	2102      	movs	r1, #2
 80003ce:	f000 f9bf 	bl	8000750 <AUDIO_IO_Write>
  Is_cs43l22_Stop = 1;
 80003d2:	4b02      	ldr	r3, [pc, #8]	; (80003dc <cs43l22_Stop+0x28>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	701a      	strb	r2, [r3, #0]
}
 80003d8:	2000      	movs	r0, #0
 80003da:	bd10      	pop	{r4, pc}
 80003dc:	20000000 	.word	0x20000000

080003e0 <cs43l22_Play>:
{
 80003e0:	b570      	push	{r4, r5, r6, lr}
  if(Is_cs43l22_Stop == 1)
 80003e2:	4d0d      	ldr	r5, [pc, #52]	; (8000418 <cs43l22_Play+0x38>)
 80003e4:	782b      	ldrb	r3, [r5, #0]
 80003e6:	2b01      	cmp	r3, #1
{
 80003e8:	4604      	mov	r4, r0
  if(Is_cs43l22_Stop == 1)
 80003ea:	d113      	bne.n	8000414 <cs43l22_Play+0x34>
    counter += CODEC_IO_Write(DeviceAddr, CS43L22_REG_MISC_CTL, 0x06);
 80003ec:	b2c6      	uxtb	r6, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 80003ee:	2206      	movs	r2, #6
 80003f0:	210e      	movs	r1, #14
 80003f2:	4630      	mov	r0, r6
 80003f4:	f000 f9ac 	bl	8000750 <AUDIO_IO_Write>
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80003f8:	2100      	movs	r1, #0
 80003fa:	4620      	mov	r0, r4
 80003fc:	f7ff ff90 	bl	8000320 <cs43l22_SetMute>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000400:	229e      	movs	r2, #158	; 0x9e
    counter += cs43l22_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8000402:	4604      	mov	r4, r0
  AUDIO_IO_Write(Addr, Reg, Value);
 8000404:	2102      	movs	r1, #2
 8000406:	4630      	mov	r0, r6
 8000408:	f000 f9a2 	bl	8000750 <AUDIO_IO_Write>
    Is_cs43l22_Stop = 0;
 800040c:	2300      	movs	r3, #0
 800040e:	702b      	strb	r3, [r5, #0]
}
 8000410:	4620      	mov	r0, r4
 8000412:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t counter = 0;
 8000414:	2400      	movs	r4, #0
  return counter;  
 8000416:	e7fb      	b.n	8000410 <cs43l22_Play+0x30>
 8000418:	20000000 	.word	0x20000000

0800041c <cs43l22_SetOutputMode>:
  switch (Output) 
 800041c:	3901      	subs	r1, #1
{
 800041e:	b510      	push	{r4, lr}
 8000420:	b2c0      	uxtb	r0, r0
 8000422:	4c10      	ldr	r4, [pc, #64]	; (8000464 <cs43l22_SetOutputMode+0x48>)
  switch (Output) 
 8000424:	2903      	cmp	r1, #3
 8000426:	d817      	bhi.n	8000458 <cs43l22_SetOutputMode+0x3c>
 8000428:	e8df f001 	tbb	[pc, r1]
 800042c:	16100a02 	.word	0x16100a02
  AUDIO_IO_Write(Addr, Reg, Value);
 8000430:	22fa      	movs	r2, #250	; 0xfa
 8000432:	2104      	movs	r1, #4
 8000434:	f000 f98c 	bl	8000750 <AUDIO_IO_Write>
      OutputDev = 0xFA;
 8000438:	23fa      	movs	r3, #250	; 0xfa
      OutputDev = 0x05;
 800043a:	7023      	strb	r3, [r4, #0]
}
 800043c:	2000      	movs	r0, #0
 800043e:	bd10      	pop	{r4, pc}
  AUDIO_IO_Write(Addr, Reg, Value);
 8000440:	22af      	movs	r2, #175	; 0xaf
 8000442:	2104      	movs	r1, #4
 8000444:	f000 f984 	bl	8000750 <AUDIO_IO_Write>
      OutputDev = 0xAF;
 8000448:	23af      	movs	r3, #175	; 0xaf
 800044a:	e7f6      	b.n	800043a <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 800044c:	22aa      	movs	r2, #170	; 0xaa
 800044e:	2104      	movs	r1, #4
 8000450:	f000 f97e 	bl	8000750 <AUDIO_IO_Write>
      OutputDev = 0xAA;
 8000454:	23aa      	movs	r3, #170	; 0xaa
 8000456:	e7f0      	b.n	800043a <cs43l22_SetOutputMode+0x1e>
  AUDIO_IO_Write(Addr, Reg, Value);
 8000458:	2205      	movs	r2, #5
 800045a:	2104      	movs	r1, #4
 800045c:	f000 f978 	bl	8000750 <AUDIO_IO_Write>
      OutputDev = 0x05;
 8000460:	2305      	movs	r3, #5
 8000462:	e7ea      	b.n	800043a <cs43l22_SetOutputMode+0x1e>
 8000464:	20000060 	.word	0x20000060

08000468 <I2C1_Init>:
/**
  * @brief Discovery I2C1 Bus initialization
  * @retval None
  */
static void I2C1_Init(void)
{
 8000468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (HAL_I2C_GetState(&I2c1Handle) == HAL_I2C_STATE_RESET)
 800046c:	4d38      	ldr	r5, [pc, #224]	; (8000550 <I2C1_Init+0xe8>)
{
 800046e:	b0ac      	sub	sp, #176	; 0xb0
  if (HAL_I2C_GetState(&I2c1Handle) == HAL_I2C_STATE_RESET)
 8000470:	4628      	mov	r0, r5
 8000472:	f001 f9cb 	bl	800180c <HAL_I2C_GetState>
 8000476:	4606      	mov	r6, r0
 8000478:	2800      	cmp	r0, #0
 800047a:	d166      	bne.n	800054a <I2C1_Init+0xe2>
{
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  /* IOSV bit MUST be set to access GPIO port G[2:15] */
  __HAL_RCC_PWR_CLK_ENABLE();
 800047c:	4c35      	ldr	r4, [pc, #212]	; (8000554 <I2C1_Init+0xec>)
    I2c1Handle.Init.Timing           = DISCOVERY_I2C1_TIMING;
 800047e:	4b36      	ldr	r3, [pc, #216]	; (8000558 <I2C1_Init+0xf0>)
 8000480:	606b      	str	r3, [r5, #4]
    I2c1Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000482:	2701      	movs	r7, #1
    I2c1Handle.Init.OwnAddress1      = 0;
 8000484:	60a8      	str	r0, [r5, #8]
    I2c1Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000486:	60ef      	str	r7, [r5, #12]
    I2c1Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8000488:	6128      	str	r0, [r5, #16]
    I2c1Handle.Init.OwnAddress2      = 0;
 800048a:	6168      	str	r0, [r5, #20]
    I2c1Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800048c:	61e8      	str	r0, [r5, #28]
    I2c1Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800048e:	6228      	str	r0, [r5, #32]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000490:	6da3      	ldr	r3, [r4, #88]	; 0x58
    I2c1Handle.Instance              = DISCOVERY_I2C1;
 8000492:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8000560 <I2C1_Init+0xf8>
 8000496:	f8c5 8000 	str.w	r8, [r5]
  __HAL_RCC_PWR_CLK_ENABLE();
 800049a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800049e:	65a3      	str	r3, [r4, #88]	; 0x58
 80004a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	9301      	str	r3, [sp, #4]
 80004a8:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_EnableVddIO2();
 80004aa:	f001 f9bb 	bl	8001824 <HAL_PWREx_EnableVddIO2>

  if (hi2c->Instance == DISCOVERY_I2C1)
 80004ae:	682b      	ldr	r3, [r5, #0]
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d147      	bne.n	8000544 <I2C1_Init+0xdc>
  {
    /*##-1- Configure the Discovery I2C clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004b4:	2340      	movs	r3, #64	; 0x40
 80004b6:	930a      	str	r3, [sp, #40]	; 0x28
    RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 80004b8:	a80a      	add	r0, sp, #40	; 0x28
    RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80004ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004be:	931e      	str	r3, [sp, #120]	; 0x78
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 80004c0:	f001 fe7e 	bl	80021c0 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 80004c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStructure.Pin       = DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN;
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
    GPIO_InitStructure.Pull      = GPIO_PULLUP;
    GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStructure.Alternate = DISCOVERY_I2C1_SCL_SDA_AF;
    HAL_GPIO_Init(DISCOVERY_I2C1_SCL_GPIO_PORT, &GPIO_InitStructure);
 80004c6:	4825      	ldr	r0, [pc, #148]	; (800055c <I2C1_Init+0xf4>)
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 80004c8:	f043 0302 	orr.w	r3, r3, #2
 80004cc:	64e3      	str	r3, [r4, #76]	; 0x4c
 80004ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80004d0:	f003 0302 	and.w	r3, r3, #2
 80004d4:	9302      	str	r3, [sp, #8]
 80004d6:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 80004d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80004da:	f043 0302 	orr.w	r3, r3, #2
 80004de:	64e3      	str	r3, [r4, #76]	; 0x4c
 80004e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    GPIO_InitStructure.Pull      = GPIO_PULLUP;
 80004e2:	9707      	str	r7, [sp, #28]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 80004e4:	f003 0302 	and.w	r3, r3, #2
 80004e8:	9303      	str	r3, [sp, #12]
 80004ea:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStructure.Pin       = DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN;
 80004ec:	23c0      	movs	r3, #192	; 0xc0
 80004ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 80004f0:	2312      	movs	r3, #18
 80004f2:	9306      	str	r3, [sp, #24]
    GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80004f4:	2303      	movs	r3, #3
 80004f6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(DISCOVERY_I2C1_SCL_GPIO_PORT, &GPIO_InitStructure);
 80004f8:	a905      	add	r1, sp, #20
    GPIO_InitStructure.Alternate = DISCOVERY_I2C1_SCL_SDA_AF;
 80004fa:	2304      	movs	r3, #4
 80004fc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2C1_SCL_GPIO_PORT, &GPIO_InitStructure);
 80004fe:	f000 fcdd 	bl	8000ebc <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C1 peripheral #######################################*/
    /* Enable Discovery I2C1 clock */
    DISCOVERY_I2C1_CLK_ENABLE();
 8000502:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000508:	65a3      	str	r3, [r4, #88]	; 0x58
 800050a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800050c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000510:	9304      	str	r3, [sp, #16]
 8000512:	9b04      	ldr	r3, [sp, #16]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C1_FORCE_RESET();
 8000514:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000516:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800051a:	63a3      	str	r3, [r4, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 800051c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800051e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000522:	63a3      	str	r3, [r4, #56]	; 0x38

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_EV_IRQn, 0x00, 0);
 8000524:	4632      	mov	r2, r6
 8000526:	4631      	mov	r1, r6
 8000528:	201f      	movs	r0, #31
 800052a:	f000 f9c1 	bl	80008b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_EV_IRQn);
 800052e:	201f      	movs	r0, #31
 8000530:	f000 f9f2 	bl	8000918 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C1 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C1_ER_IRQn, 0x00, 0);
 8000534:	2020      	movs	r0, #32
 8000536:	4632      	mov	r2, r6
 8000538:	4631      	mov	r1, r6
 800053a:	f000 f9b9 	bl	80008b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C1_ER_IRQn);
 800053e:	2020      	movs	r0, #32
 8000540:	f000 f9ea 	bl	8000918 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2c1Handle);
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <I2C1_Init+0xe8>)
 8000546:	f000 ff7f 	bl	8001448 <HAL_I2C_Init>
}
 800054a:	b02c      	add	sp, #176	; 0xb0
 800054c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000550:	20000064 	.word	0x20000064
 8000554:	40021000 	.word	0x40021000
 8000558:	90112626 	.word	0x90112626
 800055c:	48000400 	.word	0x48000400
 8000560:	40005400 	.word	0x40005400

08000564 <BSP_LED_Init>:
{
 8000564:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000566:	4604      	mov	r4, r0
{
 8000568:	b088      	sub	sp, #32
  LEDx_GPIO_CLK_ENABLE(Led);
 800056a:	bb10      	cbnz	r0, 80005b2 <BSP_LED_Init+0x4e>
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <BSP_LED_Init+0x68>)
 800056e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000570:	f042 0202 	orr.w	r2, r2, #2
 8000574:	64da      	str	r2, [r3, #76]	; 0x4c
 8000576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000578:	f003 0302 	and.w	r3, r3, #2
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStructure.Pin = LED_PIN[Led];
 8000580:	4b13      	ldr	r3, [pc, #76]	; (80005d0 <BSP_LED_Init+0x6c>)
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStructure);
 8000582:	4d14      	ldr	r5, [pc, #80]	; (80005d4 <BSP_LED_Init+0x70>)
  GPIO_InitStructure.Pin = LED_PIN[Led];
 8000584:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8000588:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800058e:	2600      	movs	r6, #0
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000590:	2303      	movs	r3, #3
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStructure);
 8000592:	a903      	add	r1, sp, #12
 8000594:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000598:	9306      	str	r3, [sp, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800059a:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStructure);
 800059c:	f000 fc8e 	bl	8000ebc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], GPIO_InitStructure.Pin, GPIO_PIN_RESET);
 80005a0:	4632      	mov	r2, r6
 80005a2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80005a6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 80005aa:	f000 fdfd 	bl	80011a8 <HAL_GPIO_WritePin>
}
 80005ae:	b008      	add	sp, #32
 80005b0:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 80005b2:	2801      	cmp	r0, #1
 80005b4:	d1e4      	bne.n	8000580 <BSP_LED_Init+0x1c>
 80005b6:	4b05      	ldr	r3, [pc, #20]	; (80005cc <BSP_LED_Init+0x68>)
 80005b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ba:	f042 0210 	orr.w	r2, r2, #16
 80005be:	64da      	str	r2, [r3, #76]	; 0x4c
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0310 	and.w	r3, r3, #16
 80005c6:	9302      	str	r3, [sp, #8]
 80005c8:	9b02      	ldr	r3, [sp, #8]
 80005ca:	e7d9      	b.n	8000580 <BSP_LED_Init+0x1c>
 80005cc:	40021000 	.word	0x40021000
 80005d0:	0800326c 	.word	0x0800326c
 80005d4:	20000038 	.word	0x20000038

080005d8 <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <BSP_LED_Toggle+0x10>)
 80005da:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80005de:	4b03      	ldr	r3, [pc, #12]	; (80005ec <BSP_LED_Toggle+0x14>)
 80005e0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80005e4:	f000 bde5 	b.w	80011b2 <HAL_GPIO_TogglePin>
 80005e8:	0800326c 	.word	0x0800326c
 80005ec:	20000038 	.word	0x20000038

080005f0 <AUDIO_IO_Init>:
void AUDIO_IO_Init(void)
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable Reset GPIO Clock */
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <AUDIO_IO_Init+0x5c>)
{
 80005f2:	b5f0      	push	{r4, r5, r6, r7, lr}
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80005f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  /* Audio reset pin configuration */
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 80005f6:	4c16      	ldr	r4, [pc, #88]	; (8000650 <AUDIO_IO_Init+0x60>)
  AUDIO_RESET_GPIO_CLK_ENABLE();
 80005f8:	f042 0210 	orr.w	r2, r2, #16
 80005fc:	64da      	str	r2, [r3, #76]	; 0x4c
 80005fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8000600:	b087      	sub	sp, #28
  AUDIO_RESET_GPIO_CLK_ENABLE();
 8000602:	f003 0310 	and.w	r3, r3, #16
 8000606:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000608:	2508      	movs	r5, #8
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 800060a:	a901      	add	r1, sp, #4
 800060c:	4620      	mov	r0, r4
  AUDIO_RESET_GPIO_CLK_ENABLE();
 800060e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = AUDIO_RESET_PIN;
 8000610:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000612:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8000616:	2700      	movs	r7, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000618:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800061c:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(AUDIO_RESET_GPIO, &GPIO_InitStruct);
 800061e:	f000 fc4d 	bl	8000ebc <HAL_GPIO_Init>

  /* I2C bus init */
  I2C1_Init();
 8000622:	f7ff ff21 	bl	8000468 <I2C1_Init>

  /* Power Down the codec */
  CODEC_AUDIO_POWER_OFF();
 8000626:	463a      	mov	r2, r7
 8000628:	4629      	mov	r1, r5
 800062a:	4620      	mov	r0, r4
 800062c:	f000 fdbc 	bl	80011a8 <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8000630:	2005      	movs	r0, #5
 8000632:	f000 f91d 	bl	8000870 <HAL_Delay>

  /* Power on the codec */
  CODEC_AUDIO_POWER_ON();
 8000636:	4632      	mov	r2, r6
 8000638:	4629      	mov	r1, r5
 800063a:	4620      	mov	r0, r4
 800063c:	f000 fdb4 	bl	80011a8 <HAL_GPIO_WritePin>

  /* wait for a delay to insure registers erasing */
  HAL_Delay(5);
 8000640:	2005      	movs	r0, #5
 8000642:	f000 f915 	bl	8000870 <HAL_Delay>
}
 8000646:	b007      	add	sp, #28
 8000648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000
 8000650:	48001000 	.word	0x48001000

08000654 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)                       /* TO DO */
{
 8000654:	b530      	push	{r4, r5, lr}

  /***********************************************************************/
  /* In case of battery-supplied powered, there is no audio codec-based
     features available. Set audio codec I/O default setting */
  /***********************************************************************/
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000656:	4c39      	ldr	r4, [pc, #228]	; (800073c <AUDIO_IO_DeInit+0xe8>)
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP  ;
  GPIO_InitStruct.Pin       = (GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000658:	4839      	ldr	r0, [pc, #228]	; (8000740 <AUDIO_IO_DeInit+0xec>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800065a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  if (HAL_I2C_GetState(&I2c1Handle) != HAL_I2C_STATE_RESET)
 800065c:	4d39      	ldr	r5, [pc, #228]	; (8000744 <AUDIO_IO_DeInit+0xf0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800065e:	f043 0310 	orr.w	r3, r3, #16
 8000662:	64e3      	str	r3, [r4, #76]	; 0x4c
 8000664:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
{
 8000666:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000668:	f003 0310 	and.w	r3, r3, #16
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_PP  ;
 8000670:	2301      	movs	r3, #1
 8000672:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin       = (GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 8000674:	237c      	movs	r3, #124	; 0x7c
 8000676:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull      = GPIO_PULLDOWN;
 8000678:	2302      	movs	r3, #2
 800067a:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800067c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800067e:	2303      	movs	r3, #3
 8000680:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000682:	f000 fc1b 	bl	8000ebc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2104      	movs	r1, #4
 800068a:	482d      	ldr	r0, [pc, #180]	; (8000740 <AUDIO_IO_DeInit+0xec>)
 800068c:	f000 fd8c 	bl	80011a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2108      	movs	r1, #8
 8000694:	482a      	ldr	r0, [pc, #168]	; (8000740 <AUDIO_IO_DeInit+0xec>)
 8000696:	f000 fd87 	bl	80011a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2110      	movs	r1, #16
 800069e:	4828      	ldr	r0, [pc, #160]	; (8000740 <AUDIO_IO_DeInit+0xec>)
 80006a0:	f000 fd82 	bl	80011a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2120      	movs	r1, #32
 80006a8:	4825      	ldr	r0, [pc, #148]	; (8000740 <AUDIO_IO_DeInit+0xec>)
 80006aa:	f000 fd7d 	bl	80011a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 80006ae:	4824      	ldr	r0, [pc, #144]	; (8000740 <AUDIO_IO_DeInit+0xec>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	2140      	movs	r1, #64	; 0x40
 80006b4:	f000 fd78 	bl	80011a8 <HAL_GPIO_WritePin>
  if (HAL_I2C_GetState(&I2c1Handle) != HAL_I2C_STATE_RESET)
 80006b8:	4628      	mov	r0, r5
 80006ba:	f001 f8a7 	bl	800180c <HAL_I2C_GetState>
 80006be:	2800      	cmp	r0, #0
 80006c0:	d039      	beq.n	8000736 <AUDIO_IO_DeInit+0xe2>
    HAL_I2C_DeInit(&I2c1Handle);
 80006c2:	4628      	mov	r0, r5
 80006c4:	f000 ff12 	bl	80014ec <HAL_I2C_DeInit>
  if (hi2c->Instance == DISCOVERY_I2C1)
 80006c8:	682a      	ldr	r2, [r5, #0]
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <AUDIO_IO_DeInit+0xf4>)
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d132      	bne.n	8000736 <AUDIO_IO_DeInit+0xe2>
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 80006d0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    HAL_GPIO_DeInit(DISCOVERY_I2C1_SCL_GPIO_PORT, (DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN));
 80006d2:	481e      	ldr	r0, [pc, #120]	; (800074c <AUDIO_IO_DeInit+0xf8>)
    DISCOVERY_I2C1_SDA_GPIO_CLK_ENABLE();
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80006da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80006dc:	f003 0302 	and.w	r3, r3, #2
 80006e0:	9302      	str	r3, [sp, #8]
 80006e2:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 80006e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80006e6:	f043 0302 	orr.w	r3, r3, #2
 80006ea:	64e3      	str	r3, [r4, #76]	; 0x4c
 80006ec:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80006ee:	f003 0302 	and.w	r3, r3, #2
    HAL_GPIO_DeInit(DISCOVERY_I2C1_SCL_GPIO_PORT, (DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN));
 80006f2:	21c0      	movs	r1, #192	; 0xc0
    DISCOVERY_I2C1_SCL_GPIO_CLK_ENABLE();
 80006f4:	9303      	str	r3, [sp, #12]
 80006f6:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_DeInit(DISCOVERY_I2C1_SCL_GPIO_PORT, (DISCOVERY_I2C1_SCL_PIN | DISCOVERY_I2C1_SDA_PIN));
 80006f8:	f000 fcbc 	bl	8001074 <HAL_GPIO_DeInit>
    DISCOVERY_I2C1_FORCE_RESET();
 80006fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80006fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000702:	63a3      	str	r3, [r4, #56]	; 0x38
    DISCOVERY_I2C1_RELEASE_RESET();
 8000704:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000706:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800070a:	63a3      	str	r3, [r4, #56]	; 0x38
    DISCOVERY_I2C1_CLK_DISABLE();
 800070c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800070e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000712:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_EV_IRQn);
 8000714:	201f      	movs	r0, #31
 8000716:	f000 f90b 	bl	8000930 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C1_ER_IRQn);
 800071a:	2020      	movs	r0, #32
 800071c:	f000 f908 	bl	8000930 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	65a3      	str	r3, [r4, #88]	; 0x58
 8000728:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800072a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072e:	9304      	str	r3, [sp, #16]
 8000730:	9b04      	ldr	r3, [sp, #16]
    HAL_PWREx_DisableVddIO2();
 8000732:	f001 f87f 	bl	8001834 <HAL_PWREx_DisableVddIO2>

  /* I2C bus Deinit */
  I2C1_DeInit();
}
 8000736:	b00b      	add	sp, #44	; 0x2c
 8000738:	bd30      	pop	{r4, r5, pc}
 800073a:	bf00      	nop
 800073c:	40021000 	.word	0x40021000
 8000740:	48001000 	.word	0x48001000
 8000744:	20000064 	.word	0x20000064
 8000748:	40005400 	.word	0x40005400
 800074c:	48000400 	.word	0x48000400

08000750 <AUDIO_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000750:	b510      	push	{r4, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <AUDIO_IO_Write+0x30>)
{
 8000758:	f804 2d01 	strb.w	r2, [r4, #-1]!
  status = HAL_I2C_Mem_Write(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	9302      	str	r3, [sp, #8]
 8000760:	2301      	movs	r3, #1
 8000762:	460a      	mov	r2, r1
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	4601      	mov	r1, r0
 8000768:	9400      	str	r4, [sp, #0]
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <AUDIO_IO_Write+0x34>)
 800076c:	f000 fed7 	bl	800151e <HAL_I2C_Mem_Write>
  if (status != HAL_OK)
 8000770:	b120      	cbz	r0, 800077c <AUDIO_IO_Write+0x2c>
  HAL_I2C_DeInit(&I2c1Handle);
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <AUDIO_IO_Write+0x34>)
 8000774:	f000 feba 	bl	80014ec <HAL_I2C_DeInit>
  I2C1_Init();
 8000778:	f7ff fe76 	bl	8000468 <I2C1_Init>
  I2C1_WriteBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1);
}
 800077c:	b006      	add	sp, #24
 800077e:	bd10      	pop	{r4, pc}
 8000780:	20000034 	.word	0x20000034
 8000784:	20000064 	.word	0x20000064

08000788 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t AUDIO_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8000788:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t Read_Value = 0;
 800078a:	aa06      	add	r2, sp, #24
 800078c:	2300      	movs	r3, #0
 800078e:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(&I2c1Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c1Timeout);
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <AUDIO_IO_Read+0x38>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	9302      	str	r3, [sp, #8]
 8000798:	2301      	movs	r3, #1
 800079a:	e88d 000c 	stmia.w	sp, {r2, r3}
 800079e:	460a      	mov	r2, r1
 80007a0:	4601      	mov	r1, r0
 80007a2:	4808      	ldr	r0, [pc, #32]	; (80007c4 <AUDIO_IO_Read+0x3c>)
 80007a4:	f000 ff74 	bl	8001690 <HAL_I2C_Mem_Read>
  if (status != HAL_OK)
 80007a8:	b120      	cbz	r0, 80007b4 <AUDIO_IO_Read+0x2c>
  HAL_I2C_DeInit(&I2c1Handle);
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <AUDIO_IO_Read+0x3c>)
 80007ac:	f000 fe9e 	bl	80014ec <HAL_I2C_DeInit>
  I2C1_Init();
 80007b0:	f7ff fe5a 	bl	8000468 <I2C1_Init>

  I2C1_ReadBuffer((uint16_t) Addr, (uint16_t) Reg, I2C_MEMADD_SIZE_8BIT, &Read_Value, 1);

  return Read_Value;
}
 80007b4:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80007b8:	b007      	add	sp, #28
 80007ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80007be:	bf00      	nop
 80007c0:	20000034 	.word	0x20000034
 80007c4:	20000064 	.word	0x20000064

080007c8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c8:	490f      	ldr	r1, [pc, #60]	; (8000808 <SystemInit+0x40>)
 80007ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80007ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80007d6:	4b0d      	ldr	r3, [pc, #52]	; (800080c <SystemInit+0x44>)
 80007d8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007da:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80007dc:	f042 0201 	orr.w	r2, r2, #1
 80007e0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80007e2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80007ea:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80007ee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80007f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80007fc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007fe:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000800:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000804:	608b      	str	r3, [r1, #8]
 8000806:	4770      	bx	lr
 8000808:	e000ed00 	.word	0xe000ed00
 800080c:	40021000 	.word	0x40021000

08000810 <HAL_MspInit>:
 8000810:	4770      	bx	lr
	...

08000814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_InitTick+0x24>)
{
 8000818:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 800081a:	6818      	ldr	r0, [r3, #0]
 800081c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000820:	fbb0 f0f3 	udiv	r0, r0, r3
 8000824:	f000 f892 	bl	800094c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000828:	2200      	movs	r2, #0
 800082a:	4621      	mov	r1, r4
 800082c:	f04f 30ff 	mov.w	r0, #4294967295
 8000830:	f000 f83e 	bl	80008b0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000834:	2000      	movs	r0, #0
 8000836:	bd10      	pop	{r4, pc}
 8000838:	20000040 	.word	0x20000040

0800083c <HAL_Init>:
{
 800083c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800083e:	2003      	movs	r0, #3
 8000840:	f000 f824 	bl	800088c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000844:	200f      	movs	r0, #15
 8000846:	f7ff ffe5 	bl	8000814 <HAL_InitTick>
  HAL_MspInit();
 800084a:	f7ff ffe1 	bl	8000810 <HAL_MspInit>
}
 800084e:	2000      	movs	r0, #0
 8000850:	bd08      	pop	{r3, pc}
	...

08000854 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000854:	4a02      	ldr	r2, [pc, #8]	; (8000860 <HAL_IncTick+0xc>)
 8000856:	6813      	ldr	r3, [r2, #0]
 8000858:	3301      	adds	r3, #1
 800085a:	6013      	str	r3, [r2, #0]
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	200000e0 	.word	0x200000e0

08000864 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000864:	4b01      	ldr	r3, [pc, #4]	; (800086c <HAL_GetTick+0x8>)
 8000866:	6818      	ldr	r0, [r3, #0]
}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	200000e0 	.word	0x200000e0

08000870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000870:	b538      	push	{r3, r4, r5, lr}
 8000872:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000874:	f7ff fff6 	bl	8000864 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000878:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800087a:	4605      	mov	r5, r0
  {
    wait++;
 800087c:	bf18      	it	ne
 800087e:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000880:	f7ff fff0 	bl	8000864 <HAL_GetTick>
 8000884:	1b40      	subs	r0, r0, r5
 8000886:	4284      	cmp	r4, r0
 8000888:	d8fa      	bhi.n	8000880 <HAL_Delay+0x10>
  {
  }
}
 800088a:	bd38      	pop	{r3, r4, r5, pc}

0800088c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 800088e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000890:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000894:	041b      	lsls	r3, r3, #16
 8000896:	0c1b      	lsrs	r3, r3, #16
 8000898:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800089c:	0200      	lsls	r0, r0, #8
 800089e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80008a6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80008a8:	60d3      	str	r3, [r2, #12]
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b2:	b530      	push	{r4, r5, lr}
 80008b4:	68dc      	ldr	r4, [r3, #12]
 80008b6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c0:	2b04      	cmp	r3, #4
 80008c2:	bf28      	it	cs
 80008c4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c8:	f04f 0501 	mov.w	r5, #1
 80008cc:	fa05 f303 	lsl.w	r3, r5, r3
 80008d0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d4:	bf8c      	ite	hi
 80008d6:	3c03      	subhi	r4, #3
 80008d8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008da:	4019      	ands	r1, r3
 80008dc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008de:	fa05 f404 	lsl.w	r4, r5, r4
 80008e2:	3c01      	subs	r4, #1
 80008e4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80008e6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	ea42 0201 	orr.w	r2, r2, r1
 80008ec:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f0:	bfaf      	iteee	ge
 80008f2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f6:	f000 000f 	andlt.w	r0, r0, #15
 80008fa:	4b06      	ldrlt	r3, [pc, #24]	; (8000914 <HAL_NVIC_SetPriority+0x64>)
 80008fc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fe:	bfa5      	ittet	ge
 8000900:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000904:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000906:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000908:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800090c:	bd30      	pop	{r4, r5, pc}
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00
 8000914:	e000ed14 	.word	0xe000ed14

08000918 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000918:	0942      	lsrs	r2, r0, #5
 800091a:	2301      	movs	r3, #1
 800091c:	f000 001f 	and.w	r0, r0, #31
 8000920:	fa03 f000 	lsl.w	r0, r3, r0
 8000924:	4b01      	ldr	r3, [pc, #4]	; (800092c <HAL_NVIC_EnableIRQ+0x14>)
 8000926:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800092a:	4770      	bx	lr
 800092c:	e000e100 	.word	0xe000e100

08000930 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000930:	0943      	lsrs	r3, r0, #5
 8000932:	2201      	movs	r2, #1
 8000934:	f000 001f 	and.w	r0, r0, #31
 8000938:	fa02 f000 	lsl.w	r0, r2, r0
 800093c:	3320      	adds	r3, #32
 800093e:	4a02      	ldr	r2, [pc, #8]	; (8000948 <HAL_NVIC_DisableIRQ+0x18>)
 8000940:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000e100 	.word	0xe000e100

0800094c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800094c:	3801      	subs	r0, #1
 800094e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000952:	d20a      	bcs.n	800096a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000956:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000958:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095a:	21f0      	movs	r1, #240	; 0xf0
 800095c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000960:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000962:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000964:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800096a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000e010 	.word	0xe000e010
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <DFSDM_RegConvStart>:
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8000978:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800097a:	6803      	ldr	r3, [r0, #0]
 800097c:	f890 104c 	ldrb.w	r1, [r0, #76]	; 0x4c
 8000980:	b93a      	cbnz	r2, 8000992 <DFSDM_RegConvStart+0x1a>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000988:	601a      	str	r2, [r3, #0]
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800098a:	2901      	cmp	r1, #1
 800098c:	d11c      	bne.n	80009c8 <DFSDM_RegConvStart+0x50>
 800098e:	2302      	movs	r3, #2
 8000990:	e01b      	b.n	80009ca <DFSDM_RegConvStart+0x52>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	f022 0201 	bic.w	r2, r2, #1
 8000998:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80009a0:	601a      	str	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80009a2:	681a      	ldr	r2, [r3, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80009a4:	2903      	cmp	r1, #3
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80009a6:	f042 0201 	orr.w	r2, r2, #1
 80009aa:	601a      	str	r2, [r3, #0]
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80009ac:	d1ed      	bne.n	800098a <DFSDM_RegConvStart+0x12>
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80009ae:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80009b0:	b91a      	cbnz	r2, 80009ba <DFSDM_RegConvStart+0x42>
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	f042 0202 	orr.w	r2, r2, #2
 80009b8:	601a      	str	r2, [r3, #0]
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 80009ba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80009be:	2b01      	cmp	r3, #1
 80009c0:	bf0c      	ite	eq
 80009c2:	6c43      	ldreq	r3, [r0, #68]	; 0x44
 80009c4:	2301      	movne	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80009c6:	6483      	str	r3, [r0, #72]	; 0x48
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80009c8:	2304      	movs	r3, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80009ca:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 80009ce:	4770      	bx	lr

080009d0 <DFSDM_GetChannelFromInstance>:
  if(Instance == DFSDM1_Channel0)
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <DFSDM_GetChannelFromInstance+0x54>)
 80009d2:	4298      	cmp	r0, r3
 80009d4:	d017      	beq.n	8000a06 <DFSDM_GetChannelFromInstance+0x36>
  else if(Instance == DFSDM1_Channel1)
 80009d6:	3320      	adds	r3, #32
 80009d8:	4298      	cmp	r0, r3
 80009da:	d016      	beq.n	8000a0a <DFSDM_GetChannelFromInstance+0x3a>
  else if(Instance == DFSDM1_Channel2)
 80009dc:	3320      	adds	r3, #32
 80009de:	4298      	cmp	r0, r3
 80009e0:	d015      	beq.n	8000a0e <DFSDM_GetChannelFromInstance+0x3e>
  else if(Instance == DFSDM1_Channel3)
 80009e2:	3320      	adds	r3, #32
 80009e4:	4298      	cmp	r0, r3
 80009e6:	d014      	beq.n	8000a12 <DFSDM_GetChannelFromInstance+0x42>
  else if(Instance == DFSDM1_Channel4)
 80009e8:	3320      	adds	r3, #32
 80009ea:	4298      	cmp	r0, r3
 80009ec:	d013      	beq.n	8000a16 <DFSDM_GetChannelFromInstance+0x46>
  else if(Instance == DFSDM1_Channel5)
 80009ee:	3320      	adds	r3, #32
 80009f0:	4298      	cmp	r0, r3
 80009f2:	d012      	beq.n	8000a1a <DFSDM_GetChannelFromInstance+0x4a>
  else if(Instance == DFSDM1_Channel6)
 80009f4:	3320      	adds	r3, #32
 80009f6:	4298      	cmp	r0, r3
 80009f8:	d011      	beq.n	8000a1e <DFSDM_GetChannelFromInstance+0x4e>
    channel = 7;
 80009fa:	3320      	adds	r3, #32
 80009fc:	4298      	cmp	r0, r3
 80009fe:	bf14      	ite	ne
 8000a00:	20ff      	movne	r0, #255	; 0xff
 8000a02:	2007      	moveq	r0, #7
 8000a04:	4770      	bx	lr
    channel = 0;
 8000a06:	2000      	movs	r0, #0
 8000a08:	4770      	bx	lr
    channel = 1;
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	4770      	bx	lr
    channel = 2;
 8000a0e:	2002      	movs	r0, #2
 8000a10:	4770      	bx	lr
    channel = 3;
 8000a12:	2003      	movs	r0, #3
 8000a14:	4770      	bx	lr
    channel = 4;
 8000a16:	2004      	movs	r0, #4
 8000a18:	4770      	bx	lr
    channel = 5;
 8000a1a:	2005      	movs	r0, #5
 8000a1c:	4770      	bx	lr
    channel = 6;
 8000a1e:	2006      	movs	r0, #6
}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40016000 	.word	0x40016000

08000a28 <HAL_DFSDM_ChannelInit>:
{
 8000a28:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_channel == NULL)
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	2800      	cmp	r0, #0
 8000a2e:	d067      	beq.n	8000b00 <HAL_DFSDM_ChannelInit+0xd8>
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000a30:	6800      	ldr	r0, [r0, #0]
 8000a32:	4d34      	ldr	r5, [pc, #208]	; (8000b04 <HAL_DFSDM_ChannelInit+0xdc>)
 8000a34:	f7ff ffcc 	bl	80009d0 <DFSDM_GetChannelFromInstance>
 8000a38:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d15f      	bne.n	8000b00 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000a40:	4620      	mov	r0, r4
 8000a42:	f002 fadf 	bl	8003004 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8000a46:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <HAL_DFSDM_ChannelInit+0xe0>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	3201      	adds	r2, #1
 8000a4c:	601a      	str	r2, [r3, #0]
  if(v_dfsdm1ChannelCounter == 1)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d119      	bne.n	8000a88 <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000a54:	4b2d      	ldr	r3, [pc, #180]	; (8000b0c <HAL_DFSDM_ChannelInit+0xe4>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8000a5c:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	68a1      	ldr	r1, [r4, #8]
 8000a62:	430a      	orrs	r2, r1
 8000a64:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8000a6c:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000a6e:	7922      	ldrb	r2, [r4, #4]
 8000a70:	2a01      	cmp	r2, #1
 8000a72:	d105      	bne.n	8000a80 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) << 
 8000a74:	68e1      	ldr	r1, [r4, #12]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	3901      	subs	r1, #1
 8000a7a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a7e:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000a86:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8000a88:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8000a8a:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8000a8c:	6803      	ldr	r3, [r0, #0]
 8000a8e:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8000a92:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8000a94:	6923      	ldr	r3, [r4, #16]
 8000a96:	6802      	ldr	r2, [r0, #0]
 8000a98:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8000a9a:	69a1      	ldr	r1, [r4, #24]
 8000a9c:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000aa2:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8000aa4:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000aa6:	f023 030f 	bic.w	r3, r3, #15
 8000aaa:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8000aac:	69e3      	ldr	r3, [r4, #28]
 8000aae:	6802      	ldr	r2, [r0, #0]
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000ab6:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8000ab8:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000aba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000abc:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8000ac0:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8000ac2:	6883      	ldr	r3, [r0, #8]
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000ac4:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000acc:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000ace:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000ad0:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8000ad8:	6843      	ldr	r3, [r0, #4]
 8000ada:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ade:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ae0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000ae4:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000ae6:	6803      	ldr	r3, [r0, #0]
 8000ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aec:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000aee:	2301      	movs	r3, #1
 8000af0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000af4:	f7ff ff6c 	bl	80009d0 <DFSDM_GetChannelFromInstance>
 8000af8:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8000afc:	2000      	movs	r0, #0
 8000afe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b00:	2001      	movs	r0, #1
}
 8000b02:	bd38      	pop	{r3, r4, r5, pc}
 8000b04:	200000b0 	.word	0x200000b0
 8000b08:	200000d0 	.word	0x200000d0
 8000b0c:	40016000 	.word	0x40016000

08000b10 <HAL_DFSDM_FilterInit>:
{
 8000b10:	b538      	push	{r3, r4, r5, lr}
  if(hdfsdm_filter == NULL)
 8000b12:	4604      	mov	r4, r0
 8000b14:	2800      	cmp	r0, #0
 8000b16:	d069      	beq.n	8000bec <HAL_DFSDM_FilterInit+0xdc>
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) && 
 8000b18:	6802      	ldr	r2, [r0, #0]
 8000b1a:	4b35      	ldr	r3, [pc, #212]	; (8000bf0 <HAL_DFSDM_FilterInit+0xe0>)
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d105      	bne.n	8000b2c <HAL_DFSDM_FilterInit+0x1c>
 8000b20:	6840      	ldr	r0, [r0, #4]
 8000b22:	2801      	cmp	r0, #1
 8000b24:	d063      	beq.n	8000bee <HAL_DFSDM_FilterInit+0xde>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) || 
 8000b26:	68e0      	ldr	r0, [r4, #12]
 8000b28:	2801      	cmp	r0, #1
 8000b2a:	d060      	beq.n	8000bee <HAL_DFSDM_FilterInit+0xde>
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8000b2c:	2300      	movs	r3, #0
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8000b2e:	2201      	movs	r2, #1
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8000b30:	6323      	str	r3, [r4, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8000b32:	6462      	str	r2, [r4, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8000b34:	64a2      	str	r2, [r4, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8000b36:	6523      	str	r3, [r4, #80]	; 0x50
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8000b38:	4620      	mov	r0, r4
 8000b3a:	f002 faa9 	bl	8003090 <HAL_DFSDM_FilterMspInit>
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8000b3e:	6823      	ldr	r3, [r4, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8000b40:	7c20      	ldrb	r0, [r4, #16]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8000b48:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8000b4a:	7a22      	ldrb	r2, [r4, #8]
 8000b4c:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	bf0c      	ite	eq
 8000b52:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8000b56:	f022 5200 	bicne.w	r2, r2, #536870912	; 0x20000000
 8000b5a:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8000b5c:	7a62      	ldrb	r2, [r4, #9]
 8000b5e:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	bf0c      	ite	eq
 8000b64:	f442 1200 	orreq.w	r2, r2, #2097152	; 0x200000
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8000b68:	f422 1200 	bicne.w	r2, r2, #2097152	; 0x200000
 8000b6c:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8000b6e:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8000b70:	68e5      	ldr	r5, [r4, #12]
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8000b72:	f422 42ce 	bic.w	r2, r2, #26368	; 0x6700
 8000b76:	f022 0208 	bic.w	r2, r2, #8
 8000b7a:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8000b7c:	2d02      	cmp	r5, #2
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8000b7e:	bf01      	itttt	eq
 8000b80:	681a      	ldreq	r2, [r3, #0]
 8000b82:	6961      	ldreq	r1, [r4, #20]
 8000b84:	430a      	orreq	r2, r1
 8000b86:	601a      	streq	r2, [r3, #0]
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8000b88:	681a      	ldr	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8000b8a:	2801      	cmp	r0, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8000b8c:	bf0c      	ite	eq
 8000b8e:	f042 0210 	orreq.w	r2, r2, #16
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8000b92:	f022 0210 	bicne.w	r2, r2, #16
 8000b96:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8000b98:	7c62      	ldrb	r2, [r4, #17]
 8000b9a:	2a01      	cmp	r2, #1
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	bf0c      	ite	eq
 8000ba0:	f042 0220 	orreq.w	r2, r2, #32
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8000ba4:	f022 0220 	bicne.w	r2, r2, #32
 8000ba8:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8000baa:	695a      	ldr	r2, [r3, #20]
 8000bac:	f022 4263 	bic.w	r2, r2, #3808428032	; 0xe3000000
 8000bb0:	f002 22ff 	and.w	r2, r2, #4278255360	; 0xff00ff00
 8000bb4:	615a      	str	r2, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8000bb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000bb8:	6959      	ldr	r1, [r3, #20]
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8000bba:	3a01      	subs	r2, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	69e1      	ldr	r1, [r4, #28]
 8000bc0:	430a      	orrs	r2, r1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8000bc2:	6a21      	ldr	r1, [r4, #32]
 8000bc4:	3901      	subs	r1, #1
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000bc6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bca:	615a      	str	r2, [r3, #20]
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8000bcc:	6862      	ldr	r2, [r4, #4]
 8000bce:	6362      	str	r2, [r4, #52]	; 0x34
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8000bd0:	69a2      	ldr	r2, [r4, #24]
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8000bd2:	63a5      	str	r5, [r4, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8000bd4:	63e2      	str	r2, [r4, #60]	; 0x3c
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8000bd6:	681a      	ldr	r2, [r3, #0]
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8000bd8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8000bdc:	f042 0201 	orr.w	r2, r2, #1
 8000be0:	601a      	str	r2, [r3, #0]
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8000be2:	2301      	movs	r3, #1
 8000be4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 8000be8:	2000      	movs	r0, #0
 8000bea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000bec:	2001      	movs	r0, #1
}
 8000bee:	bd38      	pop	{r3, r4, r5, pc}
 8000bf0:	40016100 	.word	0x40016100

08000bf4 <HAL_DFSDM_FilterConfigRegChannel>:
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8000bf4:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2bfd      	cmp	r3, #253	; 0xfd
{
 8000bfe:	b510      	push	{r4, lr}
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) && 
 8000c00:	d813      	bhi.n	8000c2a <HAL_DFSDM_FilterConfigRegChannel+0x36>
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8000c02:	6803      	ldr	r3, [r0, #0]
 8000c04:	681c      	ldr	r4, [r3, #0]
 8000c06:	f024 64e0 	bic.w	r4, r4, #117440512	; 0x7000000
 8000c0a:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000c0e:	601c      	str	r4, [r3, #0]
 8000c10:	0209      	lsls	r1, r1, #8
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8000c12:	681c      	ldr	r4, [r3, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8000c14:	2a01      	cmp	r2, #1
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8000c16:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8000c1a:	bf08      	it	eq
 8000c1c:	f441 2180 	orreq.w	r1, r1, #262144	; 0x40000
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8000c20:	4321      	orrs	r1, r4
 8000c22:	6019      	str	r1, [r3, #0]
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8000c24:	6302      	str	r2, [r0, #48]	; 0x30
  HAL_StatusTypeDef status = HAL_OK;
 8000c26:	2000      	movs	r0, #0
 8000c28:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000c2a:	2001      	movs	r0, #1
}
 8000c2c:	bd10      	pop	{r4, pc}
	...

08000c30 <HAL_DFSDM_FilterRegularStart_DMA>:
{
 8000c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c32:	4613      	mov	r3, r2
 8000c34:	4605      	mov	r5, r0
  if((pData == NULL) || (Length == 0))
 8000c36:	460a      	mov	r2, r1
 8000c38:	b351      	cbz	r1, 8000c90 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
 8000c3a:	b34b      	cbz	r3, 8000c90 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8000c3c:	6807      	ldr	r7, [r0, #0]
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	0289      	lsls	r1, r1, #10
 8000c42:	d525      	bpl.n	8000c90 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000c44:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8000c46:	b949      	cbnz	r1, 8000c5c <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
 8000c48:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000c4a:	b939      	cbnz	r1, 8000c5c <HAL_DFSDM_FilterRegularStart_DMA+0x2c>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8000c4c:	6a81      	ldr	r1, [r0, #40]	; 0x28
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000c4e:	69c8      	ldr	r0, [r1, #28]
 8000c50:	b908      	cbnz	r0, 8000c56 <HAL_DFSDM_FilterRegularStart_DMA+0x26>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d11c      	bne.n	8000c90 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000c56:	69c9      	ldr	r1, [r1, #28]
 8000c58:	2920      	cmp	r1, #32
 8000c5a:	d019      	beq.n	8000c90 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8000c5c:	f895 604c 	ldrb.w	r6, [r5, #76]	; 0x4c
 8000c60:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
 8000c64:	2e01      	cmp	r6, #1
 8000c66:	d113      	bne.n	8000c90 <HAL_DFSDM_FilterRegularStart_DMA+0x60>
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8000c68:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8000c6a:	490d      	ldr	r1, [pc, #52]	; (8000ca0 <HAL_DFSDM_FilterRegularStart_DMA+0x70>)
 8000c6c:	62c1      	str	r1, [r0, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8000c6e:	490d      	ldr	r1, [pc, #52]	; (8000ca4 <HAL_DFSDM_FilterRegularStart_DMA+0x74>)
 8000c70:	6341      	str	r1, [r0, #52]	; 0x34
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8000c72:	69c1      	ldr	r1, [r0, #28]
 8000c74:	4c0c      	ldr	r4, [pc, #48]	; (8000ca8 <HAL_DFSDM_FilterRegularStart_DMA+0x78>)
 8000c76:	2920      	cmp	r1, #32
 8000c78:	bf18      	it	ne
 8000c7a:	2400      	movne	r4, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8000c7c:	6304      	str	r4, [r0, #48]	; 0x30
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8000c7e:	f107 011c 	add.w	r1, r7, #28
 8000c82:	f000 f895 	bl	8000db0 <HAL_DMA_Start_IT>
 8000c86:	4604      	mov	r4, r0
 8000c88:	b120      	cbz	r0, 8000c94 <HAL_DFSDM_FilterRegularStart_DMA+0x64>
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8000c8a:	23ff      	movs	r3, #255	; 0xff
 8000c8c:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
    status = HAL_ERROR;
 8000c90:	2401      	movs	r4, #1
 8000c92:	e002      	b.n	8000c9a <HAL_DFSDM_FilterRegularStart_DMA+0x6a>
      DFSDM_RegConvStart(hdfsdm_filter);
 8000c94:	4628      	mov	r0, r5
 8000c96:	f7ff fe6f 	bl	8000978 <DFSDM_RegConvStart>
}
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	08000cad 	.word	0x08000cad
 8000ca4:	08000cc3 	.word	0x08000cc3
 8000ca8:	08000cb7 	.word	0x08000cb7

08000cac <DFSDM_DMARegularConvCplt>:
{
 8000cac:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8000cae:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000cb0:	f002 fa88 	bl	80031c4 <HAL_DFSDM_FilterRegConvCpltCallback>
 8000cb4:	bd08      	pop	{r3, pc}

08000cb6 <DFSDM_DMARegularHalfConvCplt>:
{
 8000cb6:	b508      	push	{r3, lr}
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8000cb8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000cba:	f002 fa7d 	bl	80031b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
 8000cbe:	bd08      	pop	{r3, pc}

08000cc0 <HAL_DFSDM_FilterErrorCallback>:
{
 8000cc0:	4770      	bx	lr

08000cc2 <DFSDM_DMAError>:
{
 8000cc2:	b508      	push	{r3, lr}
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8000cc4:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8000cca:	f7ff fff9 	bl	8000cc0 <HAL_DFSDM_FilterErrorCallback>
 8000cce:	bd08      	pop	{r3, pc}

08000cd0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cd0:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d05b      	beq.n	8000d8e <HAL_DMA_Init+0xbe>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000cd6:	6801      	ldr	r1, [r0, #0]
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <HAL_DMA_Init+0xc4>)
 8000cda:	4299      	cmp	r1, r3
 8000cdc:	f04f 0414 	mov.w	r4, #20
 8000ce0:	d841      	bhi.n	8000d66 <HAL_DMA_Init+0x96>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ce2:	4a2d      	ldr	r2, [pc, #180]	; (8000d98 <HAL_DMA_Init+0xc8>)
 8000ce4:	440a      	add	r2, r1
 8000ce6:	fbb2 f2f4 	udiv	r2, r2, r4
 8000cea:	0092      	lsls	r2, r2, #2
 8000cec:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000cee:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 8000cf2:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cfa:	6884      	ldr	r4, [r0, #8]
 8000cfc:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cfe:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8000d00:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000d02:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d04:	432b      	orrs	r3, r5
 8000d06:	6945      	ldr	r5, [r0, #20]
 8000d08:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d0a:	6985      	ldr	r5, [r0, #24]
 8000d0c:	432b      	orrs	r3, r5
 8000d0e:	69c5      	ldr	r5, [r0, #28]
 8000d10:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d12:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d14:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8000d18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d1c:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8000d1e:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000d20:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8000d24:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000d26:	d011      	beq.n	8000d4c <HAL_DMA_Init+0x7c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <HAL_DMA_Init+0xcc>)
 8000d2a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000d2c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f04f 030f 	mov.w	r3, #15
 8000d34:	d11f      	bne.n	8000d76 <HAL_DMA_Init+0xa6>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8000d36:	491a      	ldr	r1, [pc, #104]	; (8000da0 <HAL_DMA_Init+0xd0>)
 8000d38:	680a      	ldr	r2, [r1, #0]
 8000d3a:	40a3      	lsls	r3, r4
 8000d3c:	ea22 0303 	bic.w	r3, r2, r3
 8000d40:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
 8000d42:	6842      	ldr	r2, [r0, #4]
 8000d44:	680b      	ldr	r3, [r1, #0]
 8000d46:	40a2      	lsls	r2, r4
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	600a      	str	r2, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000d4c:	2300      	movs	r3, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000d4e:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d50:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8000d52:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8000d54:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8000d56:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8000d58:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State  = HAL_DMA_STATE_READY;
 8000d5a:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d5e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

  return HAL_OK;
 8000d62:	4618      	mov	r0, r3
 8000d64:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_DMA_Init+0xd4>)
 8000d68:	440b      	add	r3, r1
 8000d6a:	fbb3 f3f4 	udiv	r3, r3, r4
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d72:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <HAL_DMA_Init+0xd8>)
 8000d74:	e7bd      	b.n	8000cf2 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8000d76:	490d      	ldr	r1, [pc, #52]	; (8000dac <HAL_DMA_Init+0xdc>)
 8000d78:	680a      	ldr	r2, [r1, #0]
 8000d7a:	40a3      	lsls	r3, r4
 8000d7c:	ea22 0303 	bic.w	r3, r2, r3
 8000d80:	600b      	str	r3, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
 8000d82:	6843      	ldr	r3, [r0, #4]
 8000d84:	680a      	ldr	r2, [r1, #0]
 8000d86:	40a3      	lsls	r3, r4
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]
 8000d8c:	e7de      	b.n	8000d4c <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8000d8e:	2001      	movs	r0, #1
}
 8000d90:	bd30      	pop	{r4, r5, pc}
 8000d92:	bf00      	nop
 8000d94:	40020407 	.word	0x40020407
 8000d98:	bffdfff8 	.word	0xbffdfff8
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	400200a8 	.word	0x400200a8
 8000da4:	bffdfbf8 	.word	0xbffdfbf8
 8000da8:	40020400 	.word	0x40020400
 8000dac:	400204a8 	.word	0x400204a8

08000db0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000db0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000db2:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8000db6:	2c01      	cmp	r4, #1
 8000db8:	d036      	beq.n	8000e28 <HAL_DMA_Start_IT+0x78>

  if(HAL_DMA_STATE_READY == hdma->State)
 8000dba:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8000dbe:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000dc0:	b2ed      	uxtb	r5, r5
 8000dc2:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8000dc4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8000dc8:	f04f 0600 	mov.w	r6, #0
 8000dcc:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8000dd0:	d128      	bne.n	8000e24 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000dd2:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000dd6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dd8:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000dda:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ddc:	6c47      	ldr	r7, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8000dde:	f026 0601 	bic.w	r6, r6, #1
 8000de2:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000de4:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000de6:	40bd      	lsls	r5, r7
 8000de8:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000dea:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000dec:	6883      	ldr	r3, [r0, #8]
 8000dee:	6805      	ldr	r5, [r0, #0]
 8000df0:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8000df2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000df4:	bf0b      	itete	eq
 8000df6:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000df8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000dfa:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000dfc:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000dfe:	b14b      	cbz	r3, 8000e14 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e00:	6823      	ldr	r3, [r4, #0]
 8000e02:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e06:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000e08:	682b      	ldr	r3, [r5, #0]
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e10:	2000      	movs	r0, #0
 8000e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e14:	6823      	ldr	r3, [r4, #0]
 8000e16:	f023 0304 	bic.w	r3, r3, #4
 8000e1a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e1c:	6823      	ldr	r3, [r4, #0]
 8000e1e:	f043 030a 	orr.w	r3, r3, #10
 8000e22:	e7f0      	b.n	8000e06 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma);
 8000e24:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8000e28:	2002      	movs	r0, #2
}
 8000e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e2c <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e2c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e2e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8000e30:	6803      	ldr	r3, [r0, #0]
{
 8000e32:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000e34:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000e36:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000e38:	2404      	movs	r4, #4
 8000e3a:	4094      	lsls	r4, r2
 8000e3c:	4226      	tst	r6, r4
 8000e3e:	d00e      	beq.n	8000e5e <HAL_DMA_IRQHandler+0x32>
 8000e40:	f015 0f04 	tst.w	r5, #4
 8000e44:	d00b      	beq.n	8000e5e <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e4a:	bf5e      	ittt	pl
 8000e4c:	681a      	ldrpl	r2, [r3, #0]
 8000e4e:	f022 0204 	bicpl.w	r2, r2, #4
 8000e52:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8000e54:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 8000e56:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8000e58:	b373      	cbz	r3, 8000eb8 <HAL_DMA_IRQHandler+0x8c>
}
 8000e5a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000e5c:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000e5e:	2402      	movs	r4, #2
 8000e60:	4094      	lsls	r4, r2
 8000e62:	4226      	tst	r6, r4
 8000e64:	d012      	beq.n	8000e8c <HAL_DMA_IRQHandler+0x60>
 8000e66:	f015 0f02 	tst.w	r5, #2
 8000e6a:	d00f      	beq.n	8000e8c <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	0695      	lsls	r5, r2, #26
 8000e70:	d406      	bmi.n	8000e80 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	f022 020a 	bic.w	r2, r2, #10
 8000e78:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000e80:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8000e82:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000e84:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8000e88:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000e8a:	e7e5      	b.n	8000e58 <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e8c:	2408      	movs	r4, #8
 8000e8e:	4094      	lsls	r4, r2
 8000e90:	4234      	tst	r4, r6
 8000e92:	d011      	beq.n	8000eb8 <HAL_DMA_IRQHandler+0x8c>
 8000e94:	072c      	lsls	r4, r5, #28
 8000e96:	d50f      	bpl.n	8000eb8 <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e98:	681c      	ldr	r4, [r3, #0]
 8000e9a:	f024 040e 	bic.w	r4, r4, #14
 8000e9e:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	fa03 f202 	lsl.w	r2, r3, r2
 8000ea6:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ea8:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000eaa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8000eb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000eb6:	e7cf      	b.n	8000e58 <HAL_DMA_IRQHandler+0x2c>
}
 8000eb8:	bc70      	pop	{r4, r5, r6}
 8000eba:	4770      	bx	lr

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ec0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ec2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001070 <HAL_GPIO_Init+0x1b4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ec8:	4c67      	ldr	r4, [pc, #412]	; (8001068 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000eca:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00;
 8000ecc:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ece:	9a01      	ldr	r2, [sp, #4]
 8000ed0:	40da      	lsrs	r2, r3
 8000ed2:	d102      	bne.n	8000eda <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  }
}
 8000ed4:	b005      	add	sp, #20
 8000ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000eda:	2601      	movs	r6, #1
    if(iocurrent)
 8000edc:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ede:	409e      	lsls	r6, r3
    if(iocurrent)
 8000ee0:	ea12 0e06 	ands.w	lr, r2, r6
 8000ee4:	f000 80b1 	beq.w	800104a <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee8:	684a      	ldr	r2, [r1, #4]
 8000eea:	f022 0710 	bic.w	r7, r2, #16
 8000eee:	2f02      	cmp	r7, #2
 8000ef0:	d116      	bne.n	8000f20 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3];
 8000ef2:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000ef6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000efa:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000efe:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f02:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000f06:	f04f 0c0f 	mov.w	ip, #15
 8000f0a:	fa0c fc0a 	lsl.w	ip, ip, sl
 8000f0e:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f12:	690d      	ldr	r5, [r1, #16]
 8000f14:	fa05 f50a 	lsl.w	r5, r5, sl
 8000f18:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000f1c:	f8c9 5020 	str.w	r5, [r9, #32]
 8000f20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000f24:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000f26:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000f2a:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f2e:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f30:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 8000f34:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f38:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f3e:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f42:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000f44:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f48:	d811      	bhi.n	8000f6e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000f4a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8000f4c:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f50:	68cf      	ldr	r7, [r1, #12]
 8000f52:	fa07 f70c 	lsl.w	r7, r7, ip
 8000f56:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000f5a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f5c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f5e:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f62:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000f66:	409f      	lsls	r7, r3
 8000f68:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000f6c:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f6e:	f1ba 0f03 	cmp.w	sl, #3
 8000f72:	d107      	bne.n	8000f84 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000f74:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f76:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000f7a:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000f7e:	409f      	lsls	r7, r3
 8000f80:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000f82:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000f84:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000f86:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f88:	688e      	ldr	r6, [r1, #8]
 8000f8a:	fa06 f60c 	lsl.w	r6, r6, ip
 8000f8e:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000f90:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f92:	00d5      	lsls	r5, r2, #3
 8000f94:	d559      	bpl.n	800104a <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000f9a:	f045 0501 	orr.w	r5, r5, #1
 8000f9e:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000fa2:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000fa6:	f023 0603 	bic.w	r6, r3, #3
 8000faa:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000fae:	f005 0501 	and.w	r5, r5, #1
 8000fb2:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000fb6:	9503      	str	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fb8:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbc:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000fbe:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fc0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000fc4:	270f      	movs	r7, #15
 8000fc6:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000fca:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fce:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000fd2:	d03c      	beq.n	800104e <HAL_GPIO_Init+0x192>
 8000fd4:	4d25      	ldr	r5, [pc, #148]	; (800106c <HAL_GPIO_Init+0x1b0>)
 8000fd6:	42a8      	cmp	r0, r5
 8000fd8:	d03b      	beq.n	8001052 <HAL_GPIO_Init+0x196>
 8000fda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fde:	42a8      	cmp	r0, r5
 8000fe0:	d039      	beq.n	8001056 <HAL_GPIO_Init+0x19a>
 8000fe2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fe6:	42a8      	cmp	r0, r5
 8000fe8:	d037      	beq.n	800105a <HAL_GPIO_Init+0x19e>
 8000fea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fee:	42a8      	cmp	r0, r5
 8000ff0:	d035      	beq.n	800105e <HAL_GPIO_Init+0x1a2>
 8000ff2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ff6:	42a8      	cmp	r0, r5
 8000ff8:	d033      	beq.n	8001062 <HAL_GPIO_Init+0x1a6>
 8000ffa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ffe:	42a8      	cmp	r0, r5
 8001000:	bf14      	ite	ne
 8001002:	2507      	movne	r5, #7
 8001004:	2506      	moveq	r5, #6
 8001006:	fa05 f50c 	lsl.w	r5, r5, ip
 800100a:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 800100c:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 800100e:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001010:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001014:	03d7      	lsls	r7, r2, #15
        temp &= ~((uint32_t)iocurrent);
 8001016:	bf54      	ite	pl
 8001018:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800101a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 800101e:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001020:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001022:	0397      	lsls	r7, r2, #14
        temp &= ~((uint32_t)iocurrent);
 8001024:	bf54      	ite	pl
 8001026:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001028:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 800102c:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 800102e:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001030:	02d7      	lsls	r7, r2, #11
        temp &= ~((uint32_t)iocurrent);
 8001032:	bf54      	ite	pl
 8001034:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001036:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 800103a:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 800103c:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800103e:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8001040:	bf54      	ite	pl
 8001042:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001044:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001048:	60e5      	str	r5, [r4, #12]
    position++;
 800104a:	3301      	adds	r3, #1
 800104c:	e73f      	b.n	8000ece <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800104e:	2500      	movs	r5, #0
 8001050:	e7d9      	b.n	8001006 <HAL_GPIO_Init+0x14a>
 8001052:	2501      	movs	r5, #1
 8001054:	e7d7      	b.n	8001006 <HAL_GPIO_Init+0x14a>
 8001056:	2502      	movs	r5, #2
 8001058:	e7d5      	b.n	8001006 <HAL_GPIO_Init+0x14a>
 800105a:	2503      	movs	r5, #3
 800105c:	e7d3      	b.n	8001006 <HAL_GPIO_Init+0x14a>
 800105e:	2504      	movs	r5, #4
 8001060:	e7d1      	b.n	8001006 <HAL_GPIO_Init+0x14a>
 8001062:	2505      	movs	r5, #5
 8001064:	e7cf      	b.n	8001006 <HAL_GPIO_Init+0x14a>
 8001066:	bf00      	nop
 8001068:	40010400 	.word	0x40010400
 800106c:	48000400 	.word	0x48000400
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 8001078:	4c47      	ldr	r4, [pc, #284]	; (8001198 <HAL_GPIO_DeInit+0x124>)
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800107a:	f8df a124 	ldr.w	sl, [pc, #292]	; 80011a0 <HAL_GPIO_DeInit+0x12c>
 800107e:	f8df b124 	ldr.w	fp, [pc, #292]	; 80011a4 <HAL_GPIO_DeInit+0x130>
  uint32_t position = 0x00;
 8001082:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1U << position);
 8001084:	f04f 0801 	mov.w	r8, #1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 8001088:	f04f 0903 	mov.w	r9, #3
  while ((GPIO_Pin >> position) != RESET)
 800108c:	fa31 f203 	lsrs.w	r2, r1, r3
 8001090:	d102      	bne.n	8001098 <HAL_GPIO_DeInit+0x24>
      }
    }
    
    position++;
  }
}
 8001092:	b003      	add	sp, #12
 8001094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8001098:	fa08 f603 	lsl.w	r6, r8, r3
    if (iocurrent)
 800109c:	ea11 0206 	ands.w	r2, r1, r6
 80010a0:	9201      	str	r2, [sp, #4]
 80010a2:	d06a      	beq.n	800117a <HAL_GPIO_DeInit+0x106>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 80010a4:	6807      	ldr	r7, [r0, #0]
 80010a6:	005a      	lsls	r2, r3, #1
 80010a8:	fa09 f202 	lsl.w	r2, r9, r2
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010ac:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2));
 80010b0:	4317      	orrs	r7, r2
 80010b2:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80010b6:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010b8:	f8dc 7020 	ldr.w	r7, [ip, #32]
 80010bc:	f003 0e07 	and.w	lr, r3, #7
 80010c0:	463d      	mov	r5, r7
 80010c2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80010c6:	270f      	movs	r7, #15
 80010c8:	fa07 fe0e 	lsl.w	lr, r7, lr
 80010cc:	ea25 0e0e 	bic.w	lr, r5, lr
 80010d0:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80010d4:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80010d8:	43d2      	mvns	r2, r2
 80010da:	ea0e 0e02 	and.w	lr, lr, r2
 80010de:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80010e2:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80010e6:	43f6      	mvns	r6, r6
 80010e8:	ea0e 0e06 	and.w	lr, lr, r6
 80010ec:	f8c0 e004 	str.w	lr, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80010f0:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80010f4:	ea02 020e 	and.w	r2, r2, lr
 80010f8:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80010fa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80010fc:	4016      	ands	r6, r2
 80010fe:	62c6      	str	r6, [r0, #44]	; 0x2c
 8001100:	f023 0603 	bic.w	r6, r3, #3
 8001104:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001108:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800110c:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2];
 8001110:	68b2      	ldr	r2, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001112:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001116:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800111a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800111e:	ea02 0c07 	and.w	ip, r2, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8001122:	d02c      	beq.n	800117e <HAL_GPIO_DeInit+0x10a>
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_GPIO_DeInit+0x128>)
 8001126:	4290      	cmp	r0, r2
 8001128:	d02b      	beq.n	8001182 <HAL_GPIO_DeInit+0x10e>
 800112a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800112e:	4290      	cmp	r0, r2
 8001130:	d029      	beq.n	8001186 <HAL_GPIO_DeInit+0x112>
 8001132:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001136:	4290      	cmp	r0, r2
 8001138:	d027      	beq.n	800118a <HAL_GPIO_DeInit+0x116>
 800113a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800113e:	4290      	cmp	r0, r2
 8001140:	d025      	beq.n	800118e <HAL_GPIO_DeInit+0x11a>
 8001142:	4550      	cmp	r0, sl
 8001144:	d025      	beq.n	8001192 <HAL_GPIO_DeInit+0x11e>
 8001146:	4558      	cmp	r0, fp
 8001148:	bf0c      	ite	eq
 800114a:	2206      	moveq	r2, #6
 800114c:	2207      	movne	r2, #7
 800114e:	fa02 f20e 	lsl.w	r2, r2, lr
 8001152:	4594      	cmp	ip, r2
 8001154:	d111      	bne.n	800117a <HAL_GPIO_DeInit+0x106>
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8001156:	68b2      	ldr	r2, [r6, #8]
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 8001158:	9d01      	ldr	r5, [sp, #4]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800115a:	ea22 0707 	bic.w	r7, r2, r7
 800115e:	60b7      	str	r7, [r6, #8]
        EXTI->IMR1 &= ~((uint32_t)iocurrent);
 8001160:	6822      	ldr	r2, [r4, #0]
 8001162:	43ed      	mvns	r5, r5
 8001164:	402a      	ands	r2, r5
 8001166:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~((uint32_t)iocurrent);
 8001168:	6862      	ldr	r2, [r4, #4]
 800116a:	402a      	ands	r2, r5
 800116c:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~((uint32_t)iocurrent);
 800116e:	68a2      	ldr	r2, [r4, #8]
 8001170:	402a      	ands	r2, r5
 8001172:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~((uint32_t)iocurrent);
 8001174:	68e2      	ldr	r2, [r4, #12]
 8001176:	4015      	ands	r5, r2
 8001178:	60e5      	str	r5, [r4, #12]
    position++;
 800117a:	3301      	adds	r3, #1
 800117c:	e786      	b.n	800108c <HAL_GPIO_DeInit+0x18>
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 800117e:	2200      	movs	r2, #0
 8001180:	e7e5      	b.n	800114e <HAL_GPIO_DeInit+0xda>
 8001182:	2201      	movs	r2, #1
 8001184:	e7e3      	b.n	800114e <HAL_GPIO_DeInit+0xda>
 8001186:	2202      	movs	r2, #2
 8001188:	e7e1      	b.n	800114e <HAL_GPIO_DeInit+0xda>
 800118a:	2203      	movs	r2, #3
 800118c:	e7df      	b.n	800114e <HAL_GPIO_DeInit+0xda>
 800118e:	2204      	movs	r2, #4
 8001190:	e7dd      	b.n	800114e <HAL_GPIO_DeInit+0xda>
 8001192:	2205      	movs	r2, #5
 8001194:	e7db      	b.n	800114e <HAL_GPIO_DeInit+0xda>
 8001196:	bf00      	nop
 8001198:	40010400 	.word	0x40010400
 800119c:	48000400 	.word	0x48000400
 80011a0:	48001400 	.word	0x48001400
 80011a4:	48001800 	.word	0x48001800

080011a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a8:	b10a      	cbz	r2, 80011ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011aa:	6181      	str	r1, [r0, #24]
 80011ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ae:	6281      	str	r1, [r0, #40]	; 0x28
 80011b0:	4770      	bx	lr

080011b2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80011b2:	6943      	ldr	r3, [r0, #20]
 80011b4:	4059      	eors	r1, r3
 80011b6:	6141      	str	r1, [r0, #20]
 80011b8:	4770      	bx	lr

080011ba <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80011ba:	6803      	ldr	r3, [r0, #0]
 80011bc:	699a      	ldr	r2, [r3, #24]
 80011be:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80011c0:	bf44      	itt	mi
 80011c2:	2200      	movmi	r2, #0
 80011c4:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80011c6:	699a      	ldr	r2, [r3, #24]
 80011c8:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80011ca:	bf5e      	ittt	pl
 80011cc:	699a      	ldrpl	r2, [r3, #24]
 80011ce:	f042 0201 	orrpl.w	r2, r2, #1
 80011d2:	619a      	strpl	r2, [r3, #24]
 80011d4:	4770      	bx	lr

080011d6 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80011d6:	b530      	push	{r4, r5, lr}
 80011d8:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80011da:	6805      	ldr	r5, [r0, #0]
 80011dc:	4323      	orrs	r3, r4
 80011de:	0d64      	lsrs	r4, r4, #21
 80011e0:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80011e4:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80011e8:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80011ec:	6868      	ldr	r0, [r5, #4]
 80011ee:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80011f2:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80011f6:	4319      	orrs	r1, r3
 80011f8:	f044 0403 	orr.w	r4, r4, #3
 80011fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001200:	ea20 0404 	bic.w	r4, r0, r4
 8001204:	4321      	orrs	r1, r4
 8001206:	6069      	str	r1, [r5, #4]
 8001208:	bd30      	pop	{r4, r5, pc}

0800120a <I2C_WaitOnFlagUntilTimeout>:
{
 800120a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800120e:	9f06      	ldr	r7, [sp, #24]
 8001210:	4604      	mov	r4, r0
 8001212:	4688      	mov	r8, r1
 8001214:	4616      	mov	r6, r2
 8001216:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001218:	6822      	ldr	r2, [r4, #0]
 800121a:	6993      	ldr	r3, [r2, #24]
 800121c:	ea38 0303 	bics.w	r3, r8, r3
 8001220:	bf0c      	ite	eq
 8001222:	2301      	moveq	r3, #1
 8001224:	2300      	movne	r3, #0
 8001226:	42b3      	cmp	r3, r6
 8001228:	d002      	beq.n	8001230 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800122a:	2000      	movs	r0, #0
}
 800122c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001230:	1c6b      	adds	r3, r5, #1
 8001232:	d0f2      	beq.n	800121a <I2C_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001234:	b955      	cbnz	r5, 800124c <I2C_WaitOnFlagUntilTimeout+0x42>
        hi2c->State = HAL_I2C_STATE_READY;
 8001236:	2320      	movs	r3, #32
 8001238:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800123c:	2300      	movs	r3, #0
 800123e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001242:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8001246:	2003      	movs	r0, #3
 8001248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800124c:	f7ff fb0a 	bl	8000864 <HAL_GetTick>
 8001250:	1bc0      	subs	r0, r0, r7
 8001252:	4285      	cmp	r5, r0
 8001254:	d2e0      	bcs.n	8001218 <I2C_WaitOnFlagUntilTimeout+0xe>
 8001256:	e7ee      	b.n	8001236 <I2C_WaitOnFlagUntilTimeout+0x2c>

08001258 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001258:	6803      	ldr	r3, [r0, #0]
{
 800125a:	b570      	push	{r4, r5, r6, lr}
 800125c:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800125e:	6998      	ldr	r0, [r3, #24]
 8001260:	f010 0010 	ands.w	r0, r0, #16
{
 8001264:	460d      	mov	r5, r1
 8001266:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001268:	d112      	bne.n	8001290 <I2C_IsAcknowledgeFailed+0x38>
 800126a:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 800126c:	1c69      	adds	r1, r5, #1
 800126e:	d010      	beq.n	8001292 <I2C_IsAcknowledgeFailed+0x3a>
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001270:	b94d      	cbnz	r5, 8001286 <I2C_IsAcknowledgeFailed+0x2e>
          hi2c->State = HAL_I2C_STATE_READY;
 8001272:	2320      	movs	r3, #32
 8001274:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001278:	2300      	movs	r3, #0
 800127a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800127e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_TIMEOUT;
 8001282:	2003      	movs	r0, #3
 8001284:	bd70      	pop	{r4, r5, r6, pc}
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001286:	f7ff faed 	bl	8000864 <HAL_GetTick>
 800128a:	1b80      	subs	r0, r0, r6
 800128c:	4285      	cmp	r5, r0
 800128e:	d3f0      	bcc.n	8001272 <I2C_IsAcknowledgeFailed+0x1a>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	6999      	ldr	r1, [r3, #24]
 8001294:	068a      	lsls	r2, r1, #26
 8001296:	d5e9      	bpl.n	800126c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001298:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800129a:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800129c:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800129e:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80012a0:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80012a2:	f7ff ff8a 	bl	80011ba <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80012a6:	6822      	ldr	r2, [r4, #0]
 80012a8:	6853      	ldr	r3, [r2, #4]
 80012aa:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80012ae:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80012b2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80012b6:	f023 0301 	bic.w	r3, r3, #1
 80012ba:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80012bc:	2304      	movs	r3, #4
 80012be:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012c0:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80012c2:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80012c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    return HAL_ERROR;
 80012ce:	2001      	movs	r0, #1
}
 80012d0:	bd70      	pop	{r4, r5, r6, pc}

080012d2 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80012d2:	b570      	push	{r4, r5, r6, lr}
 80012d4:	4604      	mov	r4, r0
 80012d6:	460d      	mov	r5, r1
 80012d8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	079b      	lsls	r3, r3, #30
 80012e0:	d501      	bpl.n	80012e6 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80012e2:	2000      	movs	r0, #0
 80012e4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80012e6:	4632      	mov	r2, r6
 80012e8:	4629      	mov	r1, r5
 80012ea:	4620      	mov	r0, r4
 80012ec:	f7ff ffb4 	bl	8001258 <I2C_IsAcknowledgeFailed>
 80012f0:	b9b0      	cbnz	r0, 8001320 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80012f2:	1c6a      	adds	r2, r5, #1
 80012f4:	d0f1      	beq.n	80012da <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80012f6:	b96d      	cbnz	r5, 8001314 <I2C_WaitOnTXISFlagUntilTimeout+0x42>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80012fa:	f043 0320 	orr.w	r3, r3, #32
 80012fe:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001300:	2320      	movs	r3, #32
 8001302:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001306:	2300      	movs	r3, #0
 8001308:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800130c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001310:	2003      	movs	r0, #3
 8001312:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001314:	f7ff faa6 	bl	8000864 <HAL_GetTick>
 8001318:	1b80      	subs	r0, r0, r6
 800131a:	4285      	cmp	r5, r0
 800131c:	d2dd      	bcs.n	80012da <I2C_WaitOnTXISFlagUntilTimeout+0x8>
 800131e:	e7eb      	b.n	80012f8 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
      return HAL_ERROR;
 8001320:	2001      	movs	r0, #1
}
 8001322:	bd70      	pop	{r4, r5, r6, pc}

08001324 <I2C_RequestMemoryWrite>:
{
 8001324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001326:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001328:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <I2C_RequestMemoryWrite+0x68>)
 800132c:	9300      	str	r3, [sp, #0]
{
 800132e:	4604      	mov	r4, r0
 8001330:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001332:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001336:	b2fa      	uxtb	r2, r7
 8001338:	f7ff ff4d 	bl	80011d6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800133c:	4632      	mov	r2, r6
 800133e:	9908      	ldr	r1, [sp, #32]
 8001340:	4620      	mov	r0, r4
 8001342:	f7ff ffc6 	bl	80012d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001346:	b128      	cbz	r0, 8001354 <I2C_RequestMemoryWrite+0x30>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001348:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800134a:	2b04      	cmp	r3, #4
 800134c:	d110      	bne.n	8001370 <I2C_RequestMemoryWrite+0x4c>
      return HAL_ERROR;
 800134e:	2001      	movs	r0, #1
}
 8001350:	b003      	add	sp, #12
 8001352:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001354:	2f01      	cmp	r7, #1
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	d10c      	bne.n	8001374 <I2C_RequestMemoryWrite+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800135a:	b2ed      	uxtb	r5, r5
 800135c:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800135e:	9b08      	ldr	r3, [sp, #32]
 8001360:	9600      	str	r6, [sp, #0]
 8001362:	2200      	movs	r2, #0
 8001364:	2180      	movs	r1, #128	; 0x80
 8001366:	4620      	mov	r0, r4
 8001368:	f7ff ff4f 	bl	800120a <I2C_WaitOnFlagUntilTimeout>
 800136c:	2800      	cmp	r0, #0
 800136e:	d0ef      	beq.n	8001350 <I2C_RequestMemoryWrite+0x2c>
      return HAL_TIMEOUT;
 8001370:	2003      	movs	r0, #3
 8001372:	e7ed      	b.n	8001350 <I2C_RequestMemoryWrite+0x2c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001374:	0a2a      	lsrs	r2, r5, #8
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001378:	9908      	ldr	r1, [sp, #32]
 800137a:	4632      	mov	r2, r6
 800137c:	4620      	mov	r0, r4
 800137e:	f7ff ffa8 	bl	80012d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001382:	2800      	cmp	r0, #0
 8001384:	d1e0      	bne.n	8001348 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001386:	6823      	ldr	r3, [r4, #0]
 8001388:	e7e7      	b.n	800135a <I2C_RequestMemoryWrite+0x36>
 800138a:	bf00      	nop
 800138c:	80002000 	.word	0x80002000

08001390 <I2C_RequestMemoryRead>:
{
 8001390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001392:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001394:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <I2C_RequestMemoryRead+0x64>)
 8001398:	9300      	str	r3, [sp, #0]
{
 800139a:	4604      	mov	r4, r0
 800139c:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800139e:	2300      	movs	r3, #0
 80013a0:	b2fa      	uxtb	r2, r7
 80013a2:	f7ff ff18 	bl	80011d6 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013a6:	4632      	mov	r2, r6
 80013a8:	9908      	ldr	r1, [sp, #32]
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff ff91 	bl	80012d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80013b0:	b128      	cbz	r0, 80013be <I2C_RequestMemoryRead+0x2e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d110      	bne.n	80013da <I2C_RequestMemoryRead+0x4a>
      return HAL_ERROR;
 80013b8:	2001      	movs	r0, #1
}
 80013ba:	b003      	add	sp, #12
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013be:	2f01      	cmp	r7, #1
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	d10c      	bne.n	80013de <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013c4:	b2ed      	uxtb	r5, r5
 80013c6:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80013c8:	9b08      	ldr	r3, [sp, #32]
 80013ca:	9600      	str	r6, [sp, #0]
 80013cc:	2200      	movs	r2, #0
 80013ce:	2140      	movs	r1, #64	; 0x40
 80013d0:	4620      	mov	r0, r4
 80013d2:	f7ff ff1a 	bl	800120a <I2C_WaitOnFlagUntilTimeout>
 80013d6:	2800      	cmp	r0, #0
 80013d8:	d0ef      	beq.n	80013ba <I2C_RequestMemoryRead+0x2a>
      return HAL_TIMEOUT;
 80013da:	2003      	movs	r0, #3
 80013dc:	e7ed      	b.n	80013ba <I2C_RequestMemoryRead+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013de:	0a2a      	lsrs	r2, r5, #8
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013e2:	9908      	ldr	r1, [sp, #32]
 80013e4:	4632      	mov	r2, r6
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff ff73 	bl	80012d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d1e0      	bne.n	80013b2 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	e7e7      	b.n	80013c4 <I2C_RequestMemoryRead+0x34>
 80013f4:	80002000 	.word	0x80002000

080013f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80013f8:	b570      	push	{r4, r5, r6, lr}
 80013fa:	4604      	mov	r4, r0
 80013fc:	460d      	mov	r5, r1
 80013fe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	069b      	lsls	r3, r3, #26
 8001406:	d501      	bpl.n	800140c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001408:	2000      	movs	r0, #0
 800140a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800140c:	4632      	mov	r2, r6
 800140e:	4629      	mov	r1, r5
 8001410:	4620      	mov	r0, r4
 8001412:	f7ff ff21 	bl	8001258 <I2C_IsAcknowledgeFailed>
 8001416:	b9a0      	cbnz	r0, 8001442 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001418:	b96d      	cbnz	r5, 8001436 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800141a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800141c:	f043 0320 	orr.w	r3, r3, #32
 8001420:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001422:	2320      	movs	r3, #32
 8001424:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001428:	2300      	movs	r3, #0
 800142a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800142e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001432:	2003      	movs	r0, #3
 8001434:	bd70      	pop	{r4, r5, r6, pc}
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001436:	f7ff fa15 	bl	8000864 <HAL_GetTick>
 800143a:	1b80      	subs	r0, r0, r6
 800143c:	4285      	cmp	r5, r0
 800143e:	d2df      	bcs.n	8001400 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
 8001440:	e7eb      	b.n	800141a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8001442:	2001      	movs	r0, #1
}
 8001444:	bd70      	pop	{r4, r5, r6, pc}

08001446 <HAL_I2C_MspInit>:
 8001446:	4770      	bx	lr

08001448 <HAL_I2C_Init>:
{
 8001448:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800144a:	4604      	mov	r4, r0
 800144c:	2800      	cmp	r0, #0
 800144e:	d04a      	beq.n	80014e6 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001450:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001454:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001458:	b91b      	cbnz	r3, 8001462 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800145a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800145e:	f7ff fff2 	bl	8001446 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001462:	2324      	movs	r3, #36	; 0x24
 8001464:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001468:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800146a:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	f022 0201 	bic.w	r2, r2, #1
 8001472:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001474:	6862      	ldr	r2, [r4, #4]
 8001476:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800147a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800147c:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800147e:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001480:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001488:	d124      	bne.n	80014d4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800148a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800148e:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001490:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001492:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001494:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001498:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800149c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014a4:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80014a6:	6922      	ldr	r2, [r4, #16]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	69a1      	ldr	r1, [r4, #24]
 80014ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80014b0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014b2:	6a21      	ldr	r1, [r4, #32]
 80014b4:	69e2      	ldr	r2, [r4, #28]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	f042 0201 	orr.w	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c2:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80014c4:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014c6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014cc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014ce:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 80014d2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014d4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014d8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014da:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014dc:	bf04      	itt	eq
 80014de:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80014e2:	605a      	streq	r2, [r3, #4]
 80014e4:	e7d4      	b.n	8001490 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80014e6:	2001      	movs	r0, #1
}
 80014e8:	bd10      	pop	{r4, pc}

080014ea <HAL_I2C_MspDeInit>:
 80014ea:	4770      	bx	lr

080014ec <HAL_I2C_DeInit>:
{
 80014ec:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80014ee:	4604      	mov	r4, r0
 80014f0:	b198      	cbz	r0, 800151a <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80014f2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f4:	2324      	movs	r3, #36	; 0x24
 80014f6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80014fa:	6813      	ldr	r3, [r2, #0]
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8001502:	f7ff fff2 	bl	80014ea <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001506:	2000      	movs	r0, #0
 8001508:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 800150a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 800150e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001512:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001514:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8001518:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800151a:	2001      	movs	r0, #1
}
 800151c:	bd10      	pop	{r4, pc}

0800151e <HAL_I2C_Mem_Write>:
{
 800151e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001522:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001524:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001528:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 800152a:	2b20      	cmp	r3, #32
{
 800152c:	4604      	mov	r4, r0
 800152e:	460f      	mov	r7, r1
 8001530:	9203      	str	r2, [sp, #12]
 8001532:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8001536:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800153a:	f040 80a6 	bne.w	800168a <HAL_I2C_Mem_Write+0x16c>
    if ((pData == NULL) || (Size == 0U))
 800153e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001540:	b91b      	cbnz	r3, 800154a <HAL_I2C_Mem_Write+0x2c>
      return  HAL_ERROR;
 8001542:	2001      	movs	r0, #1
}
 8001544:	b005      	add	sp, #20
 8001546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 800154a:	f1ba 0f00 	cmp.w	sl, #0
 800154e:	d0f8      	beq.n	8001542 <HAL_I2C_Mem_Write+0x24>
    __HAL_LOCK(hi2c);
 8001550:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001554:	2b01      	cmp	r3, #1
 8001556:	f000 8098 	beq.w	800168a <HAL_I2C_Mem_Write+0x16c>
 800155a:	2501      	movs	r5, #1
 800155c:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001560:	f7ff f980 	bl	8000864 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001564:	2319      	movs	r3, #25
 8001566:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8001568:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800156a:	462a      	mov	r2, r5
 800156c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001570:	4620      	mov	r0, r4
 8001572:	f7ff fe4a 	bl	800120a <I2C_WaitOnFlagUntilTimeout>
 8001576:	4680      	mov	r8, r0
 8001578:	b9d0      	cbnz	r0, 80015b0 <HAL_I2C_Mem_Write+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800157a:	2321      	movs	r3, #33	; 0x21
 800157c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001580:	2340      	movs	r3, #64	; 0x40
 8001582:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8001586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001588:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800158a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800158c:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800158e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001592:	9601      	str	r6, [sp, #4]
 8001594:	f8cd 9000 	str.w	r9, [sp]
 8001598:	465b      	mov	r3, fp
 800159a:	9a03      	ldr	r2, [sp, #12]
 800159c:	4639      	mov	r1, r7
 800159e:	4620      	mov	r0, r4
 80015a0:	f7ff fec0 	bl	8001324 <I2C_RequestMemoryWrite>
 80015a4:	b130      	cbz	r0, 80015b4 <HAL_I2C_Mem_Write+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80015a8:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015ac:	2b04      	cmp	r3, #4
 80015ae:	d0c8      	beq.n	8001542 <HAL_I2C_Mem_Write+0x24>
          return HAL_TIMEOUT;
 80015b0:	2003      	movs	r0, #3
 80015b2:	e7c7      	b.n	8001544 <HAL_I2C_Mem_Write+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	2bff      	cmp	r3, #255	; 0xff
 80015ba:	d910      	bls.n	80015de <HAL_I2C_Mem_Write+0xc0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015bc:	22ff      	movs	r2, #255	; 0xff
 80015be:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015c0:	9000      	str	r0, [sp, #0]
 80015c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015c6:	4639      	mov	r1, r7
 80015c8:	4620      	mov	r0, r4
 80015ca:	f7ff fe04 	bl	80011d6 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015ce:	4632      	mov	r2, r6
 80015d0:	4649      	mov	r1, r9
 80015d2:	4620      	mov	r0, r4
 80015d4:	f7ff fe7d 	bl	80012d2 <I2C_WaitOnTXISFlagUntilTimeout>
 80015d8:	b148      	cbz	r0, 80015ee <HAL_I2C_Mem_Write+0xd0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015dc:	e7e6      	b.n	80015ac <HAL_I2C_Mem_Write+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 80015de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015e0:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80015e2:	b292      	uxth	r2, r2
 80015e4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	e7eb      	b.n	80015c6 <HAL_I2C_Mem_Write+0xa8>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80015ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015f0:	6822      	ldr	r2, [r4, #0]
 80015f2:	1c59      	adds	r1, r3, #1
 80015f4:	6261      	str	r1, [r4, #36]	; 0x24
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 80015fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80015fc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80015fe:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001600:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001602:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8001604:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8001606:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001608:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 800160a:	b9ba      	cbnz	r2, 800163c <HAL_I2C_Mem_Write+0x11e>
 800160c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800160e:	b29b      	uxth	r3, r3
 8001610:	b1a3      	cbz	r3, 800163c <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001612:	9600      	str	r6, [sp, #0]
 8001614:	464b      	mov	r3, r9
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	4620      	mov	r0, r4
 800161a:	f7ff fdf6 	bl	800120a <I2C_WaitOnFlagUntilTimeout>
 800161e:	2800      	cmp	r0, #0
 8001620:	d1c6      	bne.n	80015b0 <HAL_I2C_Mem_Write+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001622:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001624:	b29b      	uxth	r3, r3
 8001626:	2bff      	cmp	r3, #255	; 0xff
 8001628:	d927      	bls.n	800167a <HAL_I2C_Mem_Write+0x15c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800162a:	22ff      	movs	r2, #255	; 0xff
 800162c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800162e:	9000      	str	r0, [sp, #0]
 8001630:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001634:	4639      	mov	r1, r7
 8001636:	4620      	mov	r0, r4
 8001638:	f7ff fdcd 	bl	80011d6 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 800163c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800163e:	b29b      	uxth	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1c4      	bne.n	80015ce <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001644:	4632      	mov	r2, r6
 8001646:	4649      	mov	r1, r9
 8001648:	4620      	mov	r0, r4
 800164a:	f7ff fed5 	bl	80013f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800164e:	2800      	cmp	r0, #0
 8001650:	d1c3      	bne.n	80015da <HAL_I2C_Mem_Write+0xbc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001652:	6823      	ldr	r3, [r4, #0]
 8001654:	2120      	movs	r1, #32
 8001656:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 800165e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001662:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001666:	f022 0201 	bic.w	r2, r2, #1
 800166a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800166c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001670:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001674:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001678:	e764      	b.n	8001544 <HAL_I2C_Mem_Write+0x26>
          hi2c->XferSize = hi2c->XferCount;
 800167a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800167c:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800167e:	b292      	uxth	r2, r2
 8001680:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	e7d4      	b.n	8001634 <HAL_I2C_Mem_Write+0x116>
    return HAL_BUSY;
 800168a:	2002      	movs	r0, #2
 800168c:	e75a      	b.n	8001544 <HAL_I2C_Mem_Write+0x26>
	...

08001690 <HAL_I2C_Mem_Read>:
{
 8001690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001694:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001696:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800169a:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 800169c:	2b20      	cmp	r3, #32
{
 800169e:	4604      	mov	r4, r0
 80016a0:	460f      	mov	r7, r1
 80016a2:	9203      	str	r2, [sp, #12]
 80016a4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 80016a8:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ac:	f040 80a9 	bne.w	8001802 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 80016b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80016b2:	b91b      	cbnz	r3, 80016bc <HAL_I2C_Mem_Read+0x2c>
      return  HAL_ERROR;
 80016b4:	2001      	movs	r0, #1
}
 80016b6:	b005      	add	sp, #20
 80016b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pData == NULL) || (Size == 0U))
 80016bc:	f1ba 0f00 	cmp.w	sl, #0
 80016c0:	d0f8      	beq.n	80016b4 <HAL_I2C_Mem_Read+0x24>
    __HAL_LOCK(hi2c);
 80016c2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	f000 809b 	beq.w	8001802 <HAL_I2C_Mem_Read+0x172>
 80016cc:	2501      	movs	r5, #1
 80016ce:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80016d2:	f7ff f8c7 	bl	8000864 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016d6:	2319      	movs	r3, #25
 80016d8:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80016da:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016dc:	462a      	mov	r2, r5
 80016de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e2:	4620      	mov	r0, r4
 80016e4:	f7ff fd91 	bl	800120a <I2C_WaitOnFlagUntilTimeout>
 80016e8:	4680      	mov	r8, r0
 80016ea:	b9d0      	cbnz	r0, 8001722 <HAL_I2C_Mem_Read+0x92>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016ec:	2322      	movs	r3, #34	; 0x22
 80016ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016f2:	2340      	movs	r3, #64	; 0x40
 80016f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80016f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fa:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80016fc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80016fe:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001700:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001704:	9601      	str	r6, [sp, #4]
 8001706:	f8cd 9000 	str.w	r9, [sp]
 800170a:	465b      	mov	r3, fp
 800170c:	9a03      	ldr	r2, [sp, #12]
 800170e:	4639      	mov	r1, r7
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff fe3d 	bl	8001390 <I2C_RequestMemoryRead>
 8001716:	b130      	cbz	r0, 8001726 <HAL_I2C_Mem_Read+0x96>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001718:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800171a:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800171e:	2b04      	cmp	r3, #4
 8001720:	d0c8      	beq.n	80016b4 <HAL_I2C_Mem_Read+0x24>
        return HAL_TIMEOUT;
 8001722:	2003      	movs	r0, #3
 8001724:	e7c7      	b.n	80016b6 <HAL_I2C_Mem_Read+0x26>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001726:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001728:	b29b      	uxth	r3, r3
 800172a:	2bff      	cmp	r3, #255	; 0xff
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_I2C_Mem_Read+0x178>)
 800172e:	d944      	bls.n	80017ba <HAL_I2C_Mem_Read+0x12a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001730:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001732:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001734:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001736:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800173a:	4639      	mov	r1, r7
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff fd4a 	bl	80011d6 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001742:	9600      	str	r6, [sp, #0]
 8001744:	464b      	mov	r3, r9
 8001746:	2200      	movs	r2, #0
 8001748:	2104      	movs	r1, #4
 800174a:	4620      	mov	r0, r4
 800174c:	f7ff fd5d 	bl	800120a <I2C_WaitOnFlagUntilTimeout>
 8001750:	2800      	cmp	r0, #0
 8001752:	d1e6      	bne.n	8001722 <HAL_I2C_Mem_Read+0x92>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	6262      	str	r2, [r4, #36]	; 0x24
 800175a:	6822      	ldr	r2, [r4, #0]
 800175c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800175e:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8001760:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001762:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001764:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001766:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001768:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800176a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800176c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800176e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001770:	b9ba      	cbnz	r2, 80017a2 <HAL_I2C_Mem_Read+0x112>
 8001772:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001774:	b29b      	uxth	r3, r3
 8001776:	b1a3      	cbz	r3, 80017a2 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001778:	9600      	str	r6, [sp, #0]
 800177a:	464b      	mov	r3, r9
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	4620      	mov	r0, r4
 8001780:	f7ff fd43 	bl	800120a <I2C_WaitOnFlagUntilTimeout>
 8001784:	2800      	cmp	r0, #0
 8001786:	d1cc      	bne.n	8001722 <HAL_I2C_Mem_Read+0x92>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001788:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800178a:	b29b      	uxth	r3, r3
 800178c:	2bff      	cmp	r3, #255	; 0xff
 800178e:	d91c      	bls.n	80017ca <HAL_I2C_Mem_Read+0x13a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001790:	22ff      	movs	r2, #255	; 0xff
 8001792:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001794:	9000      	str	r0, [sp, #0]
 8001796:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800179a:	4639      	mov	r1, r7
 800179c:	4620      	mov	r0, r4
 800179e:	f7ff fd1a 	bl	80011d6 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 80017a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1cb      	bne.n	8001742 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017aa:	4632      	mov	r2, r6
 80017ac:	4649      	mov	r1, r9
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff fe22 	bl	80013f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017b4:	b188      	cbz	r0, 80017da <HAL_I2C_Mem_Read+0x14a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017b8:	e7b1      	b.n	800171e <HAL_I2C_Mem_Read+0x8e>
      hi2c->XferSize = hi2c->XferCount;
 80017ba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80017bc:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80017be:	b292      	uxth	r2, r2
 80017c0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80017c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	e7b7      	b.n	800173a <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 80017ca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017cc:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80017ce:	b292      	uxth	r2, r2
 80017d0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	e7df      	b.n	800179a <HAL_I2C_Mem_Read+0x10a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	2120      	movs	r1, #32
 80017de:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80017e6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80017ea:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80017ee:	f022 0201 	bic.w	r2, r2, #1
 80017f2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80017f4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80017f8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017fc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8001800:	e759      	b.n	80016b6 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8001802:	2002      	movs	r0, #2
 8001804:	e757      	b.n	80016b6 <HAL_I2C_Mem_Read+0x26>
 8001806:	bf00      	nop
 8001808:	80002400 	.word	0x80002400

0800180c <HAL_I2C_GetState>:
  return hi2c->State;
 800180c:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8001810:	4770      	bx	lr
	...

08001814 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001814:	4b02      	ldr	r3, [pc, #8]	; (8001820 <HAL_PWREx_GetVoltageRange+0xc>)
 8001816:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8001818:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40007000 	.word	0x40007000

08001824 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present. 
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001824:	4a02      	ldr	r2, [pc, #8]	; (8001830 <HAL_PWREx_EnableVddIO2+0xc>)
 8001826:	6853      	ldr	r3, [r2, #4]
 8001828:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182c:	6053      	str	r3, [r2, #4]
 800182e:	4770      	bx	lr
 8001830:	40007000 	.word	0x40007000

08001834 <HAL_PWREx_DisableVddIO2>:
  * @brief Disable VDDIO2 supply. 
  * @retval None
  */
void HAL_PWREx_DisableVddIO2(void)
{
  CLEAR_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001834:	4a02      	ldr	r2, [pc, #8]	; (8001840 <HAL_PWREx_DisableVddIO2+0xc>)
 8001836:	6853      	ldr	r3, [r2, #4]
 8001838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800183c:	6053      	str	r3, [r2, #4]
 800183e:	4770      	bx	lr
 8001840:	40007000 	.word	0x40007000

08001844 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001844:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001846:	4d1e      	ldr	r5, [pc, #120]	; (80018c0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001848:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800184a:	00da      	lsls	r2, r3, #3
{
 800184c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800184e:	d518      	bpl.n	8001882 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001850:	f7ff ffe0 	bl	8001814 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001854:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001858:	d123      	bne.n	80018a2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800185a:	2c80      	cmp	r4, #128	; 0x80
 800185c:	d929      	bls.n	80018b2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800185e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001860:	bf8c      	ite	hi
 8001862:	2002      	movhi	r0, #2
 8001864:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001866:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001868:	6813      	ldr	r3, [r2, #0]
 800186a:	f023 0307 	bic.w	r3, r3, #7
 800186e:	4303      	orrs	r3, r0
 8001870:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8001872:	6813      	ldr	r3, [r2, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001878:	1a18      	subs	r0, r3, r0
 800187a:	bf18      	it	ne
 800187c:	2001      	movne	r0, #1
 800187e:	b003      	add	sp, #12
 8001880:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001888:	65ab      	str	r3, [r5, #88]	; 0x58
 800188a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800188c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001894:	f7ff ffbe 	bl	8001814 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001898:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800189a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189e:	65ab      	str	r3, [r5, #88]	; 0x58
 80018a0:	e7d8      	b.n	8001854 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80018a2:	2c80      	cmp	r4, #128	; 0x80
 80018a4:	d807      	bhi.n	80018b6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80018a6:	d008      	beq.n	80018ba <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80018a8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80018ac:	4258      	negs	r0, r3
 80018ae:	4158      	adcs	r0, r3
 80018b0:	e7d9      	b.n	8001866 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018b2:	2000      	movs	r0, #0
 80018b4:	e7d7      	b.n	8001866 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80018b6:	2003      	movs	r0, #3
 80018b8:	e7d5      	b.n	8001866 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80018ba:	2002      	movs	r0, #2
 80018bc:	e7d3      	b.n	8001866 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40022000 	.word	0x40022000

080018c8 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80018c8:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	f012 0f0c 	tst.w	r2, #12
{
 80018d0:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80018d2:	d009      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80018da:	2a0c      	cmp	r2, #12
 80018dc:	d12d      	bne.n	800193a <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80018de:	68da      	ldr	r2, [r3, #12]
 80018e0:	f002 0203 	and.w	r2, r2, #3
 80018e4:	2a01      	cmp	r2, #1
 80018e6:	d128      	bne.n	800193a <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80018e8:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80018ea:	4928      	ldr	r1, [pc, #160]	; (800198c <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80018ec:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018ee:	bf55      	itete	pl
 80018f0:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018f4:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018f6:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018fa:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80018fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001902:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001904:	f011 0f0c 	tst.w	r1, #12
 8001908:	bf0c      	ite	eq
 800190a:	4610      	moveq	r0, r2
 800190c:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800190e:	6899      	ldr	r1, [r3, #8]
 8001910:	f001 010c 	and.w	r1, r1, #12
 8001914:	290c      	cmp	r1, #12
 8001916:	d130      	bne.n	800197a <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001918:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800191a:	68d8      	ldr	r0, [r3, #12]
 800191c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001920:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001922:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 8001926:	2802      	cmp	r0, #2
 8001928:	d019      	beq.n	800195e <HAL_RCC_GetSysClockFreq+0x96>
 800192a:	2803      	cmp	r0, #3
 800192c:	d026      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800192e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001932:	68d8      	ldr	r0, [r3, #12]
 8001934:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001938:	e017      	b.n	800196a <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	f002 020c 	and.w	r2, r2, #12
 8001940:	2a04      	cmp	r2, #4
 8001942:	d007      	beq.n	8001954 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001944:	689a      	ldr	r2, [r3, #8]
 8001946:	f002 020c 	and.w	r2, r2, #12
 800194a:	2a08      	cmp	r2, #8
 800194c:	d104      	bne.n	8001958 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 800194e:	4810      	ldr	r0, [pc, #64]	; (8001990 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001950:	2200      	movs	r2, #0
 8001952:	e7dc      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8001954:	480f      	ldr	r0, [pc, #60]	; (8001994 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001956:	e7fb      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001958:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800195a:	4602      	mov	r2, r0
 800195c:	e7d7      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	480c      	ldr	r0, [pc, #48]	; (8001994 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001962:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001966:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001970:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001972:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001974:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001976:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800197a:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	4804      	ldr	r0, [pc, #16]	; (8001990 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001980:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001984:	e7ef      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x9e>
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	08003288 	.word	0x08003288
 8001990:	007a1200 	.word	0x007a1200
 8001994:	00f42400 	.word	0x00f42400

08001998 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001998:	6803      	ldr	r3, [r0, #0]
{
 800199a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800199e:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019a0:	06d8      	lsls	r0, r3, #27
 80019a2:	d53b      	bpl.n	8001a1c <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80019a4:	4ca9      	ldr	r4, [pc, #676]	; (8001c4c <HAL_RCC_OscConfig+0x2b4>)
 80019a6:	68a3      	ldr	r3, [r4, #8]
 80019a8:	f013 0f0c 	tst.w	r3, #12
 80019ac:	d160      	bne.n	8001a70 <HAL_RCC_OscConfig+0xd8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	0799      	lsls	r1, r3, #30
 80019b2:	d505      	bpl.n	80019c0 <HAL_RCC_OscConfig+0x28>
 80019b4:	69ab      	ldr	r3, [r5, #24]
 80019b6:	b91b      	cbnz	r3, 80019c0 <HAL_RCC_OscConfig+0x28>
        return HAL_ERROR;
 80019b8:	2001      	movs	r0, #1
}
 80019ba:	b002      	add	sp, #8
 80019bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019c0:	6823      	ldr	r3, [r4, #0]
 80019c2:	6a28      	ldr	r0, [r5, #32]
 80019c4:	071a      	lsls	r2, r3, #28
 80019c6:	bf56      	itet	pl
 80019c8:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80019cc:	6823      	ldrmi	r3, [r4, #0]
 80019ce:	091b      	lsrpl	r3, r3, #4
 80019d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019d4:	4283      	cmp	r3, r0
 80019d6:	d236      	bcs.n	8001a46 <HAL_RCC_OscConfig+0xae>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d8:	f7ff ff34 	bl	8001844 <RCC_SetFlashLatencyFromMSIRange>
 80019dc:	2800      	cmp	r0, #0
 80019de:	d1eb      	bne.n	80019b8 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019e0:	6823      	ldr	r3, [r4, #0]
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	6023      	str	r3, [r4, #0]
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	6a2a      	ldr	r2, [r5, #32]
 80019ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019f0:	4313      	orrs	r3, r2
 80019f2:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019f4:	6863      	ldr	r3, [r4, #4]
 80019f6:	69ea      	ldr	r2, [r5, #28]
 80019f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a00:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a02:	f7ff ff61 	bl	80018c8 <HAL_RCC_GetSysClockFreq>
 8001a06:	68a3      	ldr	r3, [r4, #8]
 8001a08:	4a91      	ldr	r2, [pc, #580]	; (8001c50 <HAL_RCC_OscConfig+0x2b8>)
 8001a0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	40d8      	lsrs	r0, r3
 8001a12:	4b90      	ldr	r3, [pc, #576]	; (8001c54 <HAL_RCC_OscConfig+0x2bc>)
 8001a14:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001a16:	200f      	movs	r0, #15
 8001a18:	f7fe fefc 	bl	8000814 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1c:	682b      	ldr	r3, [r5, #0]
 8001a1e:	07de      	lsls	r6, r3, #31
 8001a20:	d45b      	bmi.n	8001ada <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a22:	682b      	ldr	r3, [r5, #0]
 8001a24:	079c      	lsls	r4, r3, #30
 8001a26:	f100 80a3 	bmi.w	8001b70 <HAL_RCC_OscConfig+0x1d8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2a:	682b      	ldr	r3, [r5, #0]
 8001a2c:	0719      	lsls	r1, r3, #28
 8001a2e:	f100 80e1 	bmi.w	8001bf4 <HAL_RCC_OscConfig+0x25c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a32:	682b      	ldr	r3, [r5, #0]
 8001a34:	075a      	lsls	r2, r3, #29
 8001a36:	f100 810f 	bmi.w	8001c58 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a3a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001a3c:	2a00      	cmp	r2, #0
 8001a3e:	f040 8176 	bne.w	8001d2e <HAL_RCC_OscConfig+0x396>
  return HAL_OK;
 8001a42:	2000      	movs	r0, #0
 8001a44:	e7b9      	b.n	80019ba <HAL_RCC_OscConfig+0x22>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	6023      	str	r3, [r4, #0]
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a54:	4303      	orrs	r3, r0
 8001a56:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a58:	6863      	ldr	r3, [r4, #4]
 8001a5a:	69ea      	ldr	r2, [r5, #28]
 8001a5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a64:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a66:	f7ff feed 	bl	8001844 <RCC_SetFlashLatencyFromMSIRange>
 8001a6a:	2800      	cmp	r0, #0
 8001a6c:	d0c9      	beq.n	8001a02 <HAL_RCC_OscConfig+0x6a>
 8001a6e:	e7a3      	b.n	80019b8 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a70:	69ab      	ldr	r3, [r5, #24]
 8001a72:	b313      	cbz	r3, 8001aba <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_MSI_ENABLE();
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001a7c:	f7fe fef2 	bl	8000864 <HAL_GetTick>
 8001a80:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	079b      	lsls	r3, r3, #30
 8001a86:	d511      	bpl.n	8001aac <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	f043 0308 	orr.w	r3, r3, #8
 8001a8e:	6023      	str	r3, [r4, #0]
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	6a2a      	ldr	r2, [r5, #32]
 8001a94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a9c:	6863      	ldr	r3, [r4, #4]
 8001a9e:	69ea      	ldr	r2, [r5, #28]
 8001aa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001aa4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001aa8:	6063      	str	r3, [r4, #4]
 8001aaa:	e7b7      	b.n	8001a1c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aac:	f7fe feda 	bl	8000864 <HAL_GetTick>
 8001ab0:	1b80      	subs	r0, r0, r6
 8001ab2:	2802      	cmp	r0, #2
 8001ab4:	d9e5      	bls.n	8001a82 <HAL_RCC_OscConfig+0xea>
            return HAL_TIMEOUT;
 8001ab6:	2003      	movs	r0, #3
 8001ab8:	e77f      	b.n	80019ba <HAL_RCC_OscConfig+0x22>
        __HAL_RCC_MSI_DISABLE();
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ac2:	f7fe fecf 	bl	8000864 <HAL_GetTick>
 8001ac6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	079f      	lsls	r7, r3, #30
 8001acc:	d5a6      	bpl.n	8001a1c <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ace:	f7fe fec9 	bl	8000864 <HAL_GetTick>
 8001ad2:	1b80      	subs	r0, r0, r6
 8001ad4:	2802      	cmp	r0, #2
 8001ad6:	d9f7      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x130>
 8001ad8:	e7ed      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001ada:	4c5c      	ldr	r4, [pc, #368]	; (8001c4c <HAL_RCC_OscConfig+0x2b4>)
 8001adc:	68a3      	ldr	r3, [r4, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b08      	cmp	r3, #8
 8001ae4:	d009      	beq.n	8001afa <HAL_RCC_OscConfig+0x162>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ae6:	68a3      	ldr	r3, [r4, #8]
 8001ae8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d10b      	bne.n	8001b08 <HAL_RCC_OscConfig+0x170>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001af0:	68e3      	ldr	r3, [r4, #12]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d106      	bne.n	8001b08 <HAL_RCC_OscConfig+0x170>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	0398      	lsls	r0, r3, #14
 8001afe:	d590      	bpl.n	8001a22 <HAL_RCC_OscConfig+0x8a>
 8001b00:	686b      	ldr	r3, [r5, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d18d      	bne.n	8001a22 <HAL_RCC_OscConfig+0x8a>
 8001b06:	e757      	b.n	80019b8 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b08:	686b      	ldr	r3, [r5, #4]
 8001b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0e:	d110      	bne.n	8001b32 <HAL_RCC_OscConfig+0x19a>
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b16:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b18:	f7fe fea4 	bl	8000864 <HAL_GetTick>
 8001b1c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	0399      	lsls	r1, r3, #14
 8001b22:	f53f af7e 	bmi.w	8001a22 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b26:	f7fe fe9d 	bl	8000864 <HAL_GetTick>
 8001b2a:	1b80      	subs	r0, r0, r6
 8001b2c:	2864      	cmp	r0, #100	; 0x64
 8001b2e:	d9f6      	bls.n	8001b1e <HAL_RCC_OscConfig+0x186>
 8001b30:	e7c1      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b36:	d104      	bne.n	8001b42 <HAL_RCC_OscConfig+0x1aa>
 8001b38:	6823      	ldr	r3, [r4, #0]
 8001b3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b3e:	6023      	str	r3, [r4, #0]
 8001b40:	e7e6      	b.n	8001b10 <HAL_RCC_OscConfig+0x178>
 8001b42:	6822      	ldr	r2, [r4, #0]
 8001b44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001b48:	6022      	str	r2, [r4, #0]
 8001b4a:	6822      	ldr	r2, [r4, #0]
 8001b4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b50:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1e0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x180>
        tickstart = HAL_GetTick();
 8001b56:	f7fe fe85 	bl	8000864 <HAL_GetTick>
 8001b5a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	039a      	lsls	r2, r3, #14
 8001b60:	f57f af5f 	bpl.w	8001a22 <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b64:	f7fe fe7e 	bl	8000864 <HAL_GetTick>
 8001b68:	1b80      	subs	r0, r0, r6
 8001b6a:	2864      	cmp	r0, #100	; 0x64
 8001b6c:	d9f6      	bls.n	8001b5c <HAL_RCC_OscConfig+0x1c4>
 8001b6e:	e7a2      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001b70:	4c36      	ldr	r4, [pc, #216]	; (8001c4c <HAL_RCC_OscConfig+0x2b4>)
 8001b72:	68a3      	ldr	r3, [r4, #8]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d009      	beq.n	8001b90 <HAL_RCC_OscConfig+0x1f8>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b7c:	68a3      	ldr	r3, [r4, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001b82:	2b0c      	cmp	r3, #12
 8001b84:	d113      	bne.n	8001bae <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b86:	68e3      	ldr	r3, [r4, #12]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d10e      	bne.n	8001bae <HAL_RCC_OscConfig+0x216>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	055b      	lsls	r3, r3, #21
 8001b94:	d503      	bpl.n	8001b9e <HAL_RCC_OscConfig+0x206>
 8001b96:	68eb      	ldr	r3, [r5, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f43f af0d 	beq.w	80019b8 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9e:	6863      	ldr	r3, [r4, #4]
 8001ba0:	692a      	ldr	r2, [r5, #16]
 8001ba2:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001ba6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001baa:	6063      	str	r3, [r4, #4]
 8001bac:	e73d      	b.n	8001a2a <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bae:	68eb      	ldr	r3, [r5, #12]
 8001bb0:	b17b      	cbz	r3, 8001bd2 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_HSI_ENABLE();
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bba:	f7fe fe53 	bl	8000864 <HAL_GetTick>
 8001bbe:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	055f      	lsls	r7, r3, #21
 8001bc4:	d4eb      	bmi.n	8001b9e <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc6:	f7fe fe4d 	bl	8000864 <HAL_GetTick>
 8001bca:	1b80      	subs	r0, r0, r6
 8001bcc:	2802      	cmp	r0, #2
 8001bce:	d9f7      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x228>
 8001bd0:	e771      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
        __HAL_RCC_HSI_DISABLE();
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bd8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bda:	f7fe fe43 	bl	8000864 <HAL_GetTick>
 8001bde:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001be0:	6823      	ldr	r3, [r4, #0]
 8001be2:	0558      	lsls	r0, r3, #21
 8001be4:	f57f af21 	bpl.w	8001a2a <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be8:	f7fe fe3c 	bl	8000864 <HAL_GetTick>
 8001bec:	1b80      	subs	r0, r0, r6
 8001bee:	2802      	cmp	r0, #2
 8001bf0:	d9f6      	bls.n	8001be0 <HAL_RCC_OscConfig+0x248>
 8001bf2:	e760      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bf4:	696b      	ldr	r3, [r5, #20]
 8001bf6:	4c15      	ldr	r4, [pc, #84]	; (8001c4c <HAL_RCC_OscConfig+0x2b4>)
 8001bf8:	b19b      	cbz	r3, 8001c22 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_LSI_ENABLE();
 8001bfa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001c06:	f7fe fe2d 	bl	8000864 <HAL_GetTick>
 8001c0a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001c0c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001c10:	079b      	lsls	r3, r3, #30
 8001c12:	f53f af0e 	bmi.w	8001a32 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c16:	f7fe fe25 	bl	8000864 <HAL_GetTick>
 8001c1a:	1b80      	subs	r0, r0, r6
 8001c1c:	2802      	cmp	r0, #2
 8001c1e:	d9f5      	bls.n	8001c0c <HAL_RCC_OscConfig+0x274>
 8001c20:	e749      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_LSI_DISABLE();
 8001c22:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001c26:	f023 0301 	bic.w	r3, r3, #1
 8001c2a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001c2e:	f7fe fe19 	bl	8000864 <HAL_GetTick>
 8001c32:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001c34:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001c38:	079f      	lsls	r7, r3, #30
 8001c3a:	f57f aefa 	bpl.w	8001a32 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3e:	f7fe fe11 	bl	8000864 <HAL_GetTick>
 8001c42:	1b80      	subs	r0, r0, r6
 8001c44:	2802      	cmp	r0, #2
 8001c46:	d9f5      	bls.n	8001c34 <HAL_RCC_OscConfig+0x29c>
 8001c48:	e735      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08003270 	.word	0x08003270
 8001c54:	20000040 	.word	0x20000040
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c58:	4c66      	ldr	r4, [pc, #408]	; (8001df4 <HAL_RCC_OscConfig+0x45c>)
 8001c5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c5c:	00de      	lsls	r6, r3, #3
 8001c5e:	d427      	bmi.n	8001cb0 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c66:	65a3      	str	r3, [r4, #88]	; 0x58
 8001c68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c72:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c74:	4e60      	ldr	r6, [pc, #384]	; (8001df8 <HAL_RCC_OscConfig+0x460>)
 8001c76:	6833      	ldr	r3, [r6, #0]
 8001c78:	05d8      	lsls	r0, r3, #23
 8001c7a:	d51b      	bpl.n	8001cb4 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7c:	68ab      	ldr	r3, [r5, #8]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d129      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x33e>
 8001c82:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001c8e:	f7fe fde9 	bl	8000864 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c92:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c96:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001c98:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001c9c:	079a      	lsls	r2, r3, #30
 8001c9e:	d540      	bpl.n	8001d22 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8001ca0:	2f00      	cmp	r7, #0
 8001ca2:	f43f aeca 	beq.w	8001a3a <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ca6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cac:	65a3      	str	r3, [r4, #88]	; 0x58
 8001cae:	e6c4      	b.n	8001a3a <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8001cb0:	2700      	movs	r7, #0
 8001cb2:	e7df      	b.n	8001c74 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cb4:	6833      	ldr	r3, [r6, #0]
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cba:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001cbc:	f7fe fdd2 	bl	8000864 <HAL_GetTick>
 8001cc0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cc2:	6833      	ldr	r3, [r6, #0]
 8001cc4:	05d9      	lsls	r1, r3, #23
 8001cc6:	d4d9      	bmi.n	8001c7c <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc8:	f7fe fdcc 	bl	8000864 <HAL_GetTick>
 8001ccc:	eba0 0008 	sub.w	r0, r0, r8
 8001cd0:	2802      	cmp	r0, #2
 8001cd2:	d9f6      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x32a>
 8001cd4:	e6ef      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d106      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x350>
 8001cda:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001ce6:	e7cc      	b.n	8001c82 <HAL_RCC_OscConfig+0x2ea>
 8001ce8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001cec:	f022 0201 	bic.w	r2, r2, #1
 8001cf0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001cf4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001cf8:	f022 0204 	bic.w	r2, r2, #4
 8001cfc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1c4      	bne.n	8001c8e <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001d04:	f7fe fdae 	bl	8000864 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d0c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001d0e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001d12:	079b      	lsls	r3, r3, #30
 8001d14:	d5c4      	bpl.n	8001ca0 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d16:	f7fe fda5 	bl	8000864 <HAL_GetTick>
 8001d1a:	1b80      	subs	r0, r0, r6
 8001d1c:	4540      	cmp	r0, r8
 8001d1e:	d9f6      	bls.n	8001d0e <HAL_RCC_OscConfig+0x376>
 8001d20:	e6c9      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7fe fd9f 	bl	8000864 <HAL_GetTick>
 8001d26:	1b80      	subs	r0, r0, r6
 8001d28:	4540      	cmp	r0, r8
 8001d2a:	d9b5      	bls.n	8001c98 <HAL_RCC_OscConfig+0x300>
 8001d2c:	e6c3      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d2e:	4c31      	ldr	r4, [pc, #196]	; (8001df4 <HAL_RCC_OscConfig+0x45c>)
 8001d30:	68a3      	ldr	r3, [r4, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	f43f ae3e 	beq.w	80019b8 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 8001d3c:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d3e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d44:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d46:	d137      	bne.n	8001db8 <HAL_RCC_OscConfig+0x420>
        tickstart = HAL_GetTick();
 8001d48:	f7fe fd8c 	bl	8000864 <HAL_GetTick>
 8001d4c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	019f      	lsls	r7, r3, #6
 8001d52:	d42b      	bmi.n	8001dac <HAL_RCC_OscConfig+0x414>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d54:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001d56:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001d58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d5c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001d5e:	3a01      	subs	r2, #1
 8001d60:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001d64:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001d66:	0912      	lsrs	r2, r2, #4
 8001d68:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001d6c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001d6e:	0852      	lsrs	r2, r2, #1
 8001d70:	3a01      	subs	r2, #1
 8001d72:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001d76:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001d78:	0852      	lsrs	r2, r2, #1
 8001d7a:	3a01      	subs	r2, #1
 8001d7c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001d80:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001d82:	6823      	ldr	r3, [r4, #0]
 8001d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d88:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d8a:	68e3      	ldr	r3, [r4, #12]
 8001d8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d90:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001d92:	f7fe fd67 	bl	8000864 <HAL_GetTick>
 8001d96:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001d98:	6823      	ldr	r3, [r4, #0]
 8001d9a:	0198      	lsls	r0, r3, #6
 8001d9c:	f53f ae51 	bmi.w	8001a42 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da0:	f7fe fd60 	bl	8000864 <HAL_GetTick>
 8001da4:	1b40      	subs	r0, r0, r5
 8001da6:	2802      	cmp	r0, #2
 8001da8:	d9f6      	bls.n	8001d98 <HAL_RCC_OscConfig+0x400>
 8001daa:	e684      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7fe fd5a 	bl	8000864 <HAL_GetTick>
 8001db0:	1b80      	subs	r0, r0, r6
 8001db2:	2802      	cmp	r0, #2
 8001db4:	d9cb      	bls.n	8001d4e <HAL_RCC_OscConfig+0x3b6>
 8001db6:	e67e      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	0119      	lsls	r1, r3, #4
 8001dbc:	d406      	bmi.n	8001dcc <HAL_RCC_OscConfig+0x434>
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 8001dbe:	6823      	ldr	r3, [r4, #0]
           &&
 8001dc0:	009a      	lsls	r2, r3, #2
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dc2:	bf5e      	ittt	pl
 8001dc4:	68e3      	ldrpl	r3, [r4, #12]
 8001dc6:	f023 0303 	bicpl.w	r3, r3, #3
 8001dca:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dcc:	68e3      	ldr	r3, [r4, #12]
 8001dce:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd6:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001dd8:	f7fe fd44 	bl	8000864 <HAL_GetTick>
 8001ddc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	019b      	lsls	r3, r3, #6
 8001de2:	f57f ae2e 	bpl.w	8001a42 <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de6:	f7fe fd3d 	bl	8000864 <HAL_GetTick>
 8001dea:	1b40      	subs	r0, r0, r5
 8001dec:	2802      	cmp	r0, #2
 8001dee:	d9f6      	bls.n	8001dde <HAL_RCC_OscConfig+0x446>
 8001df0:	e661      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40007000 	.word	0x40007000

08001dfc <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001dfc:	4a56      	ldr	r2, [pc, #344]	; (8001f58 <HAL_RCC_ClockConfig+0x15c>)
 8001dfe:	6813      	ldr	r3, [r2, #0]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	428b      	cmp	r3, r1
{
 8001e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0a:	4605      	mov	r5, r0
 8001e0c:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001e0e:	d32b      	bcc.n	8001e68 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e10:	682b      	ldr	r3, [r5, #0]
 8001e12:	07d9      	lsls	r1, r3, #31
 8001e14:	d435      	bmi.n	8001e82 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e16:	6829      	ldr	r1, [r5, #0]
 8001e18:	078a      	lsls	r2, r1, #30
 8001e1a:	f100 8083 	bmi.w	8001f24 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001e1e:	4a4e      	ldr	r2, [pc, #312]	; (8001f58 <HAL_RCC_ClockConfig+0x15c>)
 8001e20:	6813      	ldr	r3, [r2, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	429e      	cmp	r6, r3
 8001e28:	f0c0 8084 	bcc.w	8001f34 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2c:	f011 0f04 	tst.w	r1, #4
 8001e30:	4c4a      	ldr	r4, [pc, #296]	; (8001f5c <HAL_RCC_ClockConfig+0x160>)
 8001e32:	f040 808a 	bne.w	8001f4a <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e36:	070b      	lsls	r3, r1, #28
 8001e38:	d506      	bpl.n	8001e48 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e3a:	68a3      	ldr	r3, [r4, #8]
 8001e3c:	692a      	ldr	r2, [r5, #16]
 8001e3e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001e42:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001e46:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e48:	f7ff fd3e 	bl	80018c8 <HAL_RCC_GetSysClockFreq>
 8001e4c:	68a3      	ldr	r3, [r4, #8]
 8001e4e:	4a44      	ldr	r2, [pc, #272]	; (8001f60 <HAL_RCC_ClockConfig+0x164>)
 8001e50:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e54:	5cd3      	ldrb	r3, [r2, r3]
 8001e56:	40d8      	lsrs	r0, r3
 8001e58:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <HAL_RCC_ClockConfig+0x168>)
 8001e5a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e5c:	200f      	movs	r0, #15
 8001e5e:	f7fe fcd9 	bl	8000814 <HAL_InitTick>
  return HAL_OK;
 8001e62:	2000      	movs	r0, #0
}
 8001e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e68:	6813      	ldr	r3, [r2, #0]
 8001e6a:	f023 0307 	bic.w	r3, r3, #7
 8001e6e:	430b      	orrs	r3, r1
 8001e70:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001e72:	6813      	ldr	r3, [r2, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4299      	cmp	r1, r3
 8001e7a:	d0c9      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e82:	686a      	ldr	r2, [r5, #4]
 8001e84:	4c35      	ldr	r4, [pc, #212]	; (8001f5c <HAL_RCC_ClockConfig+0x160>)
 8001e86:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001e88:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8a:	d11c      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001e8c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001e90:	d0f4      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e92:	68a3      	ldr	r3, [r4, #8]
 8001e94:	f023 0303 	bic.w	r3, r3, #3
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001e9c:	f7fe fce2 	bl	8000864 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea0:	686b      	ldr	r3, [r5, #4]
 8001ea2:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8001ea4:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea6:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eaa:	d118      	bne.n	8001ede <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eac:	68a3      	ldr	r3, [r4, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d0af      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb6:	f7fe fcd5 	bl	8000864 <HAL_GetTick>
 8001eba:	1bc0      	subs	r0, r0, r7
 8001ebc:	4540      	cmp	r0, r8
 8001ebe:	d9f5      	bls.n	8001eac <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec6:	2a02      	cmp	r2, #2
 8001ec8:	d102      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001eca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ece:	e7df      	b.n	8001e90 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ed0:	b912      	cbnz	r2, 8001ed8 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001ed2:	f013 0f02 	tst.w	r3, #2
 8001ed6:	e7db      	b.n	8001e90 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001ed8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001edc:	e7d8      	b.n	8001e90 <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d10a      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001ee2:	68a3      	ldr	r3, [r4, #8]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d094      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eec:	f7fe fcba 	bl	8000864 <HAL_GetTick>
 8001ef0:	1bc0      	subs	r0, r0, r7
 8001ef2:	4540      	cmp	r0, r8
 8001ef4:	d9f5      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0xe6>
 8001ef6:	e7e3      	b.n	8001ec0 <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ef8:	b973      	cbnz	r3, 8001f18 <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001efa:	68a3      	ldr	r3, [r4, #8]
 8001efc:	f013 0f0c 	tst.w	r3, #12
 8001f00:	d089      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f02:	f7fe fcaf 	bl	8000864 <HAL_GetTick>
 8001f06:	1bc0      	subs	r0, r0, r7
 8001f08:	4540      	cmp	r0, r8
 8001f0a:	d9f6      	bls.n	8001efa <HAL_RCC_ClockConfig+0xfe>
 8001f0c:	e7d8      	b.n	8001ec0 <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0e:	f7fe fca9 	bl	8000864 <HAL_GetTick>
 8001f12:	1bc0      	subs	r0, r0, r7
 8001f14:	4540      	cmp	r0, r8
 8001f16:	d8d3      	bhi.n	8001ec0 <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001f18:	68a3      	ldr	r3, [r4, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d1f5      	bne.n	8001f0e <HAL_RCC_ClockConfig+0x112>
 8001f22:	e778      	b.n	8001e16 <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f24:	4a0d      	ldr	r2, [pc, #52]	; (8001f5c <HAL_RCC_ClockConfig+0x160>)
 8001f26:	68a8      	ldr	r0, [r5, #8]
 8001f28:	6893      	ldr	r3, [r2, #8]
 8001f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f2e:	4303      	orrs	r3, r0
 8001f30:	6093      	str	r3, [r2, #8]
 8001f32:	e774      	b.n	8001e1e <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f34:	6813      	ldr	r3, [r2, #0]
 8001f36:	f023 0307 	bic.w	r3, r3, #7
 8001f3a:	4333      	orrs	r3, r6
 8001f3c:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001f3e:	6813      	ldr	r3, [r2, #0]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	429e      	cmp	r6, r3
 8001f46:	d199      	bne.n	8001e7c <HAL_RCC_ClockConfig+0x80>
 8001f48:	e770      	b.n	8001e2c <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4a:	68a3      	ldr	r3, [r4, #8]
 8001f4c:	68ea      	ldr	r2, [r5, #12]
 8001f4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60a3      	str	r3, [r4, #8]
 8001f56:	e76e      	b.n	8001e36 <HAL_RCC_ClockConfig+0x3a>
 8001f58:	40022000 	.word	0x40022000
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	08003270 	.word	0x08003270
 8001f64:	20000040 	.word	0x20000040

08001f68 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	4a03      	ldr	r2, [pc, #12]	; (8001f84 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001f76:	6810      	ldr	r0, [r2, #0]
}
 8001f78:	40d8      	lsrs	r0, r3
 8001f7a:	4770      	bx	lr
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08003280 	.word	0x08003280
 8001f84:	20000040 	.word	0x20000040

08001f88 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001f8a:	4a05      	ldr	r2, [pc, #20]	; (8001fa0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001f92:	5cd3      	ldrb	r3, [r2, r3]
 8001f94:	4a03      	ldr	r2, [pc, #12]	; (8001fa4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001f96:	6810      	ldr	r0, [r2, #0]
}
 8001f98:	40d8      	lsrs	r0, r3
 8001f9a:	4770      	bx	lr
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	08003280 	.word	0x08003280
 8001fa4:	20000040 	.word	0x20000040

08001fa8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001faa:	4b45      	ldr	r3, [pc, #276]	; (80020c0 <RCCEx_PLLSAI1_Config+0x118>)
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	f012 0f03 	tst.w	r2, #3
{
 8001fb2:	4605      	mov	r5, r0
 8001fb4:	460e      	mov	r6, r1
 8001fb6:	461c      	mov	r4, r3
 8001fb8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001fba:	d02a      	beq.n	8002012 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	f002 0203 	and.w	r2, r2, #3
 8001fc2:	4282      	cmp	r2, r0
 8001fc4:	d13c      	bne.n	8002040 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001fc6:	2a00      	cmp	r2, #0
 8001fc8:	d03a      	beq.n	8002040 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001fca:	68db      	ldr	r3, [r3, #12]
       ||
 8001fcc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001fce:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001fd2:	3301      	adds	r3, #1
       ||
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d133      	bne.n	8002040 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001fde:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe0:	f7fe fc40 	bl	8000864 <HAL_GetTick>
 8001fe4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	011a      	lsls	r2, r3, #4
 8001fea:	d432      	bmi.n	8002052 <RCCEx_PLLSAI1_Config+0xaa>
 8001fec:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001fee:	2e00      	cmp	r6, #0
 8001ff0:	d036      	beq.n	8002060 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001ff2:	2e01      	cmp	r6, #1
 8001ff4:	d150      	bne.n	8002098 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ff6:	6922      	ldr	r2, [r4, #16]
 8001ff8:	6928      	ldr	r0, [r5, #16]
 8001ffa:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001ffe:	0840      	lsrs	r0, r0, #1
 8002000:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002004:	3801      	subs	r0, #1
 8002006:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800200a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 800200e:	6122      	str	r2, [r4, #16]
 8002010:	e032      	b.n	8002078 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8002012:	2802      	cmp	r0, #2
 8002014:	d010      	beq.n	8002038 <RCCEx_PLLSAI1_Config+0x90>
 8002016:	2803      	cmp	r0, #3
 8002018:	d014      	beq.n	8002044 <RCCEx_PLLSAI1_Config+0x9c>
 800201a:	2801      	cmp	r0, #1
 800201c:	d110      	bne.n	8002040 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	079f      	lsls	r7, r3, #30
 8002022:	d538      	bpl.n	8002096 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002024:	68e3      	ldr	r3, [r4, #12]
 8002026:	686a      	ldr	r2, [r5, #4]
 8002028:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 800202c:	3a01      	subs	r2, #1
 800202e:	4318      	orrs	r0, r3
 8002030:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002034:	60e0      	str	r0, [r4, #12]
 8002036:	e7cf      	b.n	8001fd8 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800203e:	d1f1      	bne.n	8002024 <RCCEx_PLLSAI1_Config+0x7c>
 8002040:	2001      	movs	r0, #1
 8002042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	0391      	lsls	r1, r2, #14
 8002048:	d4ec      	bmi.n	8002024 <RCCEx_PLLSAI1_Config+0x7c>
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002050:	e7f5      	b.n	800203e <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002052:	f7fe fc07 	bl	8000864 <HAL_GetTick>
 8002056:	1bc0      	subs	r0, r0, r7
 8002058:	2802      	cmp	r0, #2
 800205a:	d9c4      	bls.n	8001fe6 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 800205c:	2003      	movs	r0, #3
 800205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002060:	6921      	ldr	r1, [r4, #16]
 8002062:	68eb      	ldr	r3, [r5, #12]
 8002064:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8002068:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800206c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8002070:	091b      	lsrs	r3, r3, #4
 8002072:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8002076:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002078:	6823      	ldr	r3, [r4, #0]
 800207a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800207e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7fe fbf0 	bl	8000864 <HAL_GetTick>
 8002084:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	d513      	bpl.n	80020b4 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800208c:	6923      	ldr	r3, [r4, #16]
 800208e:	69aa      	ldr	r2, [r5, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	6123      	str	r3, [r4, #16]
 8002094:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002098:	6923      	ldr	r3, [r4, #16]
 800209a:	6968      	ldr	r0, [r5, #20]
 800209c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80020a0:	0840      	lsrs	r0, r0, #1
 80020a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020a6:	3801      	subs	r0, #1
 80020a8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80020ac:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 80020b0:	6123      	str	r3, [r4, #16]
 80020b2:	e7e1      	b.n	8002078 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020b4:	f7fe fbd6 	bl	8000864 <HAL_GetTick>
 80020b8:	1b80      	subs	r0, r0, r6
 80020ba:	2802      	cmp	r0, #2
 80020bc:	d9e3      	bls.n	8002086 <RCCEx_PLLSAI1_Config+0xde>
 80020be:	e7cd      	b.n	800205c <RCCEx_PLLSAI1_Config+0xb4>
 80020c0:	40021000 	.word	0x40021000

080020c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80020c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020c6:	4b3d      	ldr	r3, [pc, #244]	; (80021bc <RCCEx_PLLSAI2_Config+0xf8>)
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	f012 0f03 	tst.w	r2, #3
{
 80020ce:	4605      	mov	r5, r0
 80020d0:	460e      	mov	r6, r1
 80020d2:	461c      	mov	r4, r3
 80020d4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020d6:	d028      	beq.n	800212a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	f002 0203 	and.w	r2, r2, #3
 80020de:	4282      	cmp	r2, r0
 80020e0:	d13a      	bne.n	8002158 <RCCEx_PLLSAI2_Config+0x94>
       ||
 80020e2:	2a00      	cmp	r2, #0
 80020e4:	d038      	beq.n	8002158 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80020e6:	68db      	ldr	r3, [r3, #12]
       ||
 80020e8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80020ea:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80020ee:	3301      	adds	r3, #1
       ||
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d131      	bne.n	8002158 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020fa:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020fc:	f7fe fbb2 	bl	8000864 <HAL_GetTick>
 8002100:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != RESET)
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	009a      	lsls	r2, r3, #2
 8002106:	d430      	bmi.n	800216a <RCCEx_PLLSAI2_Config+0xa6>
 8002108:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800210a:	2e00      	cmp	r6, #0
 800210c:	d034      	beq.n	8002178 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800210e:	6963      	ldr	r3, [r4, #20]
 8002110:	6929      	ldr	r1, [r5, #16]
 8002112:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002116:	0849      	lsrs	r1, r1, #1
 8002118:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800211c:	3901      	subs	r1, #1
 800211e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002122:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002126:	6163      	str	r3, [r4, #20]
 8002128:	e032      	b.n	8002190 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800212a:	2802      	cmp	r0, #2
 800212c:	d010      	beq.n	8002150 <RCCEx_PLLSAI2_Config+0x8c>
 800212e:	2803      	cmp	r0, #3
 8002130:	d014      	beq.n	800215c <RCCEx_PLLSAI2_Config+0x98>
 8002132:	2801      	cmp	r0, #1
 8002134:	d110      	bne.n	8002158 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	079f      	lsls	r7, r3, #30
 800213a:	d538      	bpl.n	80021ae <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800213c:	68e3      	ldr	r3, [r4, #12]
 800213e:	686a      	ldr	r2, [r5, #4]
 8002140:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002144:	3a01      	subs	r2, #1
 8002146:	4318      	orrs	r0, r3
 8002148:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800214c:	60e0      	str	r0, [r4, #12]
 800214e:	e7d1      	b.n	80020f4 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002156:	d1f1      	bne.n	800213c <RCCEx_PLLSAI2_Config+0x78>
 8002158:	2001      	movs	r0, #1
 800215a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	0391      	lsls	r1, r2, #14
 8002160:	d4ec      	bmi.n	800213c <RCCEx_PLLSAI2_Config+0x78>
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002168:	e7f5      	b.n	8002156 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800216a:	f7fe fb7b 	bl	8000864 <HAL_GetTick>
 800216e:	1bc0      	subs	r0, r0, r7
 8002170:	2802      	cmp	r0, #2
 8002172:	d9c6      	bls.n	8002102 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002174:	2003      	movs	r0, #3
 8002176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002178:	6962      	ldr	r2, [r4, #20]
 800217a:	68eb      	ldr	r3, [r5, #12]
 800217c:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002180:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002184:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800218e:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002196:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7fe fb64 	bl	8000864 <HAL_GetTick>
 800219c:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	d505      	bpl.n	80021b0 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80021a4:	6963      	ldr	r3, [r4, #20]
 80021a6:	696a      	ldr	r2, [r5, #20]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	6163      	str	r3, [r4, #20]
 80021ac:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80021ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80021b0:	f7fe fb58 	bl	8000864 <HAL_GetTick>
 80021b4:	1b80      	subs	r0, r0, r6
 80021b6:	2802      	cmp	r0, #2
 80021b8:	d9f1      	bls.n	800219e <RCCEx_PLLSAI2_Config+0xda>
 80021ba:	e7db      	b.n	8002174 <RCCEx_PLLSAI2_Config+0xb0>
 80021bc:	40021000 	.word	0x40021000

080021c0 <HAL_RCCEx_PeriphCLKConfig>:
{
 80021c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021c4:	6806      	ldr	r6, [r0, #0]
 80021c6:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 80021ca:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021cc:	d024      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80021ce:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80021d0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80021d4:	d02c      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x70>
 80021d6:	d802      	bhi.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80021d8:	b1c1      	cbz	r1, 800220c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 80021da:	2601      	movs	r6, #1
 80021dc:	e01c      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 80021de:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80021e2:	d00d      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80021e4:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80021e8:	d1f7      	bne.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021ea:	4a53      	ldr	r2, [pc, #332]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80021ec:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80021ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021f2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80021f6:	430b      	orrs	r3, r1
 80021f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80021fc:	2600      	movs	r6, #0
 80021fe:	e00b      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002200:	4a4d      	ldr	r2, [pc, #308]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002202:	68d3      	ldr	r3, [r2, #12]
 8002204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002208:	60d3      	str	r3, [r2, #12]
      break;
 800220a:	e7ee      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800220c:	3004      	adds	r0, #4
 800220e:	f7ff fecb 	bl	8001fa8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002212:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002214:	2800      	cmp	r0, #0
 8002216:	d0e8      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	04d8      	lsls	r0, r3, #19
 800221c:	d506      	bpl.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800221e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002220:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002224:	d07c      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002226:	d808      	bhi.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002228:	b1a9      	cbz	r1, 8002256 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800222a:	2601      	movs	r6, #1
 800222c:	4635      	mov	r5, r6
 800222e:	e021      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002230:	2100      	movs	r1, #0
 8002232:	3020      	adds	r0, #32
 8002234:	f7ff ff46 	bl	80020c4 <RCCEx_PLLSAI2_Config>
 8002238:	e7eb      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800223a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800223e:	d004      	beq.n	800224a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002240:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002244:	d1f1      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002246:	4635      	mov	r5, r6
 8002248:	e009      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800224a:	4a3b      	ldr	r2, [pc, #236]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800224c:	68d3      	ldr	r3, [r2, #12]
 800224e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002252:	60d3      	str	r3, [r2, #12]
 8002254:	e7f7      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002256:	1d20      	adds	r0, r4, #4
 8002258:	f7ff fea6 	bl	8001fa8 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800225c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800225e:	2d00      	cmp	r5, #0
 8002260:	d164      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002262:	4a35      	ldr	r2, [pc, #212]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002264:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002266:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800226a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800226e:	430b      	orrs	r3, r1
 8002270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	0399      	lsls	r1, r3, #14
 8002278:	f140 815b 	bpl.w	8002532 <HAL_RCCEx_PeriphCLKConfig+0x372>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227c:	4f2e      	ldr	r7, [pc, #184]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800227e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002280:	00da      	lsls	r2, r3, #3
 8002282:	d455      	bmi.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228a:	65bb      	str	r3, [r7, #88]	; 0x58
 800228c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002296:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800229a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800233c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800229e:	f8d9 3000 	ldr.w	r3, [r9]
 80022a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a6:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80022aa:	f7fe fadb 	bl	8000864 <HAL_GetTick>
 80022ae:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 80022b0:	f8d9 3000 	ldr.w	r3, [r9]
 80022b4:	05db      	lsls	r3, r3, #23
 80022b6:	d543      	bpl.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x180>
    if(ret == HAL_OK)
 80022b8:	2d00      	cmp	r5, #0
 80022ba:	d148      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x18e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022c0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80022c4:	d015      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x132>
 80022c6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d011      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80022d2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80022d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022de:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80022ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022f2:	07d8      	lsls	r0, r3, #31
 80022f4:	d509      	bpl.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x14a>
        tickstart = HAL_GetTick();
 80022f6:	f7fe fab5 	bl	8000864 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80022fe:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8002300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002304:	0799      	lsls	r1, r3, #30
 8002306:	f140 810d 	bpl.w	8002524 <HAL_RCCEx_PeriphCLKConfig+0x364>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800230a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800230e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800231c:	4635      	mov	r5, r6
 800231e:	e016      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x18e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002320:	2100      	movs	r1, #0
 8002322:	f104 0020 	add.w	r0, r4, #32
 8002326:	f7ff fecd 	bl	80020c4 <RCCEx_PLLSAI2_Config>
 800232a:	e797      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800232c:	462e      	mov	r6, r5
 800232e:	e7a1      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 8002330:	f04f 0800 	mov.w	r8, #0
 8002334:	e7b1      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002340:	f7fe fa90 	bl	8000864 <HAL_GetTick>
 8002344:	eba0 000a 	sub.w	r0, r0, sl
 8002348:	2802      	cmp	r0, #2
 800234a:	d9b1      	bls.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 800234c:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800234e:	f1b8 0f00 	cmp.w	r8, #0
 8002352:	d003      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235a:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	07da      	lsls	r2, r3, #31
 8002360:	d508      	bpl.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002362:	498a      	ldr	r1, [pc, #552]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002364:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002366:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800236a:	f022 0203 	bic.w	r2, r2, #3
 800236e:	4302      	orrs	r2, r0
 8002370:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002374:	079f      	lsls	r7, r3, #30
 8002376:	d508      	bpl.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002378:	4984      	ldr	r1, [pc, #528]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800237a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800237c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002380:	f022 020c 	bic.w	r2, r2, #12
 8002384:	4302      	orrs	r2, r0
 8002386:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800238a:	075e      	lsls	r6, r3, #29
 800238c:	d508      	bpl.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800238e:	497f      	ldr	r1, [pc, #508]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002390:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002392:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002396:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800239a:	4302      	orrs	r2, r0
 800239c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023a0:	0718      	lsls	r0, r3, #28
 80023a2:	d508      	bpl.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023a4:	4979      	ldr	r1, [pc, #484]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80023a6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80023a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80023ac:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80023b0:	4302      	orrs	r2, r0
 80023b2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023b6:	06d9      	lsls	r1, r3, #27
 80023b8:	d508      	bpl.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ba:	4974      	ldr	r1, [pc, #464]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80023bc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80023be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80023c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80023c6:	4302      	orrs	r2, r0
 80023c8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023cc:	069a      	lsls	r2, r3, #26
 80023ce:	d508      	bpl.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023d0:	496e      	ldr	r1, [pc, #440]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80023d2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80023d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80023d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80023dc:	4302      	orrs	r2, r0
 80023de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023e2:	059f      	lsls	r7, r3, #22
 80023e4:	d508      	bpl.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023e6:	4969      	ldr	r1, [pc, #420]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80023e8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80023ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80023ee:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80023f2:	4302      	orrs	r2, r0
 80023f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023f8:	055e      	lsls	r6, r3, #21
 80023fa:	d508      	bpl.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x24e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023fc:	4963      	ldr	r1, [pc, #396]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80023fe:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002400:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002404:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002408:	4302      	orrs	r2, r0
 800240a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800240e:	0658      	lsls	r0, r3, #25
 8002410:	d508      	bpl.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002412:	495e      	ldr	r1, [pc, #376]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002414:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002416:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800241a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800241e:	4302      	orrs	r2, r0
 8002420:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002424:	0619      	lsls	r1, r3, #24
 8002426:	d508      	bpl.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002428:	4958      	ldr	r1, [pc, #352]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800242a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800242c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002430:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002434:	4302      	orrs	r2, r0
 8002436:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800243a:	05da      	lsls	r2, r3, #23
 800243c:	d508      	bpl.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x290>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800243e:	4953      	ldr	r1, [pc, #332]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002442:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002446:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800244a:	4302      	orrs	r2, r0
 800244c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002450:	049b      	lsls	r3, r3, #18
 8002452:	d50f      	bpl.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002454:	4a4d      	ldr	r2, [pc, #308]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002456:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002458:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800245c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002460:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002462:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002466:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800246a:	d164      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x376>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800246c:	68d3      	ldr	r3, [r2, #12]
 800246e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002472:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	031f      	lsls	r7, r3, #12
 8002478:	d50f      	bpl.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800247a:	4a44      	ldr	r2, [pc, #272]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800247c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800247e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002482:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002486:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002488:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800248c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002490:	d15c      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002492:	68d3      	ldr	r3, [r2, #12]
 8002494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002498:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	035e      	lsls	r6, r3, #13
 800249e:	d50f      	bpl.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024a0:	4a3a      	ldr	r2, [pc, #232]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80024a2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80024a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80024a8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80024ac:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024ae:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024b6:	d154      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b8:	68d3      	ldr	r3, [r2, #12]
 80024ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024be:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	0458      	lsls	r0, r3, #17
 80024c4:	d512      	bpl.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024c6:	4931      	ldr	r1, [pc, #196]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80024c8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80024ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80024ce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80024d2:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024d4:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024dc:	d14c      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024de:	2102      	movs	r1, #2
 80024e0:	1d20      	adds	r0, r4, #4
 80024e2:	f7ff fd61 	bl	8001fa8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80024e6:	2800      	cmp	r0, #0
 80024e8:	bf18      	it	ne
 80024ea:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80024ec:	6822      	ldr	r2, [r4, #0]
 80024ee:	0411      	lsls	r1, r2, #16
 80024f0:	d508      	bpl.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024f2:	4926      	ldr	r1, [pc, #152]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80024f4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80024f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80024fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024fe:	4303      	orrs	r3, r0
 8002500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002504:	03d3      	lsls	r3, r2, #15
 8002506:	d509      	bpl.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x35c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002508:	4a20      	ldr	r2, [pc, #128]	; (800258c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800250a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800250e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002512:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002516:	430b      	orrs	r3, r1
 8002518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800251c:	4628      	mov	r0, r5
 800251e:	b002      	add	sp, #8
 8002520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f7fe f99e 	bl	8000864 <HAL_GetTick>
 8002528:	1b40      	subs	r0, r0, r5
 800252a:	4548      	cmp	r0, r9
 800252c:	f67f aee8 	bls.w	8002300 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002530:	e70c      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002532:	4635      	mov	r5, r6
 8002534:	e712      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002536:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800253a:	d19b      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800253c:	2101      	movs	r1, #1
 800253e:	1d20      	adds	r0, r4, #4
 8002540:	f7ff fd32 	bl	8001fa8 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002544:	2800      	cmp	r0, #0
 8002546:	bf18      	it	ne
 8002548:	4605      	movne	r5, r0
 800254a:	e793      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800254c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002550:	d1a3      	bne.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002552:	2101      	movs	r1, #1
 8002554:	1d20      	adds	r0, r4, #4
 8002556:	f7ff fd27 	bl	8001fa8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800255a:	2800      	cmp	r0, #0
 800255c:	bf18      	it	ne
 800255e:	4605      	movne	r5, r0
 8002560:	e79b      	b.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002562:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002566:	d1ab      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002568:	2101      	movs	r1, #1
 800256a:	1d20      	adds	r0, r4, #4
 800256c:	f7ff fd1c 	bl	8001fa8 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002570:	2800      	cmp	r0, #0
 8002572:	bf18      	it	ne
 8002574:	4605      	movne	r5, r0
 8002576:	e7a3      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x300>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002578:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800257c:	d1b6      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800257e:	2102      	movs	r1, #2
 8002580:	f104 0020 	add.w	r0, r4, #32
 8002584:	f7ff fd9e 	bl	80020c4 <RCCEx_PLLSAI2_Config>
 8002588:	e7ad      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000

08002590 <HAL_RCCEx_GetPeriphCLKFreq>:
  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8002590:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 8002594:	4ac2      	ldr	r2, [pc, #776]	; (80028a0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8002596:	d125      	bne.n	80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8002598:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800259c:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80025a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a4:	d108      	bne.n	80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
      else if ((srcclk == RCC_LPTIM2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80025a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        frequency = LSE_VALUE;
 80025aa:	f013 0f02 	tst.w	r3, #2
 80025ae:	bf0c      	ite	eq
 80025b0:	2000      	moveq	r0, #0
 80025b2:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80025b6:	4770      	bx	lr
    else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80025b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025bc:	d108      	bne.n	80025d0 <HAL_RCCEx_GetPeriphCLKFreq+0x40>
      else if((srcclk == RCC_LPTIM2CLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80025be:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
        frequency = LSI_VALUE;
 80025c2:	f013 0f02 	tst.w	r3, #2
 80025c6:	bf0c      	ite	eq
 80025c8:	2000      	moveq	r0, #0
 80025ca:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 80025ce:	4770      	bx	lr
    else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIV32) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80025d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025d4:	d134      	bne.n	8002640 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 80025d6:	6813      	ldr	r3, [r2, #0]
      frequency = HSE_VALUE / 32U;
 80025d8:	48b2      	ldr	r0, [pc, #712]	; (80028a4 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 80025da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        frequency = HSI_VALUE;
 80025de:	bf08      	it	eq
 80025e0:	2000      	moveq	r0, #0
 80025e2:	4770      	bx	lr
    if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)        /* MSI ? */
 80025e4:	68d3      	ldr	r3, [r2, #12]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d12a      	bne.n	8002644 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80025ee:	6811      	ldr	r1, [r2, #0]
 80025f0:	f011 0102 	ands.w	r1, r1, #2
 80025f4:	d00d      	beq.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80025f6:	6813      	ldr	r3, [r2, #0]
 80025f8:	0719      	lsls	r1, r3, #28
 80025fa:	bf4c      	ite	mi
 80025fc:	6813      	ldrmi	r3, [r2, #0]
 80025fe:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	; 0x94
 8002602:	49a9      	ldr	r1, [pc, #676]	; (80028a8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8002604:	bf4c      	ite	mi
 8002606:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 800260a:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 800260e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002612:	68d3      	ldr	r3, [r2, #12]
    switch(PeriphClk)
 8002614:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8002618:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800261c:	f103 0301 	add.w	r3, r3, #1
 8002620:	fbb1 f1f3 	udiv	r1, r1, r3
    switch(PeriphClk)
 8002624:	f000 81a5 	beq.w	8002972 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8002628:	d861      	bhi.n	80026ee <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800262a:	2810      	cmp	r0, #16
 800262c:	f000 8155 	beq.w	80028da <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8002630:	d833      	bhi.n	800269a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
 8002632:	2802      	cmp	r0, #2
 8002634:	f000 812d 	beq.w	8002892 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8002638:	d81c      	bhi.n	8002674 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800263a:	2801      	cmp	r0, #1
 800263c:	f000 8116 	beq.w	800286c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>
      frequency = 0U;
 8002640:	2000      	movs	r0, #0
 8002642:	4770      	bx	lr
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)   /* HSI ? */
 8002644:	68d3      	ldr	r3, [r2, #12]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d106      	bne.n	800265c <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800264e:	6813      	ldr	r3, [r2, #0]
        pllvco = HSI_VALUE;
 8002650:	4996      	ldr	r1, [pc, #600]	; (80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 8002652:	f413 6f80 	tst.w	r3, #1024	; 0x400
        pllvco = HSE_VALUE;
 8002656:	bf08      	it	eq
 8002658:	2100      	moveq	r1, #0
 800265a:	e7da      	b.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
    else if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)   /* HSE ? */
 800265c:	68d3      	ldr	r3, [r2, #12]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b03      	cmp	r3, #3
 8002664:	d104      	bne.n	8002670 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002666:	6813      	ldr	r3, [r2, #0]
        pllvco = HSE_VALUE;
 8002668:	4991      	ldr	r1, [pc, #580]	; (80028b0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 800266a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800266e:	e7f2      	b.n	8002656 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
        pllvco = 0U;
 8002670:	2100      	movs	r1, #0
 8002672:	e7ce      	b.n	8002612 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
    switch(PeriphClk)
 8002674:	2804      	cmp	r0, #4
 8002676:	f000 8125 	beq.w	80028c4 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 800267a:	2808      	cmp	r0, #8
 800267c:	d1e0      	bne.n	8002640 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800267e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8002682:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
 8002686:	f000 8109 	beq.w	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
      else if(srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	f000 80f7 	beq.w	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
      else if((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8002690:	2b80      	cmp	r3, #128	; 0x80
 8002692:	f000 80f9 	beq.w	8002888 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
      else if((srcclk == RCC_UART4CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8002696:	2bc0      	cmp	r3, #192	; 0xc0
 8002698:	e111      	b.n	80028be <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
    switch(PeriphClk)
 800269a:	2840      	cmp	r0, #64	; 0x40
 800269c:	f000 8151 	beq.w	8002942 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80026a0:	d812      	bhi.n	80026c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80026a2:	2820      	cmp	r0, #32
 80026a4:	d1cc      	bne.n	8002640 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
      srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80026a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_LPUART1CLKSOURCE_PCLK1)
 80026aa:	f413 6340 	ands.w	r3, r3, #3072	; 0xc00
 80026ae:	f000 80f5 	beq.w	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
      else if(srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80026b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b6:	f000 80e2 	beq.w	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
      else if((srcclk == RCC_LPUART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80026ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026be:	f000 80e3 	beq.w	8002888 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
      else if((srcclk == RCC_LPUART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80026c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80026c6:	e0fa      	b.n	80028be <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
    switch(PeriphClk)
 80026c8:	2880      	cmp	r0, #128	; 0x80
 80026ca:	f000 8147 	beq.w	800295c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80026ce:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80026d2:	d1b5      	bne.n	8002640 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80026d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_I2C3CLKSOURCE_PCLK1)
 80026d8:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 80026dc:	f000 80de 	beq.w	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
      else if(srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 80026e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e4:	f000 80cb 	beq.w	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
      else if((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80026e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026ec:	e133      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    switch(PeriphClk)
 80026ee:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80026f2:	f000 8100 	beq.w	80028f6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80026f6:	d838      	bhi.n	800276a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
 80026f8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80026fc:	d054      	beq.n	80027a8 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 80026fe:	d813      	bhi.n	8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
 8002700:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8002704:	d19c      	bne.n	8002640 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
      srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002706:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800270a:	f413 1340 	ands.w	r3, r3, #3145728	; 0x300000
 800270e:	f000 80c5 	beq.w	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
      else if((srcclk == RCC_LPTIM2CLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002716:	f43f af52 	beq.w	80025be <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      else if((srcclk == RCC_LPTIM2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800271a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800271e:	f000 80b3 	beq.w	8002888 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
      else if ((srcclk == RCC_LPTIM2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8002722:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002726:	e0ca      	b.n	80028be <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
    switch(PeriphClk)
 8002728:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800272c:	d032      	beq.n	8002794 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
 800272e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002732:	d185      	bne.n	8002640 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
      srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8002734:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002738:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
      if(srcclk == RCC_CCIPR_CLK48SEL)   /* MSI ? */
 800273c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002740:	d16c      	bne.n	800281c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002742:	6810      	ldr	r0, [r2, #0]
 8002744:	f010 0002 	ands.w	r0, r0, #2
 8002748:	f000 8123 	beq.w	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800274c:	6813      	ldr	r3, [r2, #0]
 800274e:	0719      	lsls	r1, r3, #28
 8002750:	bf4c      	ite	mi
 8002752:	6813      	ldrmi	r3, [r2, #0]
 8002754:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	; 0x94
 8002758:	4a53      	ldr	r2, [pc, #332]	; (80028a8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 800275a:	bf4c      	ite	mi
 800275c:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
 8002760:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
 8002764:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002768:	4770      	bx	lr
    switch(PeriphClk)
 800276a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800276e:	f000 80e3 	beq.w	8002938 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
 8002772:	d809      	bhi.n	8002788 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
 8002774:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002778:	f47f af62 	bne.w	8002640 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
      srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800277c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_SWPMI1CLKSOURCE_PCLK1)
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	f140 808b 	bpl.w	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8002786:	e07f      	b.n	8002888 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
    switch(PeriphClk)
 8002788:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800278c:	d0d2      	beq.n	8002734 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800278e:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8002792:	e7ce      	b.n	8002732 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8002794:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8002798:	f000 7040 	and.w	r0, r0, #50331648	; 0x3000000
        if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800279c:	f1b0 7f40 	cmp.w	r0, #50331648	; 0x3000000
 80027a0:	d10c      	bne.n	80027bc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80027a2:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80027a6:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80027a8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 80027ac:	f400 0040 	and.w	r0, r0, #12582912	; 0xc00000
        if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80027b0:	f5b0 0f40 	cmp.w	r0, #12582912	; 0xc00000
 80027b4:	d0f5      	beq.n	80027a2 <HAL_RCCEx_GetPeriphCLKFreq+0x212>
        if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80027b6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80027ba:	e001      	b.n	80027c0 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80027bc:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80027c0:	d111      	bne.n	80027e6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
          if(__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != RESET)
 80027c2:	68d0      	ldr	r0, [r2, #12]
 80027c4:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 80027c8:	f000 80e3 	beq.w	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80027cc:	68d0      	ldr	r0, [r2, #12]
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != RESET)
 80027ce:	68d3      	ldr	r3, [r2, #12]
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80027d0:	f3c0 2006 	ubfx	r0, r0, #8, #7
                pllp = 7U;
 80027d4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80027d8:	bf14      	ite	ne
 80027da:	2311      	movne	r3, #17
 80027dc:	2307      	moveq	r3, #7
            frequency = (pllvco * plln) / pllp;
 80027de:	4348      	muls	r0, r1
 80027e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80027e4:	4770      	bx	lr
        else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80027e6:	b940      	cbnz	r0, 80027fa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
          if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != RESET)
 80027e8:	6913      	ldr	r3, [r2, #16]
 80027ea:	03db      	lsls	r3, r3, #15
 80027ec:	f140 80d1 	bpl.w	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80027f0:	6910      	ldr	r0, [r2, #16]
              if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != RESET)
 80027f2:	6913      	ldr	r3, [r2, #16]
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80027f4:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80027f8:	e7ec      	b.n	80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
        else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80027fa:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 80027fe:	d003      	beq.n	8002808 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
 8002800:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002804:	f47f af1c 	bne.w	8002640 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
          if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != RESET)
 8002808:	6950      	ldr	r0, [r2, #20]
 800280a:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 800280e:	f000 80c0 	beq.w	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8002812:	6950      	ldr	r0, [r2, #20]
              if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != RESET)
 8002814:	6953      	ldr	r3, [r2, #20]
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8002816:	f3c0 2006 	ubfx	r0, r0, #8, #7
 800281a:	e7db      	b.n	80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
      else if(srcclk == RCC_CCIPR_CLK48SEL_1)  /* PLL ? */
 800281c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002820:	d113      	bne.n	800284a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8002822:	6810      	ldr	r0, [r2, #0]
 8002824:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8002828:	f000 80b3 	beq.w	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800282c:	68d0      	ldr	r0, [r2, #12]
 800282e:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8002832:	f000 80ae 	beq.w	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8002836:	68d0      	ldr	r0, [r2, #12]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8002838:	68d3      	ldr	r3, [r2, #12]
          plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800283a:	f3c0 2006 	ubfx	r0, r0, #8, #7
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 800283e:	4348      	muls	r0, r1
 8002840:	f3c3 5341 	ubfx	r3, r3, #21, #2
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 8002844:	3301      	adds	r3, #1
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	e7ca      	b.n	80027e0 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
      else if(srcclk == RCC_CCIPR_CLK48SEL_0)  /* PLLSAI1 ? */
 800284a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800284e:	f47f aef7 	bne.w	8002640 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8002852:	6810      	ldr	r0, [r2, #0]
 8002854:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8002858:	f000 809b 	beq.w	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 800285c:	6910      	ldr	r0, [r2, #16]
 800285e:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8002862:	f000 8096 	beq.w	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
          plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002866:	6910      	ldr	r0, [r2, #16]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8002868:	6913      	ldr	r3, [r2, #16]
 800286a:	e7e6      	b.n	800283a <HAL_RCCEx_GetPeriphCLKFreq+0x2aa>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800286c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8002870:	f013 0303 	ands.w	r3, r3, #3
 8002874:	d101      	bne.n	800287a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        frequency = HAL_RCC_GetPCLK2Freq();
 8002876:	f7ff bb87 	b.w	8001f88 <HAL_RCC_GetPCLK2Freq>
      else if(srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
        frequency = HAL_RCC_GetSysClockFreq();
 800287e:	f7ff b823 	b.w	80018c8 <HAL_RCC_GetSysClockFreq>
      else if((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8002882:	2b02      	cmp	r3, #2
 8002884:	f47f ae8f 	bne.w	80025a6 <HAL_RCCEx_GetPeriphCLKFreq+0x16>
      else if((srcclk == RCC_SWPMI1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8002888:	6813      	ldr	r3, [r2, #0]
        frequency = HSI_VALUE;
 800288a:	4808      	ldr	r0, [pc, #32]	; (80028ac <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 800288c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002890:	e6a5      	b.n	80025de <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002892:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8002896:	f013 030c 	ands.w	r3, r3, #12
 800289a:	d10b      	bne.n	80028b4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        frequency = HAL_RCC_GetPCLK1Freq();
 800289c:	f7ff bb64 	b.w	8001f68 <HAL_RCC_GetPCLK1Freq>
 80028a0:	40021000 	.word	0x40021000
 80028a4:	0003d090 	.word	0x0003d090
 80028a8:	08003288 	.word	0x08003288
 80028ac:	00f42400 	.word	0x00f42400
 80028b0:	007a1200 	.word	0x007a1200
      else if(srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d0e2      	beq.n	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
      else if((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d0e5      	beq.n	8002888 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
      else if((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80028bc:	2b0c      	cmp	r3, #12
      else if ((srcclk == RCC_LPTIM2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80028be:	f47f aebf 	bne.w	8002640 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 80028c2:	e670      	b.n	80025a6 <HAL_RCCEx_GetPeriphCLKFreq+0x16>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80028c4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80028c8:	f013 0330 	ands.w	r3, r3, #48	; 0x30
 80028cc:	d0e6      	beq.n	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
      else if(srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d0d5      	beq.n	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
      else if((srcclk == RCC_USART3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d0d8      	beq.n	8002888 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
      else if((srcclk == RCC_USART3CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80028d6:	2b30      	cmp	r3, #48	; 0x30
 80028d8:	e7f1      	b.n	80028be <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80028da:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80028de:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80028e2:	d0db      	beq.n	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
      else if(srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80028e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e8:	d0c9      	beq.n	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
      else if((srcclk == RCC_UART5CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80028ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028ee:	d0cb      	beq.n	8002888 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
      else if((srcclk == RCC_UART5CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80028f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028f4:	e7e3      	b.n	80028be <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
      srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80028f6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80028fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      if(srcclk == RCC_ADCCLKSOURCE_SYSCLK)
 80028fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002902:	d0bc      	beq.n	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
      else if(srcclk == RCC_ADCCLKSOURCE_PLLSAI1)
 8002904:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002908:	d10b      	bne.n	8002922 <HAL_RCCEx_GetPeriphCLKFreq+0x392>
        if(__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != RESET)
 800290a:	6910      	ldr	r0, [r2, #16]
 800290c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002910:	d03f      	beq.n	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
          plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8002912:	6910      	ldr	r0, [r2, #16]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8002914:	6913      	ldr	r3, [r2, #16]
          plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8002916:	f3c0 2006 	ubfx	r0, r0, #8, #7
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 800291a:	4348      	muls	r0, r1
 800291c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002920:	e790      	b.n	8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
      else if(srcclk == RCC_ADCCLKSOURCE_PLLSAI2)
 8002922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002926:	f47f ae8b 	bne.w	8002640 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
        if(__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != RESET)
 800292a:	6950      	ldr	r0, [r2, #20]
 800292c:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8002930:	d02f      	beq.n	8002992 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
          plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8002932:	6950      	ldr	r0, [r2, #20]
          frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U);
 8002934:	6953      	ldr	r3, [r2, #20]
 8002936:	e7ee      	b.n	8002916 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
      srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8002938:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800293c:	2b00      	cmp	r3, #0
 800293e:	da9a      	bge.n	8002876 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8002940:	e79d      	b.n	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002942:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8002946:	f413 5340 	ands.w	r3, r3, #12288	; 0x3000
 800294a:	d0a7      	beq.n	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
      else if(srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800294c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002950:	d095      	beq.n	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
      else if((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8002952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      else if((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8002956:	f47f ae73 	bne.w	8002640 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
 800295a:	e795      	b.n	8002888 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800295c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8002960:	f413 4340 	ands.w	r3, r3, #49152	; 0xc000
 8002964:	d09a      	beq.n	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
      else if(srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8002966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800296a:	d088      	beq.n	800287e <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
      else if((srcclk == RCC_I2C2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800296c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002970:	e7f1      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
      srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002972:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      if(srcclk == RCC_LPTIM1CLKSOURCE_PCLK1)
 8002976:	f413 2340 	ands.w	r3, r3, #786432	; 0xc0000
 800297a:	d08f      	beq.n	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
      else if((srcclk == RCC_LPTIM1CLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800297c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002980:	f43f ae1d 	beq.w	80025be <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
      else if((srcclk == RCC_LPTIM1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8002984:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002988:	f43f af7e 	beq.w	8002888 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>
      else if ((srcclk == RCC_LPTIM1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 800298c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002990:	e795      	b.n	80028be <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
}
 8002992:	4770      	bx	lr

08002994 <SAI_InterruptFlag>:
  if(mode == SAI_MODE_IT)
  {
    tmpIT|= SAI_IT_FREQ;
  }
  
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8002994:	6b02      	ldr	r2, [r0, #48]	; 0x30
  if(mode == SAI_MODE_IT)
 8002996:	2901      	cmp	r1, #1
    tmpIT|= SAI_IT_FREQ;
 8002998:	bf14      	ite	ne
 800299a:	2301      	movne	r3, #1
 800299c:	2309      	moveq	r3, #9
  if((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800299e:	2a08      	cmp	r2, #8
 80029a0:	6842      	ldr	r2, [r0, #4]
 80029a2:	d105      	bne.n	80029b0 <SAI_InterruptFlag+0x1c>
    ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80029a4:	f022 0102 	bic.w	r1, r2, #2
 80029a8:	2901      	cmp	r1, #1
  {
    tmpIT|= SAI_IT_CNRDY;
 80029aa:	bf08      	it	eq
 80029ac:	f043 0310 	orreq.w	r3, r3, #16
  }
  
  if((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80029b0:	3a02      	subs	r2, #2
 80029b2:	2a01      	cmp	r2, #1
  {
    tmpIT|= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80029b4:	bf94      	ite	ls
 80029b6:	f043 0060 	orrls.w	r0, r3, #96	; 0x60
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT|= SAI_IT_WCKCFG;
 80029ba:	f043 0004 	orrhi.w	r0, r3, #4
  }
  return tmpIT;
}
 80029be:	4770      	bx	lr

080029c0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80029c0:	b538      	push	{r3, r4, r5, lr}
 80029c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80029c4:	f7fd ff4e 	bl	8000864 <HAL_GetTick>
  HAL_StatusTypeDef status = HAL_OK;
  
  __HAL_SAI_DISABLE(hsai);
 80029c8:	6822      	ldr	r2, [r4, #0]
 80029ca:	6813      	ldr	r3, [r2, #0]
 80029cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  uint32_t tickstart = HAL_GetTick();
 80029d0:	4605      	mov	r5, r0
  __HAL_SAI_DISABLE(hsai);
 80029d2:	6013      	str	r3, [r2, #0]
  while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET)
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 80029dc:	d100      	bne.n	80029e0 <SAI_Disable+0x20>
      
      return HAL_TIMEOUT;
    }
  }
  return status;
}
 80029de:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) > SAI_DEFAULT_TIMEOUT)
 80029e0:	f7fd ff40 	bl	8000864 <HAL_GetTick>
 80029e4:	1b40      	subs	r0, r0, r5
 80029e6:	2804      	cmp	r0, #4
 80029e8:	d9f4      	bls.n	80029d4 <SAI_Disable+0x14>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80029ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80029ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 80029f6:	2003      	movs	r0, #3
 80029f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080029fc <HAL_SAI_Init>:
{
 80029fc:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 80029fe:	4604      	mov	r4, r0
 8002a00:	2800      	cmp	r0, #0
 8002a02:	f000 80c5 	beq.w	8002b90 <HAL_SAI_Init+0x194>
  if(hsai->State == HAL_SAI_STATE_RESET)
 8002a06:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8002a0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a0e:	b91b      	cbnz	r3, 8002a18 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 8002a10:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8002a14:	f000 fb74 	bl	8003100 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f7ff ffce 	bl	80029c0 <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8002a24:	68e3      	ldr	r3, [r4, #12]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	f000 80a1 	beq.w	8002b6e <HAL_SAI_Init+0x172>
  uint32_t tmpregisterGCR = 0;
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	bf0c      	ite	eq
 8002a30:	2320      	moveq	r3, #32
 8002a32:	2300      	movne	r3, #0
  switch(hsai->Init.Synchro)
 8002a34:	68a2      	ldr	r2, [r4, #8]
 8002a36:	2a02      	cmp	r2, #2
 8002a38:	f000 809d 	beq.w	8002b76 <HAL_SAI_Init+0x17a>
 8002a3c:	2a03      	cmp	r2, #3
 8002a3e:	f000 8098 	beq.w	8002b72 <HAL_SAI_Init+0x176>
  uint32_t syncen_bits = 0;
 8002a42:	2a01      	cmp	r2, #1
 8002a44:	bf0c      	ite	eq
 8002a46:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 8002a4a:	2500      	movne	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8002a4c:	6822      	ldr	r2, [r4, #0]
 8002a4e:	4951      	ldr	r1, [pc, #324]	; (8002b94 <HAL_SAI_Init+0x198>)
 8002a50:	428a      	cmp	r2, r1
 8002a52:	d003      	beq.n	8002a5c <HAL_SAI_Init+0x60>
 8002a54:	4850      	ldr	r0, [pc, #320]	; (8002b98 <HAL_SAI_Init+0x19c>)
 8002a56:	4282      	cmp	r2, r0
 8002a58:	f040 8090 	bne.w	8002b7c <HAL_SAI_Init+0x180>
    SAI1->GCR = tmpregisterGCR;
 8002a5c:	484f      	ldr	r0, [pc, #316]	; (8002b9c <HAL_SAI_Init+0x1a0>)
    SAI2->GCR = tmpregisterGCR;
 8002a5e:	6003      	str	r3, [r0, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8002a60:	69e3      	ldr	r3, [r4, #28]
 8002a62:	b313      	cbz	r3, 8002aaa <HAL_SAI_Init+0xae>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8002a64:	428a      	cmp	r2, r1
 8002a66:	d003      	beq.n	8002a70 <HAL_SAI_Init+0x74>
 8002a68:	4b4b      	ldr	r3, [pc, #300]	; (8002b98 <HAL_SAI_Init+0x19c>)
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	f040 8088 	bne.w	8002b80 <HAL_SAI_Init+0x184>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8002a70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002a74:	f7ff fd8c 	bl	8002590 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	4a49      	ldr	r2, [pc, #292]	; (8002ba0 <HAL_SAI_Init+0x1a4>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d002      	beq.n	8002a86 <HAL_SAI_Init+0x8a>
 8002a80:	3220      	adds	r2, #32
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d103      	bne.n	8002a8e <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8002a86:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002a8a:	f7ff fd81 	bl	8002590 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8002a8e:	69e3      	ldr	r3, [r4, #28]
 8002a90:	220a      	movs	r2, #10
 8002a92:	025b      	lsls	r3, r3, #9
 8002a94:	4350      	muls	r0, r2
 8002a96:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8002a9a:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 8002a9e:	fb02 0013 	mls	r0, r2, r3, r0
 8002aa2:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 8002aa4:	bf08      	it	eq
 8002aa6:	3301      	addeq	r3, #1
 8002aa8:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8002aaa:	6863      	ldr	r3, [r4, #4]
 8002aac:	f033 0202 	bics.w	r2, r3, #2
 8002ab0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002ab2:	d167      	bne.n	8002b84 <HAL_SAI_Init+0x188>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8002ab4:	2a01      	cmp	r2, #1
 8002ab6:	bf14      	ite	ne
 8002ab8:	f44f 7100 	movne.w	r1, #512	; 0x200
 8002abc:	2100      	moveq	r1, #0
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002abe:	6822      	ldr	r2, [r4, #0]
 8002ac0:	4838      	ldr	r0, [pc, #224]	; (8002ba4 <HAL_SAI_Init+0x1a8>)
 8002ac2:	6816      	ldr	r6, [r2, #0]
 8002ac4:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002ac6:	6b26      	ldr	r6, [r4, #48]	; 0x30
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8002ac8:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002aca:	4333      	orrs	r3, r6
 8002acc:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8002ace:	6810      	ldr	r0, [r2, #0]
 8002ad0:	4333      	orrs	r3, r6
 8002ad2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002ad4:	4333      	orrs	r3, r6
 8002ad6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002ad8:	4333      	orrs	r3, r6
 8002ada:	6926      	ldr	r6, [r4, #16]
 8002adc:	4333      	orrs	r3, r6
 8002ade:	6966      	ldr	r6, [r4, #20]
 8002ae0:	4333      	orrs	r3, r6
 8002ae2:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8002ae4:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8002ae6:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 8002aea:	432b      	orrs	r3, r5
 8002aec:	430b      	orrs	r3, r1
 8002aee:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8002af0:	6853      	ldr	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002af2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8002af4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002af8:	f023 030f 	bic.w	r3, r3, #15
 8002afc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8002afe:	69a3      	ldr	r3, [r4, #24]
 8002b00:	6851      	ldr	r1, [r2, #4]
 8002b02:	4303      	orrs	r3, r0
 8002b04:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002b06:	4303      	orrs	r3, r0
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002b0c:	6891      	ldr	r1, [r2, #8]
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <HAL_SAI_Init+0x1ac>)
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002b10:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8002b12:	400b      	ands	r3, r1
 8002b14:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002b16:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002b18:	6891      	ldr	r1, [r2, #8]
 8002b1a:	4303      	orrs	r3, r0
 8002b1c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002b1e:	4303      	orrs	r3, r0
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002b24:	3901      	subs	r1, #1
 8002b26:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8002b28:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002b2a:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8002b2c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b30:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8002b32:	68d3      	ldr	r3, [r2, #12]
 8002b34:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8002b38:	f023 030f 	bic.w	r3, r3, #15
 8002b3c:	041b      	lsls	r3, r3, #16
 8002b3e:	0c1b      	lsrs	r3, r3, #16
 8002b40:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8002b42:	68d1      	ldr	r1, [r2, #12]
 8002b44:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b48:	4303      	orrs	r3, r0
 8002b4a:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8002b4c:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8002b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8002b52:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002b54:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8002b56:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002b5a:	60d3      	str	r3, [r2, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002b5c:	2000      	movs	r0, #0
  hsai->State= HAL_SAI_STATE_READY;
 8002b5e:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002b60:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8002b64:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 8002b68:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  return HAL_OK;
 8002b6c:	bd70      	pop	{r4, r5, r6, pc}
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8002b6e:	2310      	movs	r3, #16
 8002b70:	e760      	b.n	8002a34 <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8002b72:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8002b76:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 8002b7a:	e767      	b.n	8002a4c <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 8002b7c:	480b      	ldr	r0, [pc, #44]	; (8002bac <HAL_SAI_Init+0x1b0>)
 8002b7e:	e76e      	b.n	8002a5e <HAL_SAI_Init+0x62>
    uint32_t freq = 0;
 8002b80:	2000      	movs	r0, #0
 8002b82:	e779      	b.n	8002a78 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8002b84:	2a01      	cmp	r2, #1
 8002b86:	bf14      	ite	ne
 8002b88:	2100      	movne	r1, #0
 8002b8a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8002b8e:	e796      	b.n	8002abe <HAL_SAI_Init+0xc2>
    return HAL_ERROR;
 8002b90:	2001      	movs	r0, #1
}
 8002b92:	bd70      	pop	{r4, r5, r6, pc}
 8002b94:	40015404 	.word	0x40015404
 8002b98:	40015424 	.word	0x40015424
 8002b9c:	40015400 	.word	0x40015400
 8002ba0:	40015804 	.word	0x40015804
 8002ba4:	ff05c010 	.word	0xff05c010
 8002ba8:	fff88000 	.word	0xfff88000
 8002bac:	40015800 	.word	0x40015800

08002bb0 <HAL_SAI_Transmit_DMA>:
{
 8002bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bb4:	4604      	mov	r4, r0
 8002bb6:	4689      	mov	r9, r1
 8002bb8:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8002bba:	f7fd fe53 	bl	8000864 <HAL_GetTick>
 8002bbe:	4607      	mov	r7, r0
  if((pData == NULL) || (Size == 0))
 8002bc0:	f1b9 0f00 	cmp.w	r9, #0
 8002bc4:	d02b      	beq.n	8002c1e <HAL_SAI_Transmit_DMA+0x6e>
 8002bc6:	b355      	cbz	r5, 8002c1e <HAL_SAI_Transmit_DMA+0x6e>
  if(hsai->State == HAL_SAI_STATE_READY)
 8002bc8:	f894 607d 	ldrb.w	r6, [r4, #125]	; 0x7d
 8002bcc:	b2f6      	uxtb	r6, r6
 8002bce:	2e01      	cmp	r6, #1
 8002bd0:	d155      	bne.n	8002c7e <HAL_SAI_Transmit_DMA+0xce>
    __HAL_LOCK(hsai);
 8002bd2:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d051      	beq.n	8002c7e <HAL_SAI_Transmit_DMA+0xce>
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8002bda:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    hsai->XferSize = Size;
 8002bdc:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002be0:	f04f 0800 	mov.w	r8, #0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8002be4:	2312      	movs	r3, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8002be6:	f8c4 8080 	str.w	r8, [r4, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8002bea:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8002bee:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_SAI_Transmit_DMA+0xd4>)
    hsai->XferCount = Size;
 8002bf0:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
    __HAL_LOCK(hsai);
 8002bf4:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
    hsai->pBuffPtr = pData;
 8002bf8:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8002bfc:	6822      	ldr	r2, [r4, #0]
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8002bfe:	6303      	str	r3, [r0, #48]	; 0x30
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8002c00:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_SAI_Transmit_DMA+0xd8>)
 8002c02:	62c3      	str	r3, [r0, #44]	; 0x2c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8002c04:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <HAL_SAI_Transmit_DMA+0xdc>)
 8002c06:	6343      	str	r3, [r0, #52]	; 0x34
    hsai->hdmatx->XferAbortCallback = NULL;
 8002c08:	f8c0 8038 	str.w	r8, [r0, #56]	; 0x38
    if(HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8002c0c:	462b      	mov	r3, r5
 8002c0e:	321c      	adds	r2, #28
 8002c10:	4649      	mov	r1, r9
 8002c12:	f7fe f8cd 	bl	8000db0 <HAL_DMA_Start_IT>
 8002c16:	4605      	mov	r5, r0
 8002c18:	b118      	cbz	r0, 8002c22 <HAL_SAI_Transmit_DMA+0x72>
      __HAL_UNLOCK(hsai);
 8002c1a:	f884 807c 	strb.w	r8, [r4, #124]	; 0x7c
    return  HAL_ERROR;
 8002c1e:	2501      	movs	r5, #1
 8002c20:	e02a      	b.n	8002c78 <HAL_SAI_Transmit_DMA+0xc8>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002c22:	4601      	mov	r1, r0
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7ff feb5 	bl	8002994 <SAI_InterruptFlag>
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	4310      	orrs	r0, r2
 8002c30:	6118      	str	r0, [r3, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002c38:	601a      	str	r2, [r3, #0]
    while((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	695e      	ldr	r6, [r3, #20]
 8002c3e:	f416 26e0 	ands.w	r6, r6, #458752	; 0x70000
 8002c42:	d00a      	beq.n	8002c5a <HAL_SAI_Transmit_DMA+0xaa>
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	03d2      	lsls	r2, r2, #15
      __HAL_SAI_ENABLE(hsai);
 8002c48:	bf5e      	ittt	pl
 8002c4a:	681a      	ldrpl	r2, [r3, #0]
 8002c4c:	f442 3280 	orrpl.w	r2, r2, #65536	; 0x10000
 8002c50:	601a      	strpl	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8002c52:	2300      	movs	r3, #0
 8002c54:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8002c58:	e00e      	b.n	8002c78 <HAL_SAI_Transmit_DMA+0xc8>
      if((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8002c5a:	f7fd fe03 	bl	8000864 <HAL_GetTick>
 8002c5e:	1bc0      	subs	r0, r0, r7
 8002c60:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002c64:	d9e9      	bls.n	8002c3a <HAL_SAI_Transmit_DMA+0x8a>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8002c66:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        __HAL_UNLOCK(hsai);
 8002c6a:	f884 607c 	strb.w	r6, [r4, #124]	; 0x7c
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8002c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c72:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_TIMEOUT;
 8002c76:	2503      	movs	r5, #3
}
 8002c78:	4628      	mov	r0, r5
 8002c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8002c7e:	2502      	movs	r5, #2
 8002c80:	e7fa      	b.n	8002c78 <HAL_SAI_Transmit_DMA+0xc8>
 8002c82:	bf00      	nop
 8002c84:	08002ccd 	.word	0x08002ccd
 8002c88:	08002c93 	.word	0x08002c93
 8002c8c:	08002cd9 	.word	0x08002cd9

08002c90 <HAL_SAI_TxCpltCallback>:
 8002c90:	4770      	bx	lr

08002c92 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002c92:	b538      	push	{r3, r4, r5, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
  
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8002c94:	6803      	ldr	r3, [r0, #0]
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef* )hdma)->Parent;
 8002c96:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8002c98:	6819      	ldr	r1, [r3, #0]
 8002c9a:	f011 0120 	ands.w	r1, r1, #32
 8002c9e:	d110      	bne.n	8002cc2 <SAI_DMATxCplt+0x30>
  {
    hsai->XferCount = 0;
    
    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8002ca0:	6825      	ldr	r5, [r4, #0]
    hsai->XferCount = 0;
 8002ca2:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8002ca6:	682b      	ldr	r3, [r5, #0]
 8002ca8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002cac:	602b      	str	r3, [r5, #0]
    
    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f7ff fe70 	bl	8002994 <SAI_InterruptFlag>
 8002cb4:	692b      	ldr	r3, [r5, #16]
 8002cb6:	ea23 0000 	bic.w	r0, r3, r0
    
    hsai->State= HAL_SAI_STATE_READY;
 8002cba:	2301      	movs	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8002cbc:	6128      	str	r0, [r5, #16]
    hsai->State= HAL_SAI_STATE_READY;
 8002cbe:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  }
  HAL_SAI_TxCpltCallback(hsai);
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	f7ff ffe4 	bl	8002c90 <HAL_SAI_TxCpltCallback>
 8002cc8:	bd38      	pop	{r3, r4, r5, pc}

08002cca <HAL_SAI_TxHalfCpltCallback>:
 8002cca:	4770      	bx	lr

08002ccc <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b508      	push	{r3, lr}
  SAI_HandleTypeDef* hsai = (SAI_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
  
  HAL_SAI_TxHalfCpltCallback(hsai);
 8002cce:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002cd0:	f7ff fffb 	bl	8002cca <HAL_SAI_TxHalfCpltCallback>
 8002cd4:	bd08      	pop	{r3, pc}

08002cd6 <HAL_SAI_ErrorCallback>:
{
 8002cd6:	4770      	bx	lr

08002cd8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b510      	push	{r4, lr}
  SAI_HandleTypeDef* hsai = ( SAI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cda:	6a84      	ldr	r4, [r0, #40]	; 0x28

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8002cdc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  
  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8002ce0:	6822      	ldr	r2, [r4, #0]
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8002ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8002cea:	6813      	ldr	r3, [r2, #0]
 8002cec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002cf0:	6013      	str	r3, [r2, #0]

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f7ff fe64 	bl	80029c0 <SAI_Disable>
    
  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a

  /* SAI error Callback */ 
  HAL_SAI_ErrorCallback(hsai);
 8002d04:	4620      	mov	r0, r4
 8002d06:	f7ff ffe6 	bl	8002cd6 <HAL_SAI_ErrorCallback>
 8002d0a:	bd10      	pop	{r4, pc}

08002d0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d44 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d12:	e003      	b.n	8002d1c <LoopCopyDataInit>

08002d14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002d16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d1a:	3104      	adds	r1, #4

08002d1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d1c:	480b      	ldr	r0, [pc, #44]	; (8002d4c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002d20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002d22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002d24:	d3f6      	bcc.n	8002d14 <CopyDataInit>
	ldr	r2, =_sbss
 8002d26:	4a0b      	ldr	r2, [pc, #44]	; (8002d54 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002d28:	e002      	b.n	8002d30 <LoopFillZerobss>

08002d2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002d2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002d2c:	f842 3b04 	str.w	r3, [r2], #4

08002d30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <LoopForever+0x16>)
	cmp	r2, r3
 8002d32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002d34:	d3f9      	bcc.n	8002d2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d36:	f7fd fd47 	bl	80007c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d3a:	f000 fa5f 	bl	80031fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d3e:	f000 f849 	bl	8002dd4 <main>

08002d42 <LoopForever>:

LoopForever:
    b LoopForever
 8002d42:	e7fe      	b.n	8002d42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d44:	20017fff 	.word	0x20017fff
	ldr	r3, =_sidata
 8002d48:	080032c0 	.word	0x080032c0
	ldr	r0, =_sdata
 8002d4c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002d50:	20000044 	.word	0x20000044
	ldr	r2, =_sbss
 8002d54:	20000044 	.word	0x20000044
	ldr	r3, = _ebss
 8002d58:	20004288 	.word	0x20004288

08002d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d5c:	e7fe      	b.n	8002d5c <ADC1_2_IRQHandler>

08002d5e <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d5e:	b510      	push	{r4, lr}
 8002d60:	b096      	sub	sp, #88	; 0x58
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d62:	2214      	movs	r2, #20
 8002d64:	2100      	movs	r1, #0
 8002d66:	4668      	mov	r0, sp
 8002d68:	f000 fa6c 	bl	8003244 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d6c:	2244      	movs	r2, #68	; 0x44
 8002d6e:	2100      	movs	r1, #0
 8002d70:	a805      	add	r0, sp, #20
 8002d72:	f000 fa67 	bl	8003244 <memset>

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002d76:	2310      	movs	r3, #16
 8002d78:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002d7a:	2301      	movs	r3, #1
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002d7c:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002d7e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002d80:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002d82:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002d84:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002d86:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002d88:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d8a:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
 8002d8c:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d8e:	2404      	movs	r4, #4
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d90:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d92:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d94:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 7;
 8002d96:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d98:	9414      	str	r4, [sp, #80]	; 0x50
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d9a:	f7fe fdfd 	bl	8001998 <HAL_RCC_OscConfig>
 8002d9e:	b100      	cbz	r0, 8002da2 <SystemClock_Config+0x44>
 8002da0:	e7fe      	b.n	8002da0 <SystemClock_Config+0x42>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002da2:	220f      	movs	r2, #15
 8002da4:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002da6:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 8002da8:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8002daa:	9004      	str	r0, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002dac:	4621      	mov	r1, r4
 8002dae:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002db0:	e88d 000c 	stmia.w	sp, {r2, r3}
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002db4:	f7ff f822 	bl	8001dfc <HAL_RCC_ClockConfig>
 8002db8:	b100      	cbz	r0, 8002dbc <SystemClock_Config+0x5e>
 8002dba:	e7fe      	b.n	8002dba <SystemClock_Config+0x5c>
  {
    /* Initialization Error */
    while(1);
  }
}
 8002dbc:	b016      	add	sp, #88	; 0x58
 8002dbe:	bd10      	pop	{r4, pc}

08002dc0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8002dc0:	b508      	push	{r3, lr}
  while (1)
  {
    /* Toggle LED4 with a period of one second */
    BSP_LED_Toggle(LED4);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7fd fc08 	bl	80005d8 <BSP_LED_Toggle>
    HAL_Delay(1000);
 8002dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dcc:	f7fd fd50 	bl	8000870 <HAL_Delay>
 8002dd0:	e7f7      	b.n	8002dc2 <Error_Handler+0x2>
	...

08002dd4 <main>:
{
 8002dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_Init();
 8002dd8:	f7fd fd30 	bl	800083c <HAL_Init>
  SystemClock_Config();
 8002ddc:	f7ff ffbf 	bl	8002d5e <SystemClock_Config>
  BSP_LED_Init(LED4);
 8002de0:	2000      	movs	r0, #0
 8002de2:	f7fd fbbf 	bl	8000564 <BSP_LED_Init>
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&DfsdmChannelHandle);
 8002de6:	4878      	ldr	r0, [pc, #480]	; (8002fc8 <main+0x1f4>)
  DfsdmChannelHandle.Instance                      = DFSDM1_Channel2;
 8002de8:	4a78      	ldr	r2, [pc, #480]	; (8002fcc <main+0x1f8>)
 8002dea:	6002      	str	r2, [r0, #0]
  DfsdmChannelHandle.Init.OutputClock.Selection    = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8002dec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002df0:	6082      	str	r2, [r0, #8]
  DfsdmChannelHandle.Init.OutputClock.Divider      = 4; /* 11.294MHz/4 = 2.82MHz */
 8002df2:	2204      	movs	r2, #4
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&DfsdmChannelHandle);
 8002df4:	2300      	movs	r3, #0
  DfsdmChannelHandle.Init.OutputClock.Activation   = ENABLE;
 8002df6:	2601      	movs	r6, #1
  DfsdmChannelHandle.Init.OutputClock.Divider      = 4; /* 11.294MHz/4 = 2.82MHz */
 8002df8:	60c2      	str	r2, [r0, #12]
  DfsdmChannelHandle.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002dfa:	6202      	str	r2, [r0, #32]
  DfsdmChannelHandle.Init.RightBitShift            = 2;
 8002dfc:	2702      	movs	r7, #2
  DfsdmChannelHandle.Init.Awd.Oversampling         = 10; /* N.U. */
 8002dfe:	220a      	movs	r2, #10
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&DfsdmChannelHandle);
 8002e00:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  DfsdmChannelHandle.Init.OutputClock.Activation   = ENABLE;
 8002e04:	7106      	strb	r6, [r0, #4]
  DfsdmChannelHandle.Init.Input.Multiplexer        = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002e06:	6103      	str	r3, [r0, #16]
  DfsdmChannelHandle.Init.Input.DataPacking        = DFSDM_CHANNEL_STANDARD_MODE; /* N.U. */
 8002e08:	6143      	str	r3, [r0, #20]
  DfsdmChannelHandle.Init.Input.Pins               = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8002e0a:	6183      	str	r3, [r0, #24]
  DfsdmChannelHandle.Init.SerialInterface.Type     = DFSDM_CHANNEL_SPI_RISING;
 8002e0c:	61c3      	str	r3, [r0, #28]
  DfsdmChannelHandle.Init.Awd.FilterOrder          = DFSDM_CHANNEL_FASTSINC_ORDER; /* N.U. */
 8002e0e:	6243      	str	r3, [r0, #36]	; 0x24
  DfsdmChannelHandle.Init.Awd.Oversampling         = 10; /* N.U. */
 8002e10:	6282      	str	r2, [r0, #40]	; 0x28
  DfsdmChannelHandle.Init.Offset                   = 0;
 8002e12:	62c3      	str	r3, [r0, #44]	; 0x2c
  DfsdmChannelHandle.Init.RightBitShift            = 2;
 8002e14:	6307      	str	r7, [r0, #48]	; 0x30
  if(HAL_OK != HAL_DFSDM_ChannelInit(&DfsdmChannelHandle))
 8002e16:	f7fd fe07 	bl	8000a28 <HAL_DFSDM_ChannelInit>
 8002e1a:	b108      	cbz	r0, 8002e20 <main+0x4c>
    Error_Handler();
 8002e1c:	f7ff ffd0 	bl	8002dc0 <Error_Handler>
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&DfsdmFilterHandle);
 8002e20:	4d6b      	ldr	r5, [pc, #428]	; (8002fd0 <main+0x1fc>)
  DfsdmFilterHandle.Instance                          = DFSDM1_Filter0;
 8002e22:	4b6c      	ldr	r3, [pc, #432]	; (8002fd4 <main+0x200>)
 8002e24:	602b      	str	r3, [r5, #0]
  DfsdmFilterHandle.Init.FilterParam.SincOrder        = DFSDM_FILTER_SINC3_ORDER;
 8002e26:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&DfsdmFilterHandle);
 8002e2a:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
  DfsdmFilterHandle.Init.RegularParam.Trigger         = DFSDM_FILTER_SW_TRIGGER;
 8002e2e:	6068      	str	r0, [r5, #4]
  DfsdmFilterHandle.Init.InjectedParam.Trigger        = DFSDM_FILTER_SW_TRIGGER; /* N.U. */
 8002e30:	60e8      	str	r0, [r5, #12]
  DfsdmFilterHandle.Init.InjectedParam.DmaMode        = DISABLE; /* N.U. */
 8002e32:	7468      	strb	r0, [r5, #17]
  DfsdmFilterHandle.Init.InjectedParam.ExtTrigger     = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO; /* N.U. */
 8002e34:	6168      	str	r0, [r5, #20]
  DfsdmFilterHandle.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE; /* N.U. */
 8002e36:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  DfsdmFilterHandle.Init.FilterParam.SincOrder        = DFSDM_FILTER_SINC3_ORDER;
 8002e3a:	61eb      	str	r3, [r5, #28]
  if(HAL_OK != HAL_DFSDM_FilterInit(&DfsdmFilterHandle))
 8002e3c:	4628      	mov	r0, r5
  DfsdmFilterHandle.Init.FilterParam.Oversampling     = 64; /* 11.294MHz/(4*64) = 44.1KHz */
 8002e3e:	2340      	movs	r3, #64	; 0x40
  DfsdmFilterHandle.Init.RegularParam.FastMode        = ENABLE;
 8002e40:	722e      	strb	r6, [r5, #8]
  DfsdmFilterHandle.Init.RegularParam.DmaMode         = ENABLE;
 8002e42:	726e      	strb	r6, [r5, #9]
  DfsdmFilterHandle.Init.InjectedParam.ScanMode       = ENABLE; /* N.U. */
 8002e44:	742e      	strb	r6, [r5, #16]
  DfsdmFilterHandle.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE; /* N.U. */
 8002e46:	f8c5 8018 	str.w	r8, [r5, #24]
  DfsdmFilterHandle.Init.FilterParam.Oversampling     = 64; /* 11.294MHz/(4*64) = 44.1KHz */
 8002e4a:	622b      	str	r3, [r5, #32]
  DfsdmFilterHandle.Init.FilterParam.IntOversampling  = 1;
 8002e4c:	626e      	str	r6, [r5, #36]	; 0x24
  if(HAL_OK != HAL_DFSDM_FilterInit(&DfsdmFilterHandle))
 8002e4e:	f7fd fe5f 	bl	8000b10 <HAL_DFSDM_FilterInit>
 8002e52:	2800      	cmp	r0, #0
 8002e54:	d1e2      	bne.n	8002e1c <main+0x48>
  if(HAL_OK != HAL_DFSDM_FilterConfigRegChannel(&DfsdmFilterHandle, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON))
 8002e56:	4632      	mov	r2, r6
 8002e58:	495f      	ldr	r1, [pc, #380]	; (8002fd8 <main+0x204>)
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f7fd feca 	bl	8000bf4 <HAL_DFSDM_FilterConfigRegChannel>
 8002e60:	2800      	cmp	r0, #0
 8002e62:	d1db      	bne.n	8002e1c <main+0x48>
  __HAL_SAI_RESET_HANDLE_STATE(&SaiHandle);
 8002e64:	4c5d      	ldr	r4, [pc, #372]	; (8002fdc <main+0x208>)
  SaiHandle.Instance = SAI1_Block_A;
 8002e66:	4b5e      	ldr	r3, [pc, #376]	; (8002fe0 <main+0x20c>)
 8002e68:	6023      	str	r3, [r4, #0]
  SaiHandle.Init.DataSize       = SAI_DATASIZE_16;
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	6363      	str	r3, [r4, #52]	; 0x34
  SaiHandle.FrameInit.FrameLength       = 32; 
 8002e6e:	2320      	movs	r3, #32
 8002e70:	6423      	str	r3, [r4, #64]	; 0x40
  SaiHandle.FrameInit.ActiveFrameLength = 16;
 8002e72:	2310      	movs	r3, #16
 8002e74:	6463      	str	r3, [r4, #68]	; 0x44
  SaiHandle.FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8002e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e7a:	64a3      	str	r3, [r4, #72]	; 0x48
  SaiHandle.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8002e7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __HAL_SAI_RESET_HANDLE_STATE(&SaiHandle);
 8002e80:	f884 007d 	strb.w	r0, [r4, #125]	; 0x7d
  SaiHandle.Init.AudioMode      = SAI_MODEMASTER_TX;
 8002e84:	6060      	str	r0, [r4, #4]
  SaiHandle.Init.Synchro        = SAI_ASYNCHRONOUS;
 8002e86:	60a0      	str	r0, [r4, #8]
  SaiHandle.Init.SynchroExt     = SAI_SYNCEXT_DISABLE;
 8002e88:	60e0      	str	r0, [r4, #12]
  SaiHandle.Init.OutputDrive    = SAI_OUTPUTDRIVE_ENABLE;
 8002e8a:	f8c4 8010 	str.w	r8, [r4, #16]
  SaiHandle.Init.NoDivider      = SAI_MASTERDIVIDER_ENABLE;
 8002e8e:	6160      	str	r0, [r4, #20]
  SaiHandle.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8002e90:	f64a 4844 	movw	r8, #44100	; 0xac44
  SaiHandle.Init.Mckdiv         = 0; /* N.U */
 8002e94:	6220      	str	r0, [r4, #32]
  SaiHandle.Init.MonoStereoMode = SAI_STEREOMODE;
 8002e96:	6260      	str	r0, [r4, #36]	; 0x24
  SaiHandle.Init.CompandingMode = SAI_NOCOMPANDING;
 8002e98:	62a0      	str	r0, [r4, #40]	; 0x28
  SaiHandle.Init.TriState       = SAI_OUTPUT_NOTRELEASED;
 8002e9a:	62e0      	str	r0, [r4, #44]	; 0x2c
  SaiHandle.Init.Protocol       = SAI_FREE_PROTOCOL;
 8002e9c:	6320      	str	r0, [r4, #48]	; 0x30
  SaiHandle.Init.FirstBit       = SAI_FIRSTBIT_MSB;
 8002e9e:	63a0      	str	r0, [r4, #56]	; 0x38
  SaiHandle.Init.ClockStrobing  = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002ea0:	63e0      	str	r0, [r4, #60]	; 0x3c
  SaiHandle.FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8002ea2:	64e0      	str	r0, [r4, #76]	; 0x4c
  SaiHandle.FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8002ea4:	6523      	str	r3, [r4, #80]	; 0x50
  SaiHandle.SlotInit.FirstBitOffset = 0;
 8002ea6:	6560      	str	r0, [r4, #84]	; 0x54
  SaiHandle.SlotInit.SlotSize       = SAI_SLOTSIZE_DATASIZE;
 8002ea8:	65a0      	str	r0, [r4, #88]	; 0x58
  SaiHandle.SlotInit.SlotActive     = (SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1);
 8002eaa:	2303      	movs	r3, #3
  if(HAL_OK != HAL_SAI_Init(&SaiHandle))
 8002eac:	4620      	mov	r0, r4
  SaiHandle.Init.FIFOThreshold  = SAI_FIFOTHRESHOLD_1QF;
 8002eae:	61a6      	str	r6, [r4, #24]
  SaiHandle.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8002eb0:	f8c4 801c 	str.w	r8, [r4, #28]
  SaiHandle.SlotInit.SlotNumber     = 2; 
 8002eb4:	65e7      	str	r7, [r4, #92]	; 0x5c
  SaiHandle.SlotInit.SlotActive     = (SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1);
 8002eb6:	6623      	str	r3, [r4, #96]	; 0x60
  if(HAL_OK != HAL_SAI_Init(&SaiHandle))
 8002eb8:	f7ff fda0 	bl	80029fc <HAL_SAI_Init>
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	d1ad      	bne.n	8002e1c <main+0x48>
  __HAL_SAI_ENABLE(&SaiHandle);
 8002ec0:	6822      	ldr	r2, [r4, #0]
  if(CS43L22_ID != cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS))
 8002ec2:	4e48      	ldr	r6, [pc, #288]	; (8002fe4 <main+0x210>)
  __HAL_SAI_ENABLE(&SaiHandle);
 8002ec4:	6813      	ldr	r3, [r2, #0]
 8002ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eca:	6013      	str	r3, [r2, #0]
  if(CS43L22_ID != cs43l22_drv.ReadID(AUDIO_I2C_ADDRESS))
 8002ecc:	2094      	movs	r0, #148	; 0x94
 8002ece:	68b3      	ldr	r3, [r6, #8]
 8002ed0:	4798      	blx	r3
 8002ed2:	28e0      	cmp	r0, #224	; 0xe0
 8002ed4:	d1a2      	bne.n	8002e1c <main+0x48>
  audio_drv = &cs43l22_drv;
 8002ed6:	4c44      	ldr	r4, [pc, #272]	; (8002fe8 <main+0x214>)
  audio_drv->Reset(AUDIO_I2C_ADDRESS);  
 8002ed8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
  audio_drv = &cs43l22_drv;
 8002eda:	6026      	str	r6, [r4, #0]
  audio_drv->Reset(AUDIO_I2C_ADDRESS);  
 8002edc:	2094      	movs	r0, #148	; 0x94
 8002ede:	4798      	blx	r3
  if(0 != audio_drv->Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 90, AUDIO_FREQUENCY_44K))
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	225a      	movs	r2, #90	; 0x5a
 8002ee4:	681e      	ldr	r6, [r3, #0]
 8002ee6:	4639      	mov	r1, r7
 8002ee8:	4643      	mov	r3, r8
 8002eea:	2094      	movs	r0, #148	; 0x94
 8002eec:	47b0      	blx	r6
 8002eee:	2800      	cmp	r0, #0
 8002ef0:	d194      	bne.n	8002e1c <main+0x48>
  if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&DfsdmFilterHandle, RecBuff, 2048))
 8002ef2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ef6:	493d      	ldr	r1, [pc, #244]	; (8002fec <main+0x218>)
 8002ef8:	4628      	mov	r0, r5
 8002efa:	f7fd fe99 	bl	8000c30 <HAL_DFSDM_FilterRegularStart_DMA>
 8002efe:	2800      	cmp	r0, #0
 8002f00:	d18c      	bne.n	8002e1c <main+0x48>
    if(DmaRecHalfBuffCplt == 1)
 8002f02:	4d3b      	ldr	r5, [pc, #236]	; (8002ff0 <main+0x21c>)
        PlayBuff[2*i]     = SaturaLH((RecBuff[i] >> 8), -32768, 32767);
 8002f04:	4f39      	ldr	r7, [pc, #228]	; (8002fec <main+0x218>)
 8002f06:	462e      	mov	r6, r5
    if(DmaRecHalfBuffCplt == 1)
 8002f08:	682b      	ldr	r3, [r5, #0]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d134      	bne.n	8002f78 <main+0x1a4>
 8002f0e:	4839      	ldr	r0, [pc, #228]	; (8002ff4 <main+0x220>)
        PlayBuff[2*i]     = SaturaLH((RecBuff[i] >> 8), -32768, 32767);
 8002f10:	4a39      	ldr	r2, [pc, #228]	; (8002ff8 <main+0x224>)
 8002f12:	f04f 0800 	mov.w	r8, #0
 8002f16:	f647 7eff 	movw	lr, #32767	; 0x7fff
 8002f1a:	f858 3007 	ldr.w	r3, [r8, r7]
 8002f1e:	121b      	asrs	r3, r3, #8
 8002f20:	4573      	cmp	r3, lr
 8002f22:	bfa8      	it	ge
 8002f24:	4673      	movge	r3, lr
 8002f26:	4283      	cmp	r3, r0
 8002f28:	bfb8      	it	lt
 8002f2a:	4603      	movlt	r3, r0
 8002f2c:	b21b      	sxth	r3, r3
 8002f2e:	eb08 0102 	add.w	r1, r8, r2
 8002f32:	f828 3002 	strh.w	r3, [r8, r2]
 8002f36:	f108 0804 	add.w	r8, r8, #4
      for(i = 0; i < 1024; i++)
 8002f3a:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
        PlayBuff[(2*i)+1] = PlayBuff[2*i];
 8002f3e:	804b      	strh	r3, [r1, #2]
      for(i = 0; i < 1024; i++)
 8002f40:	d1eb      	bne.n	8002f1a <main+0x146>
      if(PlaybackStarted == 0)
 8002f42:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8003000 <main+0x22c>
 8002f46:	f8d9 3000 	ldr.w	r3, [r9]
 8002f4a:	b99b      	cbnz	r3, 8002f74 <main+0x1a0>
        if(0 != audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *) &PlayBuff[0], 4096))
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	492a      	ldr	r1, [pc, #168]	; (8002ff8 <main+0x224>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	4642      	mov	r2, r8
 8002f54:	2094      	movs	r0, #148	; 0x94
 8002f56:	4798      	blx	r3
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	f47f af5f 	bne.w	8002e1c <main+0x48>
        if(HAL_OK != HAL_SAI_Transmit_DMA(&SaiHandle, (uint8_t *) &PlayBuff[0], 4096))
 8002f5e:	4642      	mov	r2, r8
 8002f60:	4925      	ldr	r1, [pc, #148]	; (8002ff8 <main+0x224>)
 8002f62:	481e      	ldr	r0, [pc, #120]	; (8002fdc <main+0x208>)
 8002f64:	f7ff fe24 	bl	8002bb0 <HAL_SAI_Transmit_DMA>
 8002f68:	2800      	cmp	r0, #0
 8002f6a:	f47f af57 	bne.w	8002e1c <main+0x48>
        PlaybackStarted = 1;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f8c9 3000 	str.w	r3, [r9]
      DmaRecHalfBuffCplt  = 0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	6033      	str	r3, [r6, #0]
    if(DmaRecBuffCplt == 1)
 8002f78:	4820      	ldr	r0, [pc, #128]	; (8002ffc <main+0x228>)
 8002f7a:	6803      	ldr	r3, [r0, #0]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d1c3      	bne.n	8002f08 <main+0x134>
 8002f80:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8002ff4 <main+0x220>
 8002f84:	f8df c070 	ldr.w	ip, [pc, #112]	; 8002ff8 <main+0x224>
 8002f88:	2100      	movs	r1, #0
        PlayBuff[2*i]     = SaturaLH((RecBuff[i] >> 8), -32768, 32767);
 8002f8a:	f647 79ff 	movw	r9, #32767	; 0x7fff
        PlayBuff[(2*i)+1] = PlayBuff[2*i];
 8002f8e:	f241 0e02 	movw	lr, #4098	; 0x1002
 8002f92:	008a      	lsls	r2, r1, #2
        PlayBuff[2*i]     = SaturaLH((RecBuff[i] >> 8), -32768, 32767);
 8002f94:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8002f98:	4462      	add	r2, ip
 8002f9a:	59db      	ldr	r3, [r3, r7]
 8002f9c:	121b      	asrs	r3, r3, #8
 8002f9e:	454b      	cmp	r3, r9
 8002fa0:	bfa8      	it	ge
 8002fa2:	464b      	movge	r3, r9
 8002fa4:	4543      	cmp	r3, r8
 8002fa6:	bfb8      	it	lt
 8002fa8:	4643      	movlt	r3, r8
 8002faa:	f502 5a80 	add.w	sl, r2, #4096	; 0x1000
 8002fae:	3101      	adds	r1, #1
 8002fb0:	b21b      	sxth	r3, r3
      for(i = 1024; i < 2048; i++)
 8002fb2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
        PlayBuff[2*i]     = SaturaLH((RecBuff[i] >> 8), -32768, 32767);
 8002fb6:	f8aa 3000 	strh.w	r3, [sl]
        PlayBuff[(2*i)+1] = PlayBuff[2*i];
 8002fba:	f822 300e 	strh.w	r3, [r2, lr]
      for(i = 1024; i < 2048; i++)
 8002fbe:	d1e8      	bne.n	8002f92 <main+0x1be>
      DmaRecBuffCplt  = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	6003      	str	r3, [r0, #0]
 8002fc4:	e7a0      	b.n	8002f08 <main+0x134>
 8002fc6:	bf00      	nop
 8002fc8:	200000e4 	.word	0x200000e4
 8002fcc:	40016040 	.word	0x40016040
 8002fd0:	200041ec 	.word	0x200041ec
 8002fd4:	40016100 	.word	0x40016100
 8002fd8:	00020004 	.word	0x00020004
 8002fdc:	2000411c 	.word	0x2000411c
 8002fe0:	40015404 	.word	0x40015404
 8002fe4:	20000004 	.word	0x20000004
 8002fe8:	200041e8 	.word	0x200041e8
 8002fec:	2000011c 	.word	0x2000011c
 8002ff0:	200000d8 	.word	0x200000d8
 8002ff4:	ffff8000 	.word	0xffff8000
 8002ff8:	2000211c 	.word	0x2000211c
 8002ffc:	200000d4 	.word	0x200000d4
 8003000:	200000dc 	.word	0x200000dc

08003004 <HAL_DFSDM_ChannelMspInit>:
  /* Init of clock, gpio and PLLSAI1 clock */
  GPIO_InitTypeDef GPIO_Init;
  RCC_PeriphCLKInitTypeDef RCC_PeriphCLKInitStruct;
  
  /* Enable DFSDM clock */
  __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003004:	4b20      	ldr	r3, [pc, #128]	; (8003088 <HAL_DFSDM_ChannelMspInit+0x84>)
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
  GPIO_Init.Pull      = GPIO_PULLDOWN;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_Init.Alternate = GPIO_AF6_DFSDM1;
  GPIO_Init.Pin = GPIO_PIN_9;
  HAL_GPIO_Init(GPIOE, &GPIO_Init);
 8003006:	4821      	ldr	r0, [pc, #132]	; (800308c <HAL_DFSDM_ChannelMspInit+0x88>)
  __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003008:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800300a:	b510      	push	{r4, lr}
  __HAL_RCC_DFSDM1_CLK_ENABLE();
 800300c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003010:	661a      	str	r2, [r3, #96]	; 0x60
 8003012:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003014:	b0aa      	sub	sp, #168	; 0xa8
  __HAL_RCC_DFSDM1_CLK_ENABLE();
 8003016:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 800301a:	9201      	str	r2, [sp, #4]
 800301c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800301e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003020:	f042 0210 	orr.w	r2, r2, #16
 8003024:	64da      	str	r2, [r3, #76]	; 0x4c
 8003026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	9302      	str	r3, [sp, #8]
 800302e:	9b02      	ldr	r3, [sp, #8]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	9304      	str	r3, [sp, #16]
  GPIO_Init.Pull      = GPIO_PULLDOWN;
 8003034:	9305      	str	r3, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003036:	2303      	movs	r3, #3
  GPIO_Init.Pin = GPIO_PIN_9;
 8003038:	ac2a      	add	r4, sp, #168	; 0xa8
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800303a:	9306      	str	r3, [sp, #24]
  GPIO_Init.Alternate = GPIO_AF6_DFSDM1;
 800303c:	2306      	movs	r3, #6
 800303e:	9307      	str	r3, [sp, #28]
  GPIO_Init.Pin = GPIO_PIN_9;
 8003040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003044:	f844 3d9c 	str.w	r3, [r4, #-156]!
  HAL_GPIO_Init(GPIOE, &GPIO_Init);
 8003048:	4621      	mov	r1, r4
 800304a:	f7fd ff37 	bl	8000ebc <HAL_GPIO_Init>
  GPIO_Init.Pin = GPIO_PIN_7;
 800304e:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOE, &GPIO_Init);
 8003050:	480e      	ldr	r0, [pc, #56]	; (800308c <HAL_DFSDM_ChannelMspInit+0x88>)
  GPIO_Init.Pin = GPIO_PIN_7;
 8003052:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_Init);
 8003054:	4621      	mov	r1, r4
 8003056:	f7fd ff31 	bl	8000ebc <HAL_GPIO_Init>
  
  /* Configure and enable PLLSAI1 clock to generate 11.294MHz */
  RCC_PeriphCLKInitStruct.PeriphClockSelection    = RCC_PERIPHCLK_SAI1;
 800305a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800305e:	9308      	str	r3, [sp, #32]
  RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1Source   = RCC_PLLSOURCE_MSI;
 8003060:	2301      	movs	r3, #1
 8003062:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1M        = 1;
 8003064:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1N        = 48;
 8003066:	2330      	movs	r3, #48	; 0x30
 8003068:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1P        = 17;
 800306a:	2311      	movs	r3, #17
 800306c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_PeriphCLKInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800306e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003072:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_PeriphCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
  if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
 8003074:	a808      	add	r0, sp, #32
  RCC_PeriphCLKInitStruct.Sai1ClockSelection      = RCC_SAI1CLKSOURCE_PLLSAI1;
 8003076:	2300      	movs	r3, #0
 8003078:	9321      	str	r3, [sp, #132]	; 0x84
  if(HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct) != HAL_OK)
 800307a:	f7ff f8a1 	bl	80021c0 <HAL_RCCEx_PeriphCLKConfig>
 800307e:	b108      	cbz	r0, 8003084 <HAL_DFSDM_ChannelMspInit+0x80>
  {
    Error_Handler();
 8003080:	f7ff fe9e 	bl	8002dc0 <Error_Handler>
  }
}
 8003084:	b02a      	add	sp, #168	; 0xa8
 8003086:	bd10      	pop	{r4, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	48001000 	.word	0x48001000

08003090 <HAL_DFSDM_FilterMspInit>:
  * @retval None
  */
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  /* Configure DMA1_Channel4 */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003090:	4b18      	ldr	r3, [pc, #96]	; (80030f4 <HAL_DFSDM_FilterMspInit+0x64>)
{
 8003092:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003094:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	649a      	str	r2, [r3, #72]	; 0x48
 800309c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	9301      	str	r3, [sp, #4]
 80030a4:	9b01      	ldr	r3, [sp, #4]
  hDfsdmDma.Init.Request             = DMA_REQUEST_0;
 80030a6:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <HAL_DFSDM_FilterMspInit+0x68>)
  hDfsdmDma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
  hDfsdmDma.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
  hDfsdmDma.Init.Mode                = DMA_CIRCULAR;
  hDfsdmDma.Init.Priority            = DMA_PRIORITY_HIGH;
  hDfsdmDma.Instance                 = DMA1_Channel4;
  __HAL_LINKDMA(hdfsdm_filter, hdmaReg, hDfsdmDma);
 80030a8:	6283      	str	r3, [r0, #40]	; 0x28
  hDfsdmDma.Init.Request             = DMA_REQUEST_0;
 80030aa:	2200      	movs	r2, #0
 80030ac:	605a      	str	r2, [r3, #4]
  hDfsdmDma.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80030ae:	609a      	str	r2, [r3, #8]
  hDfsdmDma.Init.PeriphInc           = DMA_PINC_DISABLE;
 80030b0:	60da      	str	r2, [r3, #12]
  hDfsdmDma.Init.MemInc              = DMA_MINC_ENABLE;
 80030b2:	2280      	movs	r2, #128	; 0x80
 80030b4:	611a      	str	r2, [r3, #16]
  hDfsdmDma.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ba:	615a      	str	r2, [r3, #20]
  hDfsdmDma.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80030bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030c0:	619a      	str	r2, [r3, #24]
  hDfsdmDma.Init.Mode                = DMA_CIRCULAR;
 80030c2:	2220      	movs	r2, #32
 80030c4:	61da      	str	r2, [r3, #28]
  hDfsdmDma.Init.Priority            = DMA_PRIORITY_HIGH;
 80030c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030ca:	621a      	str	r2, [r3, #32]
  __HAL_LINKDMA(hdfsdm_filter, hdmaReg, hDfsdmDma);
 80030cc:	6298      	str	r0, [r3, #40]	; 0x28
  hDfsdmDma.Instance                 = DMA1_Channel4;
 80030ce:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <HAL_DFSDM_FilterMspInit+0x6c>)
 80030d0:	601a      	str	r2, [r3, #0]
  if (HAL_OK != HAL_DMA_Init(&hDfsdmDma))
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fdfc 	bl	8000cd0 <HAL_DMA_Init>
 80030d8:	4602      	mov	r2, r0
 80030da:	b108      	cbz	r0, 80030e0 <HAL_DFSDM_FilterMspInit+0x50>
  {
    Error_Handler();
 80030dc:	f7ff fe70 	bl	8002dc0 <Error_Handler>
  }
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0x01, 0);
 80030e0:	2101      	movs	r1, #1
 80030e2:	200e      	movs	r0, #14
 80030e4:	f7fd fbe4 	bl	80008b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80030e8:	200e      	movs	r0, #14
 80030ea:	f7fd fc15 	bl	8000918 <HAL_NVIC_EnableIRQ>
}
 80030ee:	b003      	add	sp, #12
 80030f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80030f4:	40021000 	.word	0x40021000
 80030f8:	20004240 	.word	0x20004240
 80030fc:	40020044 	.word	0x40020044

08003100 <HAL_SAI_MspInit>:
  * @param  hsai : pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8003100:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_Init;
  
  /* Enable SAI1 clock */
  __HAL_RCC_SAI1_CLK_ENABLE();
 8003102:	4c29      	ldr	r4, [pc, #164]	; (80031a8 <HAL_SAI_MspInit+0xa8>)
 8003104:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003106:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800310a:	6623      	str	r3, [r4, #96]	; 0x60
 800310c:	6e23      	ldr	r3, [r4, #96]	; 0x60
{
 800310e:	b088      	sub	sp, #32
  __HAL_RCC_SAI1_CLK_ENABLE();
 8003110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure GPIOs used for SAI1 */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003118:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800311a:	f043 0310 	orr.w	r3, r3, #16
 800311e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003120:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	9301      	str	r3, [sp, #4]
 8003128:	9b01      	ldr	r3, [sp, #4]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800312a:	2302      	movs	r3, #2
 800312c:	9304      	str	r3, [sp, #16]
  GPIO_Init.Pull      = GPIO_NOPULL;
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800312e:	2303      	movs	r3, #3
  GPIO_Init.Alternate = GPIO_AF13_SAI1;
  GPIO_Init.Pin       = (GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 8003130:	a908      	add	r1, sp, #32
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003132:	9306      	str	r3, [sp, #24]
  GPIO_Init.Alternate = GPIO_AF13_SAI1;
 8003134:	230d      	movs	r3, #13
 8003136:	9307      	str	r3, [sp, #28]
  GPIO_Init.Pin       = (GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 8003138:	2374      	movs	r3, #116	; 0x74
{
 800313a:	4605      	mov	r5, r0
  GPIO_Init.Pin       = (GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6);
 800313c:	f841 3d14 	str.w	r3, [r1, #-20]!
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003140:	2600      	movs	r6, #0
  HAL_GPIO_Init(GPIOE, &GPIO_Init);
 8003142:	481a      	ldr	r0, [pc, #104]	; (80031ac <HAL_SAI_MspInit+0xac>)
  GPIO_Init.Pull      = GPIO_NOPULL;
 8003144:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_Init);
 8003146:	f7fd feb9 	bl	8000ebc <HAL_GPIO_Init>
  
  /* Configure DMA used for SAI1 */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800314a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  hSaiDma.Init.Request             = DMA_REQUEST_1;
 800314c:	4818      	ldr	r0, [pc, #96]	; (80031b0 <HAL_SAI_MspInit+0xb0>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	64a3      	str	r3, [r4, #72]	; 0x48
 8003154:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  hSaiDma.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
  hSaiDma.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
  hSaiDma.Init.Mode                = DMA_CIRCULAR;
  hSaiDma.Init.Priority            = DMA_PRIORITY_HIGH;
  hSaiDma.Instance                 = DMA2_Channel1;
  __HAL_LINKDMA(hsai, hdmatx, hSaiDma);
 8003156:	66e8      	str	r0, [r5, #108]	; 0x6c
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	9302      	str	r3, [sp, #8]
 800315e:	9b02      	ldr	r3, [sp, #8]
  hSaiDma.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003160:	60c6      	str	r6, [r0, #12]
  hSaiDma.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003162:	2310      	movs	r3, #16
 8003164:	6083      	str	r3, [r0, #8]
  hSaiDma.Init.MemInc              = DMA_MINC_ENABLE;
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	6103      	str	r3, [r0, #16]
  hSaiDma.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800316a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800316e:	6143      	str	r3, [r0, #20]
  hSaiDma.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8003170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003174:	6183      	str	r3, [r0, #24]
  hSaiDma.Init.Mode                = DMA_CIRCULAR;
 8003176:	2320      	movs	r3, #32
 8003178:	61c3      	str	r3, [r0, #28]
  hSaiDma.Init.Priority            = DMA_PRIORITY_HIGH;
 800317a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800317e:	6203      	str	r3, [r0, #32]
  hSaiDma.Init.Request             = DMA_REQUEST_1;
 8003180:	2401      	movs	r4, #1
  hSaiDma.Instance                 = DMA2_Channel1;
 8003182:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <HAL_SAI_MspInit+0xb4>)
  hSaiDma.Init.Request             = DMA_REQUEST_1;
 8003184:	6044      	str	r4, [r0, #4]
  hSaiDma.Instance                 = DMA2_Channel1;
 8003186:	6003      	str	r3, [r0, #0]
  __HAL_LINKDMA(hsai, hdmatx, hSaiDma);
 8003188:	6285      	str	r5, [r0, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Init(&hSaiDma))
 800318a:	f7fd fda1 	bl	8000cd0 <HAL_DMA_Init>
 800318e:	4602      	mov	r2, r0
 8003190:	b108      	cbz	r0, 8003196 <HAL_SAI_MspInit+0x96>
  {
    Error_Handler();
 8003192:	f7ff fe15 	bl	8002dc0 <Error_Handler>
  }
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0x01, 0);
 8003196:	4621      	mov	r1, r4
 8003198:	2038      	movs	r0, #56	; 0x38
 800319a:	f7fd fb89 	bl	80008b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 800319e:	2038      	movs	r0, #56	; 0x38
 80031a0:	f7fd fbba 	bl	8000918 <HAL_NVIC_EnableIRQ>
}
 80031a4:	b008      	add	sp, #32
 80031a6:	bd70      	pop	{r4, r5, r6, pc}
 80031a8:	40021000 	.word	0x40021000
 80031ac:	48001000 	.word	0x48001000
 80031b0:	200041a0 	.word	0x200041a0
 80031b4:	40020408 	.word	0x40020408

080031b8 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  DmaRecHalfBuffCplt = 1;
 80031b8:	4b01      	ldr	r3, [pc, #4]	; (80031c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x8>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	4770      	bx	lr
 80031c0:	200000d8 	.word	0x200000d8

080031c4 <HAL_DFSDM_FilterRegConvCpltCallback>:
  * @param  hdfsdm_filter : DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
  DmaRecBuffCplt = 1;
 80031c4:	4b01      	ldr	r3, [pc, #4]	; (80031cc <HAL_DFSDM_FilterRegConvCpltCallback+0x8>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	4770      	bx	lr
 80031cc:	200000d4 	.word	0x200000d4

080031d0 <NMI_Handler>:
 80031d0:	4770      	bx	lr

080031d2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80031d2:	e7fe      	b.n	80031d2 <HardFault_Handler>

080031d4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80031d4:	e7fe      	b.n	80031d4 <MemManage_Handler>

080031d6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80031d6:	e7fe      	b.n	80031d6 <BusFault_Handler>

080031d8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80031d8:	e7fe      	b.n	80031d8 <UsageFault_Handler>

080031da <SVC_Handler>:
 80031da:	4770      	bx	lr

080031dc <DebugMon_Handler>:
 80031dc:	4770      	bx	lr

080031de <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80031de:	4770      	bx	lr

080031e0 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80031e0:	f7fd bb38 	b.w	8000854 <HAL_IncTick>

080031e4 <DMA1_Channel4_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA1_Channel4_IRQHandler(void)
{
  HAL_DMA_IRQHandler(&hDfsdmDma);
 80031e4:	4801      	ldr	r0, [pc, #4]	; (80031ec <DMA1_Channel4_IRQHandler+0x8>)
 80031e6:	f7fd be21 	b.w	8000e2c <HAL_DMA_IRQHandler>
 80031ea:	bf00      	nop
 80031ec:	20004240 	.word	0x20004240

080031f0 <DMA2_Channel1_IRQHandler>:
  * @param  None
  * @retval None
  */
void DMA2_Channel1_IRQHandler(void)
{ 
  HAL_DMA_IRQHandler(SaiHandle.hdmatx);
 80031f0:	4b01      	ldr	r3, [pc, #4]	; (80031f8 <DMA2_Channel1_IRQHandler+0x8>)
 80031f2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80031f4:	f7fd be1a 	b.w	8000e2c <HAL_DMA_IRQHandler>
 80031f8:	2000411c 	.word	0x2000411c

080031fc <__libc_init_array>:
 80031fc:	b570      	push	{r4, r5, r6, lr}
 80031fe:	4e0d      	ldr	r6, [pc, #52]	; (8003234 <__libc_init_array+0x38>)
 8003200:	4c0d      	ldr	r4, [pc, #52]	; (8003238 <__libc_init_array+0x3c>)
 8003202:	1ba4      	subs	r4, r4, r6
 8003204:	10a4      	asrs	r4, r4, #2
 8003206:	2500      	movs	r5, #0
 8003208:	42a5      	cmp	r5, r4
 800320a:	d109      	bne.n	8003220 <__libc_init_array+0x24>
 800320c:	4e0b      	ldr	r6, [pc, #44]	; (800323c <__libc_init_array+0x40>)
 800320e:	4c0c      	ldr	r4, [pc, #48]	; (8003240 <__libc_init_array+0x44>)
 8003210:	f000 f820 	bl	8003254 <_init>
 8003214:	1ba4      	subs	r4, r4, r6
 8003216:	10a4      	asrs	r4, r4, #2
 8003218:	2500      	movs	r5, #0
 800321a:	42a5      	cmp	r5, r4
 800321c:	d105      	bne.n	800322a <__libc_init_array+0x2e>
 800321e:	bd70      	pop	{r4, r5, r6, pc}
 8003220:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003224:	4798      	blx	r3
 8003226:	3501      	adds	r5, #1
 8003228:	e7ee      	b.n	8003208 <__libc_init_array+0xc>
 800322a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800322e:	4798      	blx	r3
 8003230:	3501      	adds	r5, #1
 8003232:	e7f2      	b.n	800321a <__libc_init_array+0x1e>
 8003234:	080032b8 	.word	0x080032b8
 8003238:	080032b8 	.word	0x080032b8
 800323c:	080032b8 	.word	0x080032b8
 8003240:	080032bc 	.word	0x080032bc

08003244 <memset>:
 8003244:	4402      	add	r2, r0
 8003246:	4603      	mov	r3, r0
 8003248:	4293      	cmp	r3, r2
 800324a:	d100      	bne.n	800324e <memset+0xa>
 800324c:	4770      	bx	lr
 800324e:	f803 1b01 	strb.w	r1, [r3], #1
 8003252:	e7f9      	b.n	8003248 <memset+0x4>

08003254 <_init>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	bf00      	nop
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr

08003260 <_fini>:
 8003260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003262:	bf00      	nop
 8003264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003266:	bc08      	pop	{r3}
 8003268:	469e      	mov	lr, r3
 800326a:	4770      	bx	lr
